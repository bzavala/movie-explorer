//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Observable, from as _observableFrom, of as _observableOf, throwError as _observableThrow } from 'rxjs';
import { catchError as _observableCatch, mergeMap as _observableMergeMap } from 'rxjs/operators';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ITmdbClient {
    /**
     * Movie
     * @param include_adult (optional)
     * @param language (optional)
     * @param primary_release_year (optional)
     * @param page (optional)
     * @param region (optional)
     * @param year (optional)
     * @return 200
     */
    searchMovie(query: string, include_adult: boolean | undefined, language: string | undefined, primary_release_year: string | undefined, page: number | undefined, region: string | undefined, year: string | undefined): Observable<Anonymous>;
    /**
     * Movie
     * @param certification (optional) use in conjunction with `region`
     * @param certification_gte (optional) use in conjunction with `region`
     * @param certification_lte (optional) use in conjunction with `region`
     * @param certification_country (optional) use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters
     * @param include_adult (optional)
     * @param include_video (optional)
     * @param language (optional)
     * @param page (optional)
     * @param primary_release_year (optional)
     * @param primary_release_date_gte (optional)
     * @param primary_release_date_lte (optional)
     * @param region (optional)
     * @param release_date_gte (optional)
     * @param release_date_lte (optional)
     * @param sort_by (optional)
     * @param vote_average_gte (optional)
     * @param vote_average_lte (optional)
     * @param vote_count_gte (optional)
     * @param vote_count_lte (optional)
     * @param watch_region (optional) use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param with_cast (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_companies (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_crew (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_genres (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_keywords (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_origin_country (optional)
     * @param with_original_language (optional)
     * @param with_people (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_release_type (optional) possible values are: [1, 2, 3, 4, 5, 6] can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`
     * @param with_runtime_gte (optional)
     * @param with_runtime_lte (optional)
     * @param with_watch_monetization_types (optional) possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_providers (optional) use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param without_companies (optional)
     * @param without_genres (optional)
     * @param without_keywords (optional)
     * @param without_watch_providers (optional)
     * @param year (optional)
     * @return 200
     */
    discoverMovie(certification: string | undefined, certification_gte: string | undefined, certification_lte: string | undefined, certification_country: string | undefined, include_adult: boolean | undefined, include_video: boolean | undefined, language: string | undefined, page: number | undefined, primary_release_year: number | undefined, primary_release_date_gte: string | undefined, primary_release_date_lte: string | undefined, region: string | undefined, release_date_gte: string | undefined, release_date_lte: string | undefined, sort_by: Sort_by | undefined, vote_average_gte: number | undefined, vote_average_lte: number | undefined, vote_count_gte: number | undefined, vote_count_lte: number | undefined, watch_region: string | undefined, with_cast: string | undefined, with_companies: string | undefined, with_crew: string | undefined, with_genres: string | undefined, with_keywords: string | undefined, with_origin_country: string | undefined, with_original_language: string | undefined, with_people: string | undefined, with_release_type: number | undefined, with_runtime_gte: number | undefined, with_runtime_lte: number | undefined, with_watch_monetization_types: string | undefined, with_watch_providers: string | undefined, without_companies: string | undefined, without_genres: string | undefined, without_keywords: string | undefined, without_watch_providers: string | undefined, year: number | undefined): Observable<Anonymous2>;
    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    movieDetails(movie_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous3>;
    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvSeriesDetails(series_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous4>;
    /**
     * TV
     * @param first_air_date_year (optional) Search only the first air date. Valid values are: 1000..9999
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @param year (optional) Search the first air date and all episode air dates. Valid values are: 1000..9999
     * @return 200
     */
    searchTv(query: string, first_air_date_year: number | undefined, include_adult: boolean | undefined, language: string | undefined, page: number | undefined, year: number | undefined): Observable<Anonymous5>;
    /**
     * Multi
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    searchMulti(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous6>;
    /**
     * Person
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    searchPerson(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous7>;
    /**
     * Details
     * @return 200
     */
    configurationDetails(): Observable<Anonymous8>;
    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvSeasonDetails(series_id: number, season_number: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous9>;
    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvEpisodeDetails(series_id: number, season_number: number, episode_number: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous10>;
    /**
     * TV
     * @param air_date_gte (optional)
     * @param air_date_lte (optional)
     * @param first_air_date_year (optional)
     * @param first_air_date_gte (optional)
     * @param first_air_date_lte (optional)
     * @param include_adult (optional)
     * @param include_null_first_air_dates (optional)
     * @param language (optional)
     * @param page (optional)
     * @param screened_theatrically (optional)
     * @param sort_by (optional)
     * @param timezone (optional)
     * @param vote_average_gte (optional)
     * @param vote_average_lte (optional)
     * @param vote_count_gte (optional)
     * @param vote_count_lte (optional)
     * @param watch_region (optional) use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param with_companies (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_genres (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_keywords (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_networks (optional)
     * @param with_origin_country (optional)
     * @param with_original_language (optional)
     * @param with_runtime_gte (optional)
     * @param with_runtime_lte (optional)
     * @param with_status (optional) possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_monetization_types (optional) possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_providers (optional) use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param without_companies (optional)
     * @param without_genres (optional)
     * @param without_keywords (optional)
     * @param without_watch_providers (optional)
     * @param with_type (optional) possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query
     * @return 200
     */
    discoverTv(air_date_gte: string | undefined, air_date_lte: string | undefined, first_air_date_year: number | undefined, first_air_date_gte: string | undefined, first_air_date_lte: string | undefined, include_adult: boolean | undefined, include_null_first_air_dates: boolean | undefined, language: string | undefined, page: number | undefined, screened_theatrically: boolean | undefined, sort_by: Sort_by2 | undefined, timezone: string | undefined, vote_average_gte: number | undefined, vote_average_lte: number | undefined, vote_count_gte: number | undefined, vote_count_lte: number | undefined, watch_region: string | undefined, with_companies: string | undefined, with_genres: string | undefined, with_keywords: string | undefined, with_networks: number | undefined, with_origin_country: string | undefined, with_original_language: string | undefined, with_runtime_gte: number | undefined, with_runtime_lte: number | undefined, with_status: string | undefined, with_watch_monetization_types: string | undefined, with_watch_providers: string | undefined, without_companies: string | undefined, without_genres: string | undefined, without_keywords: string | undefined, without_watch_providers: string | undefined, with_type: string | undefined): Observable<Anonymous11>;
    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    movieImages(movie_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous12>;
    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvSeriesImages(series_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous13>;
    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvSeasonImages(series_id: number, include_image_language: string | undefined, language: string | undefined, season_number: number): Observable<Anonymous14>;
    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvEpisodeImages(series_id: number, include_image_language: string | undefined, language: string | undefined, season_number: number, episode_number: number): Observable<Anonymous15>;
    /**
     * All
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingAll(time_window: Time_window, language: string | undefined): Observable<Anonymous16>;
    /**
     * Movies
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingMovies(time_window: Time_window2, language: string | undefined): Observable<Anonymous17>;
    /**
     * TV
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingTv(time_window: Time_window3, language: string | undefined): Observable<Anonymous18>;
    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    movieAccountStates(movie_id: number, session_id: string | undefined, guest_session_id: string | undefined): Observable<Anonymous19>;
    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvSeriesAccountStates(series_id: number, session_id: string | undefined, guest_session_id: string | undefined): Observable<Anonymous20>;
    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvEpisodeAccountStates(series_id: number, session_id: string | undefined, season_number: number, episode_number: number, guest_session_id: string | undefined): Observable<Anonymous21>;
    /**
     * People
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingPeople(time_window: Time_window4, language: string | undefined): Observable<Anonymous22>;
    /**
     * Alternative Titles
     * @param country (optional) specify a ISO-3166-1 value to filter the results
     * @return 200
     */
    movieAlternativeTitles(movie_id: number, country: string | undefined): Observable<Anonymous23>;
    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    movieChanges(movie_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous24>;
    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    movieCredits(movie_id: number, language: string | undefined): Observable<Anonymous25>;
    /**
     * External IDs
     * @return 200
     */
    movieExternalIds(movie_id: number): Observable<Anonymous26>;
    /**
     * Keywords
     * @return 200
     */
    movieKeywords(movie_id: string): Observable<Anonymous27>;
    /**
     * Lists
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieLists(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous28>;
    /**
     * Recommendations
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieRecommendations(movie_id: number, language: string | undefined, page: number | undefined): Observable<any>;
    /**
     * Release Dates
     * @return 200
     */
    movieReleaseDates(movie_id: number): Observable<Anonymous29>;
    /**
     * Reviews
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieReviews(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous30>;
    /**
     * Similar
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieSimilar(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous31>;
    /**
     * Translations
     * @return 200
     */
    movieTranslations(movie_id: number): Observable<Anonymous32>;
    /**
     * Videos
     * @param language (optional)
     * @return 200
     */
    movieVideos(movie_id: number, language: string | undefined): Observable<Anonymous33>;
    /**
     * Watch Providers
     * @return 200
     */
    movieWatchProviders(movie_id: number): Observable<Anonymous34>;
    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    movieAddRating(movie_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, body: Body | undefined): Observable<Anonymous35>;
    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    movieDeleteRating(movie_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined): Observable<Anonymous36>;
    /**
     * Create Guest Session
     * @return 200
     */
    authenticationCreateGuestSession(): Observable<Anonymous37>;
    /**
     * Create Request Token
     * @return 200
     */
    authenticationCreateRequestToken(): Observable<Anonymous38>;
    /**
     * Create Session
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSession(body: Body2 | undefined): Observable<Anonymous39>;
    /**
     * Create Session (from v4 token)
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSessionFromV4Token(body: Body3 | undefined): Observable<Anonymous40>;
    /**
     * Delete Session
     * @param body (optional)
     * @return 200
     */
    authenticationDeleteSession(body: Body4 | undefined): Observable<Anonymous41>;
    /**
     * Find By ID
     * @param language (optional)
     * @return 200
     */
    findById(external_id: string, external_source: External_source, language: string | undefined): Observable<Anonymous42>;
    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    personDetails(person_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous43>;
    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    personChanges(person_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous44>;
    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    tvSeriesChanges(series_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous45>;
    /**
     * Images
     * @return 200
     */
    personImages(person_id: number): Observable<Anonymous46>;
    /**
     * Movie Credits
     * @param language (optional)
     * @return 200
     */
    personMovieCredits(person_id: number, language: string | undefined): Observable<Anonymous47>;
    /**
     * TV Credits
     * @param language (optional)
     * @return 200
     */
    personTvCredits(person_id: number, language: string | undefined): Observable<Anonymous48>;
    /**
     * Combined Credits
     * @param language (optional)
     * @return 200
     */
    personCombinedCredits(person_id: string, language: string | undefined): Observable<Anonymous49>;
    /**
     * External IDs
     * @return 200
     */
    personExternalIds(person_id: number): Observable<Anonymous50>;
    /**
     * Tagged Images
     * @param page (optional)
     * @return 200
     */
    personTaggedImages(person_id: number, page: number | undefined): Observable<Anonymous51>;
    /**
     * Translations
     * @return 200
     */
    translations(person_id: number): Observable<Anonymous52>;
    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    personPopularList(language: string | undefined, page: number | undefined): Observable<Anonymous53>;
    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    moviePopularList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous54>;
    /**
     * Top Rated
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieTopRatedList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous55>;
    /**
     * Upcoming
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieUpcomingList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous56>;
    /**
     * Now Playing
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieNowPlayingList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous57>;
    /**
     * Airing Today
     * @param language (optional)
     * @param page (optional)
     * @param timezone (optional)
     * @return 200
     */
    tvSeriesAiringTodayList(language: string | undefined, page: number | undefined, timezone: string | undefined): Observable<Anonymous58>;
    /**
     * On The Air
     * @param language (optional)
     * @param page (optional)
     * @param timezone (optional)
     * @return 200
     */
    tvSeriesOnTheAirList(language: string | undefined, page: number | undefined, timezone: string | undefined): Observable<Anonymous59>;
    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesPopularList(language: string | undefined, page: number | undefined): Observable<Anonymous60>;
    /**
     * Top Rated
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesTopRatedList(language: string | undefined, page: number | undefined): Observable<Anonymous61>;
    /**
     * Latest
     * @return 200
     */
    movieLatestId(): Observable<Anonymous62>;
    /**
     * Latest
     * @return 200
     */
    tvSeriesLatestId(): Observable<Anonymous63>;
    /**
     * Aggregate Credits
     * @param language (optional)
     * @return 200
     */
    tvSeriesAggregateCredits(series_id: number, language: string | undefined): Observable<Anonymous64>;
    /**
     * Alternative Titles
     * @return 200
     */
    tvSeriesAlternativeTitles(series_id: number): Observable<Anonymous65>;
    /**
     * Content Ratings
     * @return 200
     */
    tvSeriesContentRatings(series_id: number): Observable<Anonymous66>;
    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvSeriesCredits(series_id: number, language: string | undefined): Observable<Anonymous67>;
    /**
     * Episode Groups
     * @return 200
     */
    tvSeriesEpisodeGroups(series_id: number): Observable<Anonymous68>;
    /**
     * External IDs
     * @return 200
     */
    tvSeriesExternalIds(series_id: number): Observable<Anonymous69>;
    /**
     * Keywords
     * @return 200
     */
    tvSeriesKeywords(series_id: number): Observable<Anonymous70>;
    /**
     * Recommendations
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesRecommendations(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous71>;
    /**
     * Reviews
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesReviews(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous72>;
    /**
     * Screened Theatrically
     * @return 200
     */
    tvSeriesScreenedTheatrically(series_id: number): Observable<Anonymous73>;
    /**
     * Similar
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesSimilar(series_id: string, language: string | undefined, page: number | undefined): Observable<Anonymous74>;
    /**
     * Translations
     * @return 200
     */
    tvSeriesTranslations(series_id: number): Observable<Anonymous75>;
    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvSeriesVideos(series_id: number, include_video_language: string | undefined, language: string | undefined): Observable<Anonymous76>;
    /**
     * Watch Providers
     * @return 200
     */
    tvSeriesWatchProviders(series_id: number): Observable<Anonymous77>;
    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    tvSeriesAddRating(series_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, body: Body5 | undefined): Observable<Anonymous78>;
    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    tvSeriesDeleteRating(series_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined): Observable<Anonymous79>;
    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvSeasonAccountStates(series_id: number, session_id: string | undefined, guest_session_id: string | undefined, season_number: number): Observable<Anonymous80>;
    /**
     * Aggregate Credits
     * @param language (optional)
     * @return 200
     */
    tvSeasonAggregateCredits(series_id: number, language: string | undefined, season_number: number): Observable<Anonymous81>;
    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    tvSeasonChangesById(end_date: string | undefined, page: number | undefined, start_date: string | undefined, season_id: number): Observable<Anonymous82>;
    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvSeasonCredits(series_id: number, season_number: number, language: string | undefined): Observable<Anonymous83>;
    /**
     * External IDs
     * @return 200
     */
    tvSeasonExternalIds(series_id: number, season_number: number): Observable<Anonymous84>;
    /**
     * Translations
     * @return 200
     */
    tvSeasonTranslations(series_id: number, season_number: number): Observable<Anonymous85>;
    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvSeasonVideos(series_id: number, include_video_language: string | undefined, language: string | undefined, season_number: number): Observable<Anonymous86>;
    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvEpisodeCredits(series_id: number, season_number: number, language: string | undefined, episode_number: number): Observable<Anonymous87>;
    /**
     * External IDs
     * @return 200
     */
    tvEpisodeExternalIds(series_id: number, season_number: number, episode_number: string): Observable<Anonymous88>;
    /**
     * Translations
     * @return 200
     */
    tvEpisodeTranslations(series_id: number, season_number: number, episode_number: number): Observable<Anonymous89>;
    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvEpisodeVideos(series_id: number, include_video_language: string | undefined, language: string | undefined, season_number: number, episode_number: number): Observable<Anonymous90>;
    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    tvEpisodeAddRating(series_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, season_number: number, episode_number: number, body: Body6 | undefined): Observable<Anonymous91>;
    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    tvEpisodeDeleteRating(series_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined, season_number: number, episode_number: number): Observable<Anonymous92>;
    /**
     * Details
     * @param session_id (optional)
     * @return 200
     */
    accountDetails(account_id: number, session_id: string | undefined): Observable<Anonymous93>;
    /**
     * Lists
     * @param page (optional)
     * @param session_id (optional)
     * @return 200
     */
    accountLists(account_id: number, page: number | undefined, session_id: string | undefined): Observable<Anonymous94>;
    /**
     * Favorite Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountGetFavorites(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by3 | undefined): Observable<Anonymous95>;
    /**
     * Favorite TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountFavoriteTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by4 | undefined): Observable<Anonymous96>;
    /**
     * Rated Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedMovies(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by5 | undefined): Observable<Anonymous97>;
    /**
     * Rated TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by6 | undefined): Observable<Anonymous98>;
    /**
     * Rated TV Episodes
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedTvEpisodes(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by7 | undefined): Observable<Anonymous99>;
    /**
     * Watchlist Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountWatchlistMovies(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by8 | undefined): Observable<Anonymous100>;
    /**
     * Watchlist TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountWatchlistTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by9 | undefined): Observable<Anonymous101>;
    /**
     * Add Favorite
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    accountAddFavorite(account_id: number, session_id: string | undefined, body: Body7 | undefined): Observable<Anonymous102>;
    /**
     * Add To Watchlist
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    accountAddToWatchlist(account_id: number, session_id: string | undefined, body: Body8 | undefined): Observable<Anonymous103>;
    /**
     * Movie Certifications
     * @return 200
     */
    certificationMovieList(): Observable<Anonymous104>;
    /**
     * TV Certifications
     * @return 200
     */
    certificationsTvList(): Observable<Anonymous105>;
    /**
     * Movie List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesMovieList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous106>;
    /**
     * TV List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesTvList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous107>;
    /**
     * People List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesPeopleList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous108>;
    /**
     * Details
     * @param language (optional)
     * @return 200
     */
    collectionDetails(collection_id: number, language: string | undefined): Observable<Anonymous109>;
    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    collectionImages(collection_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous110>;
    /**
     * Translations
     * @return 200
     */
    collectionTranslations(collection_id: number): Observable<Anonymous111>;
    /**
     * Details
     * @return 200
     */
    companyDetails(company_id: number): Observable<Anonymous112>;
    /**
     * Alternative Names
     * @return 200
     */
    companyAlternativeNames(company_id: number): Observable<Anonymous113>;
    /**
     * Images
     * @return 200
     */
    companyImages(company_id: number): Observable<Anonymous114>;
    /**
     * Details
     * @return 200
     */
    creditDetails(credit_id: string): Observable<Anonymous115>;
    /**
     * Movie List
     * @param language (optional)
     * @return 200
     */
    genreMovieList(language: string | undefined): Observable<Anonymous116>;
    /**
     * TV List
     * @param language (optional)
     * @return 200
     */
    genreTvList(language: string | undefined): Observable<Anonymous117>;
    /**
     * Rated Movies
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedMovies(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by10 | undefined): Observable<Anonymous118>;
    /**
     * Rated TV
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedTv(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by11 | undefined): Observable<Anonymous119>;
    /**
     * Rated TV Episodes
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedTvEpisodes(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by12 | undefined): Observable<Anonymous120>;
    /**
     * Available Regions
     * @param language (optional)
     * @return 200
     */
    watchProvidersAvailableRegions(language: string | undefined): Observable<Anonymous121>;
    /**
     * Movie Providers
     * @param language (optional)
     * @param watch_region (optional)
     * @return 200
     */
    watchProvidersMovieList(language: string | undefined, watch_region: string | undefined): Observable<Anonymous122>;
    /**
     * TV Providers
     * @param language (optional)
     * @param watch_region (optional)
     * @return 200
     */
    watchProviderTvList(language: string | undefined, watch_region: string | undefined): Observable<Anonymous123>;
    /**
     * Details
     * @return 200
     */
    keywordDetails(keyword_id: number): Observable<Anonymous124>;
    /**
     * Movies
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    keywordMovies(keyword_id: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous125>;
    /**
     * Details
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    listDetails(list_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous126>;
    /**
     * Delete
     * @return 200
     */
    listDelete(list_id: number, session_id: string): Observable<Anonymous127>;
    /**
     * Check Item Status
     * @param language (optional)
     * @param movie_id (optional)
     * @return 200
     */
    listCheckItemStatus(list_id: number, language: string | undefined, movie_id: number | undefined): Observable<Anonymous128>;
    /**
     * Create
     * @param body (optional)
     * @return 200
     */
    listCreate(session_id: string, body: Body9 | undefined): Observable<Anonymous129>;
    /**
     * Add Movie
     * @param body (optional)
     * @return 200
     */
    listAddMovie(list_id: number, session_id: string, body: Body10 | undefined): Observable<Anonymous130>;
    /**
     * Remove Movie
     * @param body (optional)
     * @return 200
     */
    listRemoveMovie(list_id: number, session_id: string, body: Body11 | undefined): Observable<Anonymous131>;
    /**
     * Clear
     * @return 200
     */
    listClear(list_id: number, session_id: string, confirm: boolean): Observable<Anonymous132>;
    /**
     * Details
     * @return 200
     */
    networkDetails(network_id: number): Observable<Anonymous133>;
    /**
     * Alternative Names
     * @return 200
     */
    detailsCopy(network_id: number): Observable<Anonymous134>;
    /**
     * Images
     * @return 200
     */
    alternativeNamesCopy(network_id: number): Observable<Anonymous135>;
    /**
     * Details
     * @return 200
     */
    reviewDetails(review_id: string): Observable<Anonymous136>;
    /**
     * Validate Key
     * @return 200
     */
    authenticationValidateKey(): Observable<Anonymous137>;
    /**
     * Watch Providers
     * @param language (optional)
     * @return 200
     */
    tvSeasonWatchProviders(series_id: number, language: string | undefined, season_number: number): Observable<Anonymous139>;
    /**
     * Countries
     * @param language (optional)
     * @return 200
     */
    configurationCountries(language: string | undefined): Observable<Anonymous140[]>;
    /**
     * Jobs
     * @return 200
     */
    configurationJobs(): Observable<Anonymous141[]>;
    /**
     * Languages
     * @return 200
     */
    configurationLanguages(): Observable<Anonymous142[]>;
    /**
     * Primary Translations
     * @return 200
     */
    configurationPrimaryTranslations(): Observable<string[]>;
    /**
     * Timezones
     * @return 200
     */
    configurationTimezones(): Observable<Anonymous143[]>;
    /**
     * Create Session (with login)
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSessionFromLogin(body: Body12 | undefined): Observable<Anonymous144>;
    /**
     * Latest
     * @return 200
     */
    personLatestId(): Observable<Anonymous145>;
    /**
     * Changes
     * @return 200
     */
    tvEpisodeChangesById(episode_id: number): Observable<Anonymous146>;
    /**
     * Details
     * @return 200
     */
    tvEpisodeGroupDetails(tv_episode_group_id: string): Observable<Anonymous147>;
    /**
     * Company
     * @param page (optional)
     * @return 200
     */
    searchCompany(query: string, page: number | undefined): Observable<Anonymous148>;
    /**
     * Collection
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @param region (optional)
     * @return 200
     */
    searchCollection(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous149>;
    /**
     * Keyword
     * @param page (optional)
     * @return 200
     */
    searchKeyword(query: string, page: number | undefined): Observable<Anonymous150>;
    /**
     * Lists
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    listsCopy(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous151>;
}

@Injectable()
export class TmdbClient implements ITmdbClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://api.themoviedb.org";
    }

    /**
     * Movie
     * @param include_adult (optional)
     * @param language (optional)
     * @param primary_release_year (optional)
     * @param page (optional)
     * @param region (optional)
     * @param year (optional)
     * @return 200
     */
    searchMovie(query: string, include_adult: boolean | undefined, language: string | undefined, primary_release_year: string | undefined, page: number | undefined, region: string | undefined, year: string | undefined): Observable<Anonymous> {
        let url_ = this.baseUrl + "/3/search/movie?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (primary_release_year === null)
            throw new globalThis.Error("The parameter 'primary_release_year' cannot be null.");
        else if (primary_release_year !== undefined)
            url_ += "primary_release_year=" + encodeURIComponent("" + primary_release_year) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        if (year === null)
            throw new globalThis.Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchMovie(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchMovie(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous>;
        }));
    }

    protected processSearchMovie(response: HttpResponseBase): Observable<Anonymous> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie
     * @param certification (optional) use in conjunction with `region`
     * @param certification_gte (optional) use in conjunction with `region`
     * @param certification_lte (optional) use in conjunction with `region`
     * @param certification_country (optional) use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters
     * @param include_adult (optional)
     * @param include_video (optional)
     * @param language (optional)
     * @param page (optional)
     * @param primary_release_year (optional)
     * @param primary_release_date_gte (optional)
     * @param primary_release_date_lte (optional)
     * @param region (optional)
     * @param release_date_gte (optional)
     * @param release_date_lte (optional)
     * @param sort_by (optional)
     * @param vote_average_gte (optional)
     * @param vote_average_lte (optional)
     * @param vote_count_gte (optional)
     * @param vote_count_lte (optional)
     * @param watch_region (optional) use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param with_cast (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_companies (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_crew (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_genres (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_keywords (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_origin_country (optional)
     * @param with_original_language (optional)
     * @param with_people (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_release_type (optional) possible values are: [1, 2, 3, 4, 5, 6] can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`
     * @param with_runtime_gte (optional)
     * @param with_runtime_lte (optional)
     * @param with_watch_monetization_types (optional) possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_providers (optional) use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param without_companies (optional)
     * @param without_genres (optional)
     * @param without_keywords (optional)
     * @param without_watch_providers (optional)
     * @param year (optional)
     * @return 200
     */
    discoverMovie(certification: string | undefined, certification_gte: string | undefined, certification_lte: string | undefined, certification_country: string | undefined, include_adult: boolean | undefined, include_video: boolean | undefined, language: string | undefined, page: number | undefined, primary_release_year: number | undefined, primary_release_date_gte: string | undefined, primary_release_date_lte: string | undefined, region: string | undefined, release_date_gte: string | undefined, release_date_lte: string | undefined, sort_by: Sort_by | undefined, vote_average_gte: number | undefined, vote_average_lte: number | undefined, vote_count_gte: number | undefined, vote_count_lte: number | undefined, watch_region: string | undefined, with_cast: string | undefined, with_companies: string | undefined, with_crew: string | undefined, with_genres: string | undefined, with_keywords: string | undefined, with_origin_country: string | undefined, with_original_language: string | undefined, with_people: string | undefined, with_release_type: number | undefined, with_runtime_gte: number | undefined, with_runtime_lte: number | undefined, with_watch_monetization_types: string | undefined, with_watch_providers: string | undefined, without_companies: string | undefined, without_genres: string | undefined, without_keywords: string | undefined, without_watch_providers: string | undefined, year: number | undefined): Observable<Anonymous2> {
        let url_ = this.baseUrl + "/3/discover/movie?";
        if (certification === null)
            throw new globalThis.Error("The parameter 'certification' cannot be null.");
        else if (certification !== undefined)
            url_ += "certification=" + encodeURIComponent("" + certification) + "&";
        if (certification_gte === null)
            throw new globalThis.Error("The parameter 'certification_gte' cannot be null.");
        else if (certification_gte !== undefined)
            url_ += "certification.gte=" + encodeURIComponent("" + certification_gte) + "&";
        if (certification_lte === null)
            throw new globalThis.Error("The parameter 'certification_lte' cannot be null.");
        else if (certification_lte !== undefined)
            url_ += "certification.lte=" + encodeURIComponent("" + certification_lte) + "&";
        if (certification_country === null)
            throw new globalThis.Error("The parameter 'certification_country' cannot be null.");
        else if (certification_country !== undefined)
            url_ += "certification_country=" + encodeURIComponent("" + certification_country) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (include_video === null)
            throw new globalThis.Error("The parameter 'include_video' cannot be null.");
        else if (include_video !== undefined)
            url_ += "include_video=" + encodeURIComponent("" + include_video) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (primary_release_year === null)
            throw new globalThis.Error("The parameter 'primary_release_year' cannot be null.");
        else if (primary_release_year !== undefined)
            url_ += "primary_release_year=" + encodeURIComponent("" + primary_release_year) + "&";
        if (primary_release_date_gte === null)
            throw new globalThis.Error("The parameter 'primary_release_date_gte' cannot be null.");
        else if (primary_release_date_gte !== undefined)
            url_ += "primary_release_date.gte=" + encodeURIComponent("" + primary_release_date_gte) + "&";
        if (primary_release_date_lte === null)
            throw new globalThis.Error("The parameter 'primary_release_date_lte' cannot be null.");
        else if (primary_release_date_lte !== undefined)
            url_ += "primary_release_date.lte=" + encodeURIComponent("" + primary_release_date_lte) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        if (release_date_gte === null)
            throw new globalThis.Error("The parameter 'release_date_gte' cannot be null.");
        else if (release_date_gte !== undefined)
            url_ += "release_date.gte=" + encodeURIComponent("" + release_date_gte) + "&";
        if (release_date_lte === null)
            throw new globalThis.Error("The parameter 'release_date_lte' cannot be null.");
        else if (release_date_lte !== undefined)
            url_ += "release_date.lte=" + encodeURIComponent("" + release_date_lte) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        if (vote_average_gte === null)
            throw new globalThis.Error("The parameter 'vote_average_gte' cannot be null.");
        else if (vote_average_gte !== undefined)
            url_ += "vote_average.gte=" + encodeURIComponent("" + vote_average_gte) + "&";
        if (vote_average_lte === null)
            throw new globalThis.Error("The parameter 'vote_average_lte' cannot be null.");
        else if (vote_average_lte !== undefined)
            url_ += "vote_average.lte=" + encodeURIComponent("" + vote_average_lte) + "&";
        if (vote_count_gte === null)
            throw new globalThis.Error("The parameter 'vote_count_gte' cannot be null.");
        else if (vote_count_gte !== undefined)
            url_ += "vote_count.gte=" + encodeURIComponent("" + vote_count_gte) + "&";
        if (vote_count_lte === null)
            throw new globalThis.Error("The parameter 'vote_count_lte' cannot be null.");
        else if (vote_count_lte !== undefined)
            url_ += "vote_count.lte=" + encodeURIComponent("" + vote_count_lte) + "&";
        if (watch_region === null)
            throw new globalThis.Error("The parameter 'watch_region' cannot be null.");
        else if (watch_region !== undefined)
            url_ += "watch_region=" + encodeURIComponent("" + watch_region) + "&";
        if (with_cast === null)
            throw new globalThis.Error("The parameter 'with_cast' cannot be null.");
        else if (with_cast !== undefined)
            url_ += "with_cast=" + encodeURIComponent("" + with_cast) + "&";
        if (with_companies === null)
            throw new globalThis.Error("The parameter 'with_companies' cannot be null.");
        else if (with_companies !== undefined)
            url_ += "with_companies=" + encodeURIComponent("" + with_companies) + "&";
        if (with_crew === null)
            throw new globalThis.Error("The parameter 'with_crew' cannot be null.");
        else if (with_crew !== undefined)
            url_ += "with_crew=" + encodeURIComponent("" + with_crew) + "&";
        if (with_genres === null)
            throw new globalThis.Error("The parameter 'with_genres' cannot be null.");
        else if (with_genres !== undefined)
            url_ += "with_genres=" + encodeURIComponent("" + with_genres) + "&";
        if (with_keywords === null)
            throw new globalThis.Error("The parameter 'with_keywords' cannot be null.");
        else if (with_keywords !== undefined)
            url_ += "with_keywords=" + encodeURIComponent("" + with_keywords) + "&";
        if (with_origin_country === null)
            throw new globalThis.Error("The parameter 'with_origin_country' cannot be null.");
        else if (with_origin_country !== undefined)
            url_ += "with_origin_country=" + encodeURIComponent("" + with_origin_country) + "&";
        if (with_original_language === null)
            throw new globalThis.Error("The parameter 'with_original_language' cannot be null.");
        else if (with_original_language !== undefined)
            url_ += "with_original_language=" + encodeURIComponent("" + with_original_language) + "&";
        if (with_people === null)
            throw new globalThis.Error("The parameter 'with_people' cannot be null.");
        else if (with_people !== undefined)
            url_ += "with_people=" + encodeURIComponent("" + with_people) + "&";
        if (with_release_type === null)
            throw new globalThis.Error("The parameter 'with_release_type' cannot be null.");
        else if (with_release_type !== undefined)
            url_ += "with_release_type=" + encodeURIComponent("" + with_release_type) + "&";
        if (with_runtime_gte === null)
            throw new globalThis.Error("The parameter 'with_runtime_gte' cannot be null.");
        else if (with_runtime_gte !== undefined)
            url_ += "with_runtime.gte=" + encodeURIComponent("" + with_runtime_gte) + "&";
        if (with_runtime_lte === null)
            throw new globalThis.Error("The parameter 'with_runtime_lte' cannot be null.");
        else if (with_runtime_lte !== undefined)
            url_ += "with_runtime.lte=" + encodeURIComponent("" + with_runtime_lte) + "&";
        if (with_watch_monetization_types === null)
            throw new globalThis.Error("The parameter 'with_watch_monetization_types' cannot be null.");
        else if (with_watch_monetization_types !== undefined)
            url_ += "with_watch_monetization_types=" + encodeURIComponent("" + with_watch_monetization_types) + "&";
        if (with_watch_providers === null)
            throw new globalThis.Error("The parameter 'with_watch_providers' cannot be null.");
        else if (with_watch_providers !== undefined)
            url_ += "with_watch_providers=" + encodeURIComponent("" + with_watch_providers) + "&";
        if (without_companies === null)
            throw new globalThis.Error("The parameter 'without_companies' cannot be null.");
        else if (without_companies !== undefined)
            url_ += "without_companies=" + encodeURIComponent("" + without_companies) + "&";
        if (without_genres === null)
            throw new globalThis.Error("The parameter 'without_genres' cannot be null.");
        else if (without_genres !== undefined)
            url_ += "without_genres=" + encodeURIComponent("" + without_genres) + "&";
        if (without_keywords === null)
            throw new globalThis.Error("The parameter 'without_keywords' cannot be null.");
        else if (without_keywords !== undefined)
            url_ += "without_keywords=" + encodeURIComponent("" + without_keywords) + "&";
        if (without_watch_providers === null)
            throw new globalThis.Error("The parameter 'without_watch_providers' cannot be null.");
        else if (without_watch_providers !== undefined)
            url_ += "without_watch_providers=" + encodeURIComponent("" + without_watch_providers) + "&";
        if (year === null)
            throw new globalThis.Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processDiscoverMovie(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processDiscoverMovie(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous2>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous2>;
        }));
    }

    protected processDiscoverMovie(response: HttpResponseBase): Observable<Anonymous2> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous2.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    movieDetails(movie_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous3> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (append_to_response === null)
            throw new globalThis.Error("The parameter 'append_to_response' cannot be null.");
        else if (append_to_response !== undefined)
            url_ += "append_to_response=" + encodeURIComponent("" + append_to_response) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous3>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous3>;
        }));
    }

    protected processMovieDetails(response: HttpResponseBase): Observable<Anonymous3> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous3.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvSeriesDetails(series_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous4> {
        let url_ = this.baseUrl + "/3/tv/{series_id}?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (append_to_response === null)
            throw new globalThis.Error("The parameter 'append_to_response' cannot be null.");
        else if (append_to_response !== undefined)
            url_ += "append_to_response=" + encodeURIComponent("" + append_to_response) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous4>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous4>;
        }));
    }

    protected processTvSeriesDetails(response: HttpResponseBase): Observable<Anonymous4> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous4.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV
     * @param first_air_date_year (optional) Search only the first air date. Valid values are: 1000..9999
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @param year (optional) Search the first air date and all episode air dates. Valid values are: 1000..9999
     * @return 200
     */
    searchTv(query: string, first_air_date_year: number | undefined, include_adult: boolean | undefined, language: string | undefined, page: number | undefined, year: number | undefined): Observable<Anonymous5> {
        let url_ = this.baseUrl + "/3/search/tv?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (first_air_date_year === null)
            throw new globalThis.Error("The parameter 'first_air_date_year' cannot be null.");
        else if (first_air_date_year !== undefined)
            url_ += "first_air_date_year=" + encodeURIComponent("" + first_air_date_year) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (year === null)
            throw new globalThis.Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous5>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous5>;
        }));
    }

    protected processSearchTv(response: HttpResponseBase): Observable<Anonymous5> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous5.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Multi
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    searchMulti(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous6> {
        let url_ = this.baseUrl + "/3/search/multi?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchMulti(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchMulti(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous6>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous6>;
        }));
    }

    protected processSearchMulti(response: HttpResponseBase): Observable<Anonymous6> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous6.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Person
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    searchPerson(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous7> {
        let url_ = this.baseUrl + "/3/search/person?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchPerson(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchPerson(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous7>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous7>;
        }));
    }

    protected processSearchPerson(response: HttpResponseBase): Observable<Anonymous7> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous7.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    configurationDetails(): Observable<Anonymous8> {
        let url_ = this.baseUrl + "/3/configuration";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous8>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous8>;
        }));
    }

    protected processConfigurationDetails(response: HttpResponseBase): Observable<Anonymous8> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous8.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvSeasonDetails(series_id: number, season_number: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous9> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (append_to_response === null)
            throw new globalThis.Error("The parameter 'append_to_response' cannot be null.");
        else if (append_to_response !== undefined)
            url_ += "append_to_response=" + encodeURIComponent("" + append_to_response) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous9>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous9>;
        }));
    }

    protected processTvSeasonDetails(response: HttpResponseBase): Observable<Anonymous9> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous9.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    tvEpisodeDetails(series_id: number, season_number: number, episode_number: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous10> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (append_to_response === null)
            throw new globalThis.Error("The parameter 'append_to_response' cannot be null.");
        else if (append_to_response !== undefined)
            url_ += "append_to_response=" + encodeURIComponent("" + append_to_response) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous10>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous10>;
        }));
    }

    protected processTvEpisodeDetails(response: HttpResponseBase): Observable<Anonymous10> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous10.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV
     * @param air_date_gte (optional)
     * @param air_date_lte (optional)
     * @param first_air_date_year (optional)
     * @param first_air_date_gte (optional)
     * @param first_air_date_lte (optional)
     * @param include_adult (optional)
     * @param include_null_first_air_dates (optional)
     * @param language (optional)
     * @param page (optional)
     * @param screened_theatrically (optional)
     * @param sort_by (optional)
     * @param timezone (optional)
     * @param vote_average_gte (optional)
     * @param vote_average_lte (optional)
     * @param vote_count_gte (optional)
     * @param vote_count_lte (optional)
     * @param watch_region (optional) use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param with_companies (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_genres (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_keywords (optional) can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_networks (optional)
     * @param with_origin_country (optional)
     * @param with_original_language (optional)
     * @param with_runtime_gte (optional)
     * @param with_runtime_lte (optional)
     * @param with_status (optional) possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_monetization_types (optional) possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param with_watch_providers (optional) use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param without_companies (optional)
     * @param without_genres (optional)
     * @param without_keywords (optional)
     * @param without_watch_providers (optional)
     * @param with_type (optional) possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query
     * @return 200
     */
    discoverTv(air_date_gte: string | undefined, air_date_lte: string | undefined, first_air_date_year: number | undefined, first_air_date_gte: string | undefined, first_air_date_lte: string | undefined, include_adult: boolean | undefined, include_null_first_air_dates: boolean | undefined, language: string | undefined, page: number | undefined, screened_theatrically: boolean | undefined, sort_by: Sort_by2 | undefined, timezone: string | undefined, vote_average_gte: number | undefined, vote_average_lte: number | undefined, vote_count_gte: number | undefined, vote_count_lte: number | undefined, watch_region: string | undefined, with_companies: string | undefined, with_genres: string | undefined, with_keywords: string | undefined, with_networks: number | undefined, with_origin_country: string | undefined, with_original_language: string | undefined, with_runtime_gte: number | undefined, with_runtime_lte: number | undefined, with_status: string | undefined, with_watch_monetization_types: string | undefined, with_watch_providers: string | undefined, without_companies: string | undefined, without_genres: string | undefined, without_keywords: string | undefined, without_watch_providers: string | undefined, with_type: string | undefined): Observable<Anonymous11> {
        let url_ = this.baseUrl + "/3/discover/tv?";
        if (air_date_gte === null)
            throw new globalThis.Error("The parameter 'air_date_gte' cannot be null.");
        else if (air_date_gte !== undefined)
            url_ += "air_date.gte=" + encodeURIComponent("" + air_date_gte) + "&";
        if (air_date_lte === null)
            throw new globalThis.Error("The parameter 'air_date_lte' cannot be null.");
        else if (air_date_lte !== undefined)
            url_ += "air_date.lte=" + encodeURIComponent("" + air_date_lte) + "&";
        if (first_air_date_year === null)
            throw new globalThis.Error("The parameter 'first_air_date_year' cannot be null.");
        else if (first_air_date_year !== undefined)
            url_ += "first_air_date_year=" + encodeURIComponent("" + first_air_date_year) + "&";
        if (first_air_date_gte === null)
            throw new globalThis.Error("The parameter 'first_air_date_gte' cannot be null.");
        else if (first_air_date_gte !== undefined)
            url_ += "first_air_date.gte=" + encodeURIComponent("" + first_air_date_gte) + "&";
        if (first_air_date_lte === null)
            throw new globalThis.Error("The parameter 'first_air_date_lte' cannot be null.");
        else if (first_air_date_lte !== undefined)
            url_ += "first_air_date.lte=" + encodeURIComponent("" + first_air_date_lte) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (include_null_first_air_dates === null)
            throw new globalThis.Error("The parameter 'include_null_first_air_dates' cannot be null.");
        else if (include_null_first_air_dates !== undefined)
            url_ += "include_null_first_air_dates=" + encodeURIComponent("" + include_null_first_air_dates) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (screened_theatrically === null)
            throw new globalThis.Error("The parameter 'screened_theatrically' cannot be null.");
        else if (screened_theatrically !== undefined)
            url_ += "screened_theatrically=" + encodeURIComponent("" + screened_theatrically) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        if (timezone === null)
            throw new globalThis.Error("The parameter 'timezone' cannot be null.");
        else if (timezone !== undefined)
            url_ += "timezone=" + encodeURIComponent("" + timezone) + "&";
        if (vote_average_gte === null)
            throw new globalThis.Error("The parameter 'vote_average_gte' cannot be null.");
        else if (vote_average_gte !== undefined)
            url_ += "vote_average.gte=" + encodeURIComponent("" + vote_average_gte) + "&";
        if (vote_average_lte === null)
            throw new globalThis.Error("The parameter 'vote_average_lte' cannot be null.");
        else if (vote_average_lte !== undefined)
            url_ += "vote_average.lte=" + encodeURIComponent("" + vote_average_lte) + "&";
        if (vote_count_gte === null)
            throw new globalThis.Error("The parameter 'vote_count_gte' cannot be null.");
        else if (vote_count_gte !== undefined)
            url_ += "vote_count.gte=" + encodeURIComponent("" + vote_count_gte) + "&";
        if (vote_count_lte === null)
            throw new globalThis.Error("The parameter 'vote_count_lte' cannot be null.");
        else if (vote_count_lte !== undefined)
            url_ += "vote_count.lte=" + encodeURIComponent("" + vote_count_lte) + "&";
        if (watch_region === null)
            throw new globalThis.Error("The parameter 'watch_region' cannot be null.");
        else if (watch_region !== undefined)
            url_ += "watch_region=" + encodeURIComponent("" + watch_region) + "&";
        if (with_companies === null)
            throw new globalThis.Error("The parameter 'with_companies' cannot be null.");
        else if (with_companies !== undefined)
            url_ += "with_companies=" + encodeURIComponent("" + with_companies) + "&";
        if (with_genres === null)
            throw new globalThis.Error("The parameter 'with_genres' cannot be null.");
        else if (with_genres !== undefined)
            url_ += "with_genres=" + encodeURIComponent("" + with_genres) + "&";
        if (with_keywords === null)
            throw new globalThis.Error("The parameter 'with_keywords' cannot be null.");
        else if (with_keywords !== undefined)
            url_ += "with_keywords=" + encodeURIComponent("" + with_keywords) + "&";
        if (with_networks === null)
            throw new globalThis.Error("The parameter 'with_networks' cannot be null.");
        else if (with_networks !== undefined)
            url_ += "with_networks=" + encodeURIComponent("" + with_networks) + "&";
        if (with_origin_country === null)
            throw new globalThis.Error("The parameter 'with_origin_country' cannot be null.");
        else if (with_origin_country !== undefined)
            url_ += "with_origin_country=" + encodeURIComponent("" + with_origin_country) + "&";
        if (with_original_language === null)
            throw new globalThis.Error("The parameter 'with_original_language' cannot be null.");
        else if (with_original_language !== undefined)
            url_ += "with_original_language=" + encodeURIComponent("" + with_original_language) + "&";
        if (with_runtime_gte === null)
            throw new globalThis.Error("The parameter 'with_runtime_gte' cannot be null.");
        else if (with_runtime_gte !== undefined)
            url_ += "with_runtime.gte=" + encodeURIComponent("" + with_runtime_gte) + "&";
        if (with_runtime_lte === null)
            throw new globalThis.Error("The parameter 'with_runtime_lte' cannot be null.");
        else if (with_runtime_lte !== undefined)
            url_ += "with_runtime.lte=" + encodeURIComponent("" + with_runtime_lte) + "&";
        if (with_status === null)
            throw new globalThis.Error("The parameter 'with_status' cannot be null.");
        else if (with_status !== undefined)
            url_ += "with_status=" + encodeURIComponent("" + with_status) + "&";
        if (with_watch_monetization_types === null)
            throw new globalThis.Error("The parameter 'with_watch_monetization_types' cannot be null.");
        else if (with_watch_monetization_types !== undefined)
            url_ += "with_watch_monetization_types=" + encodeURIComponent("" + with_watch_monetization_types) + "&";
        if (with_watch_providers === null)
            throw new globalThis.Error("The parameter 'with_watch_providers' cannot be null.");
        else if (with_watch_providers !== undefined)
            url_ += "with_watch_providers=" + encodeURIComponent("" + with_watch_providers) + "&";
        if (without_companies === null)
            throw new globalThis.Error("The parameter 'without_companies' cannot be null.");
        else if (without_companies !== undefined)
            url_ += "without_companies=" + encodeURIComponent("" + without_companies) + "&";
        if (without_genres === null)
            throw new globalThis.Error("The parameter 'without_genres' cannot be null.");
        else if (without_genres !== undefined)
            url_ += "without_genres=" + encodeURIComponent("" + without_genres) + "&";
        if (without_keywords === null)
            throw new globalThis.Error("The parameter 'without_keywords' cannot be null.");
        else if (without_keywords !== undefined)
            url_ += "without_keywords=" + encodeURIComponent("" + without_keywords) + "&";
        if (without_watch_providers === null)
            throw new globalThis.Error("The parameter 'without_watch_providers' cannot be null.");
        else if (without_watch_providers !== undefined)
            url_ += "without_watch_providers=" + encodeURIComponent("" + without_watch_providers) + "&";
        if (with_type === null)
            throw new globalThis.Error("The parameter 'with_type' cannot be null.");
        else if (with_type !== undefined)
            url_ += "with_type=" + encodeURIComponent("" + with_type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processDiscoverTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processDiscoverTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous11>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous11>;
        }));
    }

    protected processDiscoverTv(response: HttpResponseBase): Observable<Anonymous11> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous11.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    movieImages(movie_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous12> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/images?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (include_image_language === null)
            throw new globalThis.Error("The parameter 'include_image_language' cannot be null.");
        else if (include_image_language !== undefined)
            url_ += "include_image_language=" + encodeURIComponent("" + include_image_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous12>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous12>;
        }));
    }

    protected processMovieImages(response: HttpResponseBase): Observable<Anonymous12> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous12.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvSeriesImages(series_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous13> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/images?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (include_image_language === null)
            throw new globalThis.Error("The parameter 'include_image_language' cannot be null.");
        else if (include_image_language !== undefined)
            url_ += "include_image_language=" + encodeURIComponent("" + include_image_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous13>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous13>;
        }));
    }

    protected processTvSeriesImages(response: HttpResponseBase): Observable<Anonymous13> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous13.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvSeasonImages(series_id: number, include_image_language: string | undefined, language: string | undefined, season_number: number): Observable<Anonymous14> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/images?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (include_image_language === null)
            throw new globalThis.Error("The parameter 'include_image_language' cannot be null.");
        else if (include_image_language !== undefined)
            url_ += "include_image_language=" + encodeURIComponent("" + include_image_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous14>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous14>;
        }));
    }

    protected processTvSeasonImages(response: HttpResponseBase): Observable<Anonymous14> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous14.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    tvEpisodeImages(series_id: number, include_image_language: string | undefined, language: string | undefined, season_number: number, episode_number: number): Observable<Anonymous15> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (include_image_language === null)
            throw new globalThis.Error("The parameter 'include_image_language' cannot be null.");
        else if (include_image_language !== undefined)
            url_ += "include_image_language=" + encodeURIComponent("" + include_image_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous15>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous15>;
        }));
    }

    protected processTvEpisodeImages(response: HttpResponseBase): Observable<Anonymous15> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous15.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * All
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingAll(time_window: Time_window, language: string | undefined): Observable<Anonymous16> {
        let url_ = this.baseUrl + "/3/trending/all/{time_window}?";
        if (time_window === undefined || time_window === null)
            throw new globalThis.Error("The parameter 'time_window' must be defined.");
        url_ = url_.replace("{time_window}", encodeURIComponent("" + time_window));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTrendingAll(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTrendingAll(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous16>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous16>;
        }));
    }

    protected processTrendingAll(response: HttpResponseBase): Observable<Anonymous16> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous16.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movies
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingMovies(time_window: Time_window2, language: string | undefined): Observable<Anonymous17> {
        let url_ = this.baseUrl + "/3/trending/movie/{time_window}?";
        if (time_window === undefined || time_window === null)
            throw new globalThis.Error("The parameter 'time_window' must be defined.");
        url_ = url_.replace("{time_window}", encodeURIComponent("" + time_window));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTrendingMovies(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTrendingMovies(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous17>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous17>;
        }));
    }

    protected processTrendingMovies(response: HttpResponseBase): Observable<Anonymous17> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous17.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingTv(time_window: Time_window3, language: string | undefined): Observable<Anonymous18> {
        let url_ = this.baseUrl + "/3/trending/tv/{time_window}?";
        if (time_window === undefined || time_window === null)
            throw new globalThis.Error("The parameter 'time_window' must be defined.");
        url_ = url_.replace("{time_window}", encodeURIComponent("" + time_window));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTrendingTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTrendingTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous18>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous18>;
        }));
    }

    protected processTrendingTv(response: HttpResponseBase): Observable<Anonymous18> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous18.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    movieAccountStates(movie_id: number, session_id: string | undefined, guest_session_id: string | undefined): Observable<Anonymous19> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/account_states?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieAccountStates(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieAccountStates(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous19>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous19>;
        }));
    }

    protected processMovieAccountStates(response: HttpResponseBase): Observable<Anonymous19> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous19.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvSeriesAccountStates(series_id: number, session_id: string | undefined, guest_session_id: string | undefined): Observable<Anonymous20> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/account_states?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesAccountStates(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesAccountStates(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous20>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous20>;
        }));
    }

    protected processTvSeriesAccountStates(response: HttpResponseBase): Observable<Anonymous20> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous20.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvEpisodeAccountStates(series_id: number, session_id: string | undefined, season_number: number, episode_number: number, guest_session_id: string | undefined): Observable<Anonymous21> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeAccountStates(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeAccountStates(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous21>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous21>;
        }));
    }

    protected processTvEpisodeAccountStates(response: HttpResponseBase): Observable<Anonymous21> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous21.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * People
     * @param language (optional) `ISO-639-1`-`ISO-3166-1` code
     * @return 200
     */
    trendingPeople(time_window: Time_window4, language: string | undefined): Observable<Anonymous22> {
        let url_ = this.baseUrl + "/3/trending/person/{time_window}?";
        if (time_window === undefined || time_window === null)
            throw new globalThis.Error("The parameter 'time_window' must be defined.");
        url_ = url_.replace("{time_window}", encodeURIComponent("" + time_window));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTrendingPeople(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTrendingPeople(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous22>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous22>;
        }));
    }

    protected processTrendingPeople(response: HttpResponseBase): Observable<Anonymous22> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous22.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Alternative Titles
     * @param country (optional) specify a ISO-3166-1 value to filter the results
     * @return 200
     */
    movieAlternativeTitles(movie_id: number, country: string | undefined): Observable<Anonymous23> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/alternative_titles?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (country === null)
            throw new globalThis.Error("The parameter 'country' cannot be null.");
        else if (country !== undefined)
            url_ += "country=" + encodeURIComponent("" + country) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieAlternativeTitles(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieAlternativeTitles(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous23>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous23>;
        }));
    }

    protected processMovieAlternativeTitles(response: HttpResponseBase): Observable<Anonymous23> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous23.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    movieChanges(movie_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous24> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/changes?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieChanges(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieChanges(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous24>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous24>;
        }));
    }

    protected processMovieChanges(response: HttpResponseBase): Observable<Anonymous24> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous24.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    movieCredits(movie_id: number, language: string | undefined): Observable<Anonymous25> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/credits?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous25>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous25>;
        }));
    }

    protected processMovieCredits(response: HttpResponseBase): Observable<Anonymous25> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous25.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * External IDs
     * @return 200
     */
    movieExternalIds(movie_id: number): Observable<Anonymous26> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/external_ids";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieExternalIds(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieExternalIds(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous26>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous26>;
        }));
    }

    protected processMovieExternalIds(response: HttpResponseBase): Observable<Anonymous26> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous26.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Keywords
     * @return 200
     */
    movieKeywords(movie_id: string): Observable<Anonymous27> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/keywords";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieKeywords(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieKeywords(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous27>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous27>;
        }));
    }

    protected processMovieKeywords(response: HttpResponseBase): Observable<Anonymous27> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous27.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lists
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieLists(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous28> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/lists?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieLists(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieLists(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous28>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous28>;
        }));
    }

    protected processMovieLists(response: HttpResponseBase): Observable<Anonymous28> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous28.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Recommendations
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieRecommendations(movie_id: number, language: string | undefined, page: number | undefined): Observable<any> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/recommendations?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieRecommendations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieRecommendations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<any>;
                }
            } else
                return _observableThrow(response_) as any as Observable<any>;
        }));
    }

    protected processMovieRecommendations(response: HttpResponseBase): Observable<any> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null as any;

            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Release Dates
     * @return 200
     */
    movieReleaseDates(movie_id: number): Observable<Anonymous29> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/release_dates";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieReleaseDates(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieReleaseDates(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous29>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous29>;
        }));
    }

    protected processMovieReleaseDates(response: HttpResponseBase): Observable<Anonymous29> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous29.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Reviews
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieReviews(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous30> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/reviews?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieReviews(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieReviews(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous30>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous30>;
        }));
    }

    protected processMovieReviews(response: HttpResponseBase): Observable<Anonymous30> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous30.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Similar
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    movieSimilar(movie_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous31> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/similar?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieSimilar(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieSimilar(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous31>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous31>;
        }));
    }

    protected processMovieSimilar(response: HttpResponseBase): Observable<Anonymous31> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous31.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    movieTranslations(movie_id: number): Observable<Anonymous32> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/translations";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous32>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous32>;
        }));
    }

    protected processMovieTranslations(response: HttpResponseBase): Observable<Anonymous32> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous32.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Videos
     * @param language (optional)
     * @return 200
     */
    movieVideos(movie_id: number, language: string | undefined): Observable<Anonymous33> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/videos?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieVideos(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieVideos(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous33>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous33>;
        }));
    }

    protected processMovieVideos(response: HttpResponseBase): Observable<Anonymous33> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous33.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Watch Providers
     * @return 200
     */
    movieWatchProviders(movie_id: number): Observable<Anonymous34> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/watch/providers";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieWatchProviders(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieWatchProviders(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous34>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous34>;
        }));
    }

    protected processMovieWatchProviders(response: HttpResponseBase): Observable<Anonymous34> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous34.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    movieAddRating(movie_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, body: Body | undefined): Observable<Anonymous35> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/rating?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieAddRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieAddRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous35>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous35>;
        }));
    }

    protected processMovieAddRating(response: HttpResponseBase): Observable<Anonymous35> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous35.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    movieDeleteRating(movie_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined): Observable<Anonymous36> {
        let url_ = this.baseUrl + "/3/movie/{movie_id}/rating?";
        if (movie_id === undefined || movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' must be defined.");
        url_ = url_.replace("{movie_id}", encodeURIComponent("" + movie_id));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieDeleteRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieDeleteRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous36>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous36>;
        }));
    }

    protected processMovieDeleteRating(response: HttpResponseBase): Observable<Anonymous36> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous36.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Guest Session
     * @return 200
     */
    authenticationCreateGuestSession(): Observable<Anonymous37> {
        let url_ = this.baseUrl + "/3/authentication/guest_session/new";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateGuestSession(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateGuestSession(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous37>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous37>;
        }));
    }

    protected processAuthenticationCreateGuestSession(response: HttpResponseBase): Observable<Anonymous37> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous37.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Request Token
     * @return 200
     */
    authenticationCreateRequestToken(): Observable<Anonymous38> {
        let url_ = this.baseUrl + "/3/authentication/token/new";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateRequestToken(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateRequestToken(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous38>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous38>;
        }));
    }

    protected processAuthenticationCreateRequestToken(response: HttpResponseBase): Observable<Anonymous38> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous38.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Session
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSession(body: Body2 | undefined): Observable<Anonymous39> {
        let url_ = this.baseUrl + "/3/authentication/session/new";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSession(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSession(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous39>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous39>;
        }));
    }

    protected processAuthenticationCreateSession(response: HttpResponseBase): Observable<Anonymous39> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous39.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Session (from v4 token)
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSessionFromV4Token(body: Body3 | undefined): Observable<Anonymous40> {
        let url_ = this.baseUrl + "/3/authentication/session/convert/4";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSessionFromV4Token(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSessionFromV4Token(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous40>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous40>;
        }));
    }

    protected processAuthenticationCreateSessionFromV4Token(response: HttpResponseBase): Observable<Anonymous40> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous40.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Session
     * @param body (optional)
     * @return 200
     */
    authenticationDeleteSession(body: Body4 | undefined): Observable<Anonymous41> {
        let url_ = this.baseUrl + "/3/authentication/session";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationDeleteSession(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationDeleteSession(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous41>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous41>;
        }));
    }

    protected processAuthenticationDeleteSession(response: HttpResponseBase): Observable<Anonymous41> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous41.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Find By ID
     * @param language (optional)
     * @return 200
     */
    findById(external_id: string, external_source: External_source, language: string | undefined): Observable<Anonymous42> {
        let url_ = this.baseUrl + "/3/find/{external_id}?";
        if (external_id === undefined || external_id === null)
            throw new globalThis.Error("The parameter 'external_id' must be defined.");
        url_ = url_.replace("{external_id}", encodeURIComponent("" + external_id));
        if (external_source === undefined || external_source === null)
            throw new globalThis.Error("The parameter 'external_source' must be defined and cannot be null.");
        else
            url_ += "external_source=" + encodeURIComponent("" + external_source) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processFindById(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processFindById(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous42>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous42>;
        }));
    }

    protected processFindById(response: HttpResponseBase): Observable<Anonymous42> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous42.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param append_to_response (optional) comma separated list of endpoints within this namespace, 20 items max
     * @param language (optional)
     * @return 200
     */
    personDetails(person_id: number, append_to_response: string | undefined, language: string | undefined): Observable<Anonymous43> {
        let url_ = this.baseUrl + "/3/person/{person_id}?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (append_to_response === null)
            throw new globalThis.Error("The parameter 'append_to_response' cannot be null.");
        else if (append_to_response !== undefined)
            url_ += "append_to_response=" + encodeURIComponent("" + append_to_response) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous43>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous43>;
        }));
    }

    protected processPersonDetails(response: HttpResponseBase): Observable<Anonymous43> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous43.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    personChanges(person_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous44> {
        let url_ = this.baseUrl + "/3/person/{person_id}/changes?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonChanges(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonChanges(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous44>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous44>;
        }));
    }

    protected processPersonChanges(response: HttpResponseBase): Observable<Anonymous44> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous44.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    tvSeriesChanges(series_id: number, end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous45> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/changes?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesChanges(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesChanges(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous45>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous45>;
        }));
    }

    protected processTvSeriesChanges(response: HttpResponseBase): Observable<Anonymous45> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous45.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @return 200
     */
    personImages(person_id: number): Observable<Anonymous46> {
        let url_ = this.baseUrl + "/3/person/{person_id}/images";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous46>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous46>;
        }));
    }

    protected processPersonImages(response: HttpResponseBase): Observable<Anonymous46> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous46.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie Credits
     * @param language (optional)
     * @return 200
     */
    personMovieCredits(person_id: number, language: string | undefined): Observable<Anonymous47> {
        let url_ = this.baseUrl + "/3/person/{person_id}/movie_credits?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonMovieCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonMovieCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous47>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous47>;
        }));
    }

    protected processPersonMovieCredits(response: HttpResponseBase): Observable<Anonymous47> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous47.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV Credits
     * @param language (optional)
     * @return 200
     */
    personTvCredits(person_id: number, language: string | undefined): Observable<Anonymous48> {
        let url_ = this.baseUrl + "/3/person/{person_id}/tv_credits?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonTvCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonTvCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous48>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous48>;
        }));
    }

    protected processPersonTvCredits(response: HttpResponseBase): Observable<Anonymous48> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous48.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Combined Credits
     * @param language (optional)
     * @return 200
     */
    personCombinedCredits(person_id: string, language: string | undefined): Observable<Anonymous49> {
        let url_ = this.baseUrl + "/3/person/{person_id}/combined_credits?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonCombinedCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonCombinedCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous49>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous49>;
        }));
    }

    protected processPersonCombinedCredits(response: HttpResponseBase): Observable<Anonymous49> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous49.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * External IDs
     * @return 200
     */
    personExternalIds(person_id: number): Observable<Anonymous50> {
        let url_ = this.baseUrl + "/3/person/{person_id}/external_ids";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonExternalIds(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonExternalIds(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous50>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous50>;
        }));
    }

    protected processPersonExternalIds(response: HttpResponseBase): Observable<Anonymous50> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous50.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Tagged Images
     * @param page (optional)
     * @return 200
     */
    personTaggedImages(person_id: number, page: number | undefined): Observable<Anonymous51> {
        let url_ = this.baseUrl + "/3/person/{person_id}/tagged_images?";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonTaggedImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonTaggedImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous51>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous51>;
        }));
    }

    protected processPersonTaggedImages(response: HttpResponseBase): Observable<Anonymous51> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous51.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    translations(person_id: number): Observable<Anonymous52> {
        let url_ = this.baseUrl + "/3/person/{person_id}/translations";
        if (person_id === undefined || person_id === null)
            throw new globalThis.Error("The parameter 'person_id' must be defined.");
        url_ = url_.replace("{person_id}", encodeURIComponent("" + person_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous52>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous52>;
        }));
    }

    protected processTranslations(response: HttpResponseBase): Observable<Anonymous52> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous52.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    personPopularList(language: string | undefined, page: number | undefined): Observable<Anonymous53> {
        let url_ = this.baseUrl + "/3/person/popular?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonPopularList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonPopularList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous53>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous53>;
        }));
    }

    protected processPersonPopularList(response: HttpResponseBase): Observable<Anonymous53> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous53.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    moviePopularList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous54> {
        let url_ = this.baseUrl + "/3/movie/popular?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMoviePopularList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMoviePopularList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous54>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous54>;
        }));
    }

    protected processMoviePopularList(response: HttpResponseBase): Observable<Anonymous54> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous54.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Top Rated
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieTopRatedList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous55> {
        let url_ = this.baseUrl + "/3/movie/top_rated?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieTopRatedList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieTopRatedList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous55>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous55>;
        }));
    }

    protected processMovieTopRatedList(response: HttpResponseBase): Observable<Anonymous55> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous55.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Upcoming
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieUpcomingList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous56> {
        let url_ = this.baseUrl + "/3/movie/upcoming?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieUpcomingList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieUpcomingList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous56>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous56>;
        }));
    }

    protected processMovieUpcomingList(response: HttpResponseBase): Observable<Anonymous56> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous56.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Now Playing
     * @param language (optional)
     * @param page (optional)
     * @param region (optional) ISO-3166-1 code
     * @return 200
     */
    movieNowPlayingList(language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous57> {
        let url_ = this.baseUrl + "/3/movie/now_playing?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieNowPlayingList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieNowPlayingList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous57>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous57>;
        }));
    }

    protected processMovieNowPlayingList(response: HttpResponseBase): Observable<Anonymous57> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous57.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Airing Today
     * @param language (optional)
     * @param page (optional)
     * @param timezone (optional)
     * @return 200
     */
    tvSeriesAiringTodayList(language: string | undefined, page: number | undefined, timezone: string | undefined): Observable<Anonymous58> {
        let url_ = this.baseUrl + "/3/tv/airing_today?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (timezone === null)
            throw new globalThis.Error("The parameter 'timezone' cannot be null.");
        else if (timezone !== undefined)
            url_ += "timezone=" + encodeURIComponent("" + timezone) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesAiringTodayList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesAiringTodayList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous58>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous58>;
        }));
    }

    protected processTvSeriesAiringTodayList(response: HttpResponseBase): Observable<Anonymous58> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous58.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * On The Air
     * @param language (optional)
     * @param page (optional)
     * @param timezone (optional)
     * @return 200
     */
    tvSeriesOnTheAirList(language: string | undefined, page: number | undefined, timezone: string | undefined): Observable<Anonymous59> {
        let url_ = this.baseUrl + "/3/tv/on_the_air?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (timezone === null)
            throw new globalThis.Error("The parameter 'timezone' cannot be null.");
        else if (timezone !== undefined)
            url_ += "timezone=" + encodeURIComponent("" + timezone) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesOnTheAirList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesOnTheAirList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous59>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous59>;
        }));
    }

    protected processTvSeriesOnTheAirList(response: HttpResponseBase): Observable<Anonymous59> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous59.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Popular
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesPopularList(language: string | undefined, page: number | undefined): Observable<Anonymous60> {
        let url_ = this.baseUrl + "/3/tv/popular?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesPopularList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesPopularList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous60>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous60>;
        }));
    }

    protected processTvSeriesPopularList(response: HttpResponseBase): Observable<Anonymous60> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous60.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Top Rated
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesTopRatedList(language: string | undefined, page: number | undefined): Observable<Anonymous61> {
        let url_ = this.baseUrl + "/3/tv/top_rated?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesTopRatedList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesTopRatedList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous61>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous61>;
        }));
    }

    protected processTvSeriesTopRatedList(response: HttpResponseBase): Observable<Anonymous61> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous61.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Latest
     * @return 200
     */
    movieLatestId(): Observable<Anonymous62> {
        let url_ = this.baseUrl + "/3/movie/latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processMovieLatestId(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processMovieLatestId(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous62>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous62>;
        }));
    }

    protected processMovieLatestId(response: HttpResponseBase): Observable<Anonymous62> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous62.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Latest
     * @return 200
     */
    tvSeriesLatestId(): Observable<Anonymous63> {
        let url_ = this.baseUrl + "/3/tv/latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesLatestId(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesLatestId(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous63>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous63>;
        }));
    }

    protected processTvSeriesLatestId(response: HttpResponseBase): Observable<Anonymous63> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous63.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Aggregate Credits
     * @param language (optional)
     * @return 200
     */
    tvSeriesAggregateCredits(series_id: number, language: string | undefined): Observable<Anonymous64> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/aggregate_credits?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesAggregateCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesAggregateCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous64>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous64>;
        }));
    }

    protected processTvSeriesAggregateCredits(response: HttpResponseBase): Observable<Anonymous64> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous64.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Alternative Titles
     * @return 200
     */
    tvSeriesAlternativeTitles(series_id: number): Observable<Anonymous65> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/alternative_titles";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesAlternativeTitles(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesAlternativeTitles(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous65>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous65>;
        }));
    }

    protected processTvSeriesAlternativeTitles(response: HttpResponseBase): Observable<Anonymous65> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous65.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Content Ratings
     * @return 200
     */
    tvSeriesContentRatings(series_id: number): Observable<Anonymous66> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/content_ratings";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesContentRatings(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesContentRatings(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous66>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous66>;
        }));
    }

    protected processTvSeriesContentRatings(response: HttpResponseBase): Observable<Anonymous66> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous66.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvSeriesCredits(series_id: number, language: string | undefined): Observable<Anonymous67> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/credits?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous67>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous67>;
        }));
    }

    protected processTvSeriesCredits(response: HttpResponseBase): Observable<Anonymous67> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous67.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Episode Groups
     * @return 200
     */
    tvSeriesEpisodeGroups(series_id: number): Observable<Anonymous68> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/episode_groups";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesEpisodeGroups(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesEpisodeGroups(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous68>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous68>;
        }));
    }

    protected processTvSeriesEpisodeGroups(response: HttpResponseBase): Observable<Anonymous68> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous68.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * External IDs
     * @return 200
     */
    tvSeriesExternalIds(series_id: number): Observable<Anonymous69> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/external_ids";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesExternalIds(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesExternalIds(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous69>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous69>;
        }));
    }

    protected processTvSeriesExternalIds(response: HttpResponseBase): Observable<Anonymous69> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous69.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Keywords
     * @return 200
     */
    tvSeriesKeywords(series_id: number): Observable<Anonymous70> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/keywords";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesKeywords(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesKeywords(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous70>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous70>;
        }));
    }

    protected processTvSeriesKeywords(response: HttpResponseBase): Observable<Anonymous70> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous70.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Recommendations
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesRecommendations(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous71> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/recommendations?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesRecommendations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesRecommendations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous71>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous71>;
        }));
    }

    protected processTvSeriesRecommendations(response: HttpResponseBase): Observable<Anonymous71> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous71.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Reviews
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesReviews(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous72> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/reviews?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesReviews(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesReviews(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous72>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous72>;
        }));
    }

    protected processTvSeriesReviews(response: HttpResponseBase): Observable<Anonymous72> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous72.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Screened Theatrically
     * @return 200
     */
    tvSeriesScreenedTheatrically(series_id: number): Observable<Anonymous73> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/screened_theatrically";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesScreenedTheatrically(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesScreenedTheatrically(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous73>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous73>;
        }));
    }

    protected processTvSeriesScreenedTheatrically(response: HttpResponseBase): Observable<Anonymous73> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous73.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Similar
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    tvSeriesSimilar(series_id: string, language: string | undefined, page: number | undefined): Observable<Anonymous74> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/similar?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesSimilar(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesSimilar(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous74>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous74>;
        }));
    }

    protected processTvSeriesSimilar(response: HttpResponseBase): Observable<Anonymous74> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous74.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    tvSeriesTranslations(series_id: number): Observable<Anonymous75> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/translations";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous75>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous75>;
        }));
    }

    protected processTvSeriesTranslations(response: HttpResponseBase): Observable<Anonymous75> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous75.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvSeriesVideos(series_id: number, include_video_language: string | undefined, language: string | undefined): Observable<Anonymous76> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/videos?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (include_video_language === null)
            throw new globalThis.Error("The parameter 'include_video_language' cannot be null.");
        else if (include_video_language !== undefined)
            url_ += "include_video_language=" + encodeURIComponent("" + include_video_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesVideos(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesVideos(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous76>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous76>;
        }));
    }

    protected processTvSeriesVideos(response: HttpResponseBase): Observable<Anonymous76> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous76.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Watch Providers
     * @return 200
     */
    tvSeriesWatchProviders(series_id: number): Observable<Anonymous77> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/watch/providers";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesWatchProviders(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesWatchProviders(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous77>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous77>;
        }));
    }

    protected processTvSeriesWatchProviders(response: HttpResponseBase): Observable<Anonymous77> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous77.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    tvSeriesAddRating(series_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, body: Body5 | undefined): Observable<Anonymous78> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/rating?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesAddRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesAddRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous78>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous78>;
        }));
    }

    protected processTvSeriesAddRating(response: HttpResponseBase): Observable<Anonymous78> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous78.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    tvSeriesDeleteRating(series_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined): Observable<Anonymous79> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/rating?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeriesDeleteRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeriesDeleteRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous79>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous79>;
        }));
    }

    protected processTvSeriesDeleteRating(response: HttpResponseBase): Observable<Anonymous79> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous79.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Account States
     * @param session_id (optional)
     * @param guest_session_id (optional)
     * @return 200
     */
    tvSeasonAccountStates(series_id: number, session_id: string | undefined, guest_session_id: string | undefined, season_number: number): Observable<Anonymous80> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/account_states?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonAccountStates(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonAccountStates(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous80>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous80>;
        }));
    }

    protected processTvSeasonAccountStates(response: HttpResponseBase): Observable<Anonymous80> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous80.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Aggregate Credits
     * @param language (optional)
     * @return 200
     */
    tvSeasonAggregateCredits(series_id: number, language: string | undefined, season_number: number): Observable<Anonymous81> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/aggregate_credits?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonAggregateCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonAggregateCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous81>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous81>;
        }));
    }

    protected processTvSeasonAggregateCredits(response: HttpResponseBase): Observable<Anonymous81> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous81.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    tvSeasonChangesById(end_date: string | undefined, page: number | undefined, start_date: string | undefined, season_id: number): Observable<Anonymous82> {
        let url_ = this.baseUrl + "/3/tv/season/{season_id}/changes?";
        if (season_id === undefined || season_id === null)
            throw new globalThis.Error("The parameter 'season_id' must be defined.");
        url_ = url_.replace("{season_id}", encodeURIComponent("" + season_id));
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonChangesById(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonChangesById(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous82>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous82>;
        }));
    }

    protected processTvSeasonChangesById(response: HttpResponseBase): Observable<Anonymous82> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous82.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvSeasonCredits(series_id: number, season_number: number, language: string | undefined): Observable<Anonymous83> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/credits?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous83>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous83>;
        }));
    }

    protected processTvSeasonCredits(response: HttpResponseBase): Observable<Anonymous83> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous83.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * External IDs
     * @return 200
     */
    tvSeasonExternalIds(series_id: number, season_number: number): Observable<Anonymous84> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/external_ids";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonExternalIds(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonExternalIds(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous84>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous84>;
        }));
    }

    protected processTvSeasonExternalIds(response: HttpResponseBase): Observable<Anonymous84> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous84.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    tvSeasonTranslations(series_id: number, season_number: number): Observable<Anonymous85> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/translations";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous85>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous85>;
        }));
    }

    protected processTvSeasonTranslations(response: HttpResponseBase): Observable<Anonymous85> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous85.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvSeasonVideos(series_id: number, include_video_language: string | undefined, language: string | undefined, season_number: number): Observable<Anonymous86> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/videos?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (include_video_language === null)
            throw new globalThis.Error("The parameter 'include_video_language' cannot be null.");
        else if (include_video_language !== undefined)
            url_ += "include_video_language=" + encodeURIComponent("" + include_video_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonVideos(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonVideos(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous86>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous86>;
        }));
    }

    protected processTvSeasonVideos(response: HttpResponseBase): Observable<Anonymous86> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous86.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Credits
     * @param language (optional)
     * @return 200
     */
    tvEpisodeCredits(series_id: number, season_number: number, language: string | undefined, episode_number: number): Observable<Anonymous87> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeCredits(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeCredits(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous87>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous87>;
        }));
    }

    protected processTvEpisodeCredits(response: HttpResponseBase): Observable<Anonymous87> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous87.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * External IDs
     * @return 200
     */
    tvEpisodeExternalIds(series_id: number, season_number: number, episode_number: string): Observable<Anonymous88> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeExternalIds(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeExternalIds(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous88>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous88>;
        }));
    }

    protected processTvEpisodeExternalIds(response: HttpResponseBase): Observable<Anonymous88> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous88.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    tvEpisodeTranslations(series_id: number, season_number: number, episode_number: number): Observable<Anonymous89> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous89>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous89>;
        }));
    }

    protected processTvEpisodeTranslations(response: HttpResponseBase): Observable<Anonymous89> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous89.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Videos
     * @param include_video_language (optional) filter the list results by language, supports more than one value by using a comma
     * @param language (optional)
     * @return 200
     */
    tvEpisodeVideos(series_id: number, include_video_language: string | undefined, language: string | undefined, season_number: number, episode_number: number): Observable<Anonymous90> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (include_video_language === null)
            throw new globalThis.Error("The parameter 'include_video_language' cannot be null.");
        else if (include_video_language !== undefined)
            url_ += "include_video_language=" + encodeURIComponent("" + include_video_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeVideos(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeVideos(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous90>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous90>;
        }));
    }

    protected processTvEpisodeVideos(response: HttpResponseBase): Observable<Anonymous90> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous90.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add Rating
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    tvEpisodeAddRating(series_id: number, guest_session_id: string | undefined, session_id: string | undefined, content_Type: string, season_number: number, episode_number: number, body: Body6 | undefined): Observable<Anonymous91> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeAddRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeAddRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous91>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous91>;
        }));
    }

    protected processTvEpisodeAddRating(response: HttpResponseBase): Observable<Anonymous91> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous91.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete Rating
     * @param content_Type (optional)
     * @param guest_session_id (optional)
     * @param session_id (optional)
     * @return 200
     */
    tvEpisodeDeleteRating(series_id: number, content_Type: string | undefined, guest_session_id: string | undefined, session_id: string | undefined, season_number: number, episode_number: number): Observable<Anonymous92> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (episode_number === undefined || episode_number === null)
            throw new globalThis.Error("The parameter 'episode_number' must be defined.");
        url_ = url_.replace("{episode_number}", encodeURIComponent("" + episode_number));
        if (guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' cannot be null.");
        else if (guest_session_id !== undefined)
            url_ += "guest_session_id=" + encodeURIComponent("" + guest_session_id) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": content_Type !== undefined && content_Type !== null ? "" + content_Type : "",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeDeleteRating(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeDeleteRating(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous92>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous92>;
        }));
    }

    protected processTvEpisodeDeleteRating(response: HttpResponseBase): Observable<Anonymous92> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous92.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param session_id (optional)
     * @return 200
     */
    accountDetails(account_id: number, session_id: string | undefined): Observable<Anonymous93> {
        let url_ = this.baseUrl + "/3/account/{account_id}?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous93>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous93>;
        }));
    }

    protected processAccountDetails(response: HttpResponseBase): Observable<Anonymous93> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous93.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lists
     * @param page (optional)
     * @param session_id (optional)
     * @return 200
     */
    accountLists(account_id: number, page: number | undefined, session_id: string | undefined): Observable<Anonymous94> {
        let url_ = this.baseUrl + "/3/account/{account_id}/lists?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountLists(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountLists(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous94>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous94>;
        }));
    }

    protected processAccountLists(response: HttpResponseBase): Observable<Anonymous94> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous94.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Favorite Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountGetFavorites(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by3 | undefined): Observable<Anonymous95> {
        let url_ = this.baseUrl + "/3/account/{account_id}/favorite/movies?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountGetFavorites(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountGetFavorites(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous95>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous95>;
        }));
    }

    protected processAccountGetFavorites(response: HttpResponseBase): Observable<Anonymous95> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous95.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Favorite TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountFavoriteTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by4 | undefined): Observable<Anonymous96> {
        let url_ = this.baseUrl + "/3/account/{account_id}/favorite/tv?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountFavoriteTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountFavoriteTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous96>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous96>;
        }));
    }

    protected processAccountFavoriteTv(response: HttpResponseBase): Observable<Anonymous96> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous96.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedMovies(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by5 | undefined): Observable<Anonymous97> {
        let url_ = this.baseUrl + "/3/account/{account_id}/rated/movies?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountRatedMovies(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountRatedMovies(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous97>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous97>;
        }));
    }

    protected processAccountRatedMovies(response: HttpResponseBase): Observable<Anonymous97> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous97.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by6 | undefined): Observable<Anonymous98> {
        let url_ = this.baseUrl + "/3/account/{account_id}/rated/tv?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountRatedTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountRatedTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous98>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous98>;
        }));
    }

    protected processAccountRatedTv(response: HttpResponseBase): Observable<Anonymous98> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous98.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated TV Episodes
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountRatedTvEpisodes(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by7 | undefined): Observable<Anonymous99> {
        let url_ = this.baseUrl + "/3/account/{account_id}/rated/tv/episodes?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountRatedTvEpisodes(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountRatedTvEpisodes(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous99>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous99>;
        }));
    }

    protected processAccountRatedTvEpisodes(response: HttpResponseBase): Observable<Anonymous99> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous99.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Watchlist Movies
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountWatchlistMovies(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by8 | undefined): Observable<Anonymous100> {
        let url_ = this.baseUrl + "/3/account/{account_id}/watchlist/movies?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountWatchlistMovies(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountWatchlistMovies(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous100>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous100>;
        }));
    }

    protected processAccountWatchlistMovies(response: HttpResponseBase): Observable<Anonymous100> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous100.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Watchlist TV
     * @param language (optional)
     * @param page (optional)
     * @param session_id (optional)
     * @param sort_by (optional)
     * @return 200
     */
    accountWatchlistTv(account_id: number, language: string | undefined, page: number | undefined, session_id: string | undefined, sort_by: Sort_by9 | undefined): Observable<Anonymous101> {
        let url_ = this.baseUrl + "/3/account/{account_id}/watchlist/tv?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountWatchlistTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountWatchlistTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous101>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous101>;
        }));
    }

    protected processAccountWatchlistTv(response: HttpResponseBase): Observable<Anonymous101> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous101.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add Favorite
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    accountAddFavorite(account_id: number, session_id: string | undefined, body: Body7 | undefined): Observable<Anonymous102> {
        let url_ = this.baseUrl + "/3/account/{account_id}/favorite?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountAddFavorite(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountAddFavorite(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous102>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous102>;
        }));
    }

    protected processAccountAddFavorite(response: HttpResponseBase): Observable<Anonymous102> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous102.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add To Watchlist
     * @param session_id (optional)
     * @param body (optional)
     * @return 200
     */
    accountAddToWatchlist(account_id: number, session_id: string | undefined, body: Body8 | undefined): Observable<Anonymous103> {
        let url_ = this.baseUrl + "/3/account/{account_id}/watchlist?";
        if (account_id === undefined || account_id === null)
            throw new globalThis.Error("The parameter 'account_id' must be defined.");
        url_ = url_.replace("{account_id}", encodeURIComponent("" + account_id));
        if (session_id === null)
            throw new globalThis.Error("The parameter 'session_id' cannot be null.");
        else if (session_id !== undefined)
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAccountAddToWatchlist(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAccountAddToWatchlist(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous103>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous103>;
        }));
    }

    protected processAccountAddToWatchlist(response: HttpResponseBase): Observable<Anonymous103> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous103.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie Certifications
     * @return 200
     */
    certificationMovieList(): Observable<Anonymous104> {
        let url_ = this.baseUrl + "/3/certification/movie/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCertificationMovieList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCertificationMovieList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous104>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous104>;
        }));
    }

    protected processCertificationMovieList(response: HttpResponseBase): Observable<Anonymous104> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous104.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV Certifications
     * @return 200
     */
    certificationsTvList(): Observable<Anonymous105> {
        let url_ = this.baseUrl + "/3/certification/tv/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCertificationsTvList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCertificationsTvList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous105>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous105>;
        }));
    }

    protected processCertificationsTvList(response: HttpResponseBase): Observable<Anonymous105> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous105.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesMovieList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous106> {
        let url_ = this.baseUrl + "/3/movie/changes?";
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processChangesMovieList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processChangesMovieList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous106>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous106>;
        }));
    }

    protected processChangesMovieList(response: HttpResponseBase): Observable<Anonymous106> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous106.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesTvList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous107> {
        let url_ = this.baseUrl + "/3/tv/changes?";
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processChangesTvList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processChangesTvList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous107>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous107>;
        }));
    }

    protected processChangesTvList(response: HttpResponseBase): Observable<Anonymous107> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous107.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * People List
     * @param end_date (optional)
     * @param page (optional)
     * @param start_date (optional)
     * @return 200
     */
    changesPeopleList(end_date: string | undefined, page: number | undefined, start_date: string | undefined): Observable<Anonymous108> {
        let url_ = this.baseUrl + "/3/person/changes?";
        if (end_date === null)
            throw new globalThis.Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (start_date === null)
            throw new globalThis.Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processChangesPeopleList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processChangesPeopleList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous108>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous108>;
        }));
    }

    protected processChangesPeopleList(response: HttpResponseBase): Observable<Anonymous108> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous108.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param language (optional)
     * @return 200
     */
    collectionDetails(collection_id: number, language: string | undefined): Observable<Anonymous109> {
        let url_ = this.baseUrl + "/3/collection/{collection_id}?";
        if (collection_id === undefined || collection_id === null)
            throw new globalThis.Error("The parameter 'collection_id' must be defined.");
        url_ = url_.replace("{collection_id}", encodeURIComponent("" + collection_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCollectionDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCollectionDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous109>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous109>;
        }));
    }

    protected processCollectionDetails(response: HttpResponseBase): Observable<Anonymous109> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous109.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @param include_image_language (optional) specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     * @param language (optional)
     * @return 200
     */
    collectionImages(collection_id: number, include_image_language: string | undefined, language: string | undefined): Observable<Anonymous110> {
        let url_ = this.baseUrl + "/3/collection/{collection_id}/images?";
        if (collection_id === undefined || collection_id === null)
            throw new globalThis.Error("The parameter 'collection_id' must be defined.");
        url_ = url_.replace("{collection_id}", encodeURIComponent("" + collection_id));
        if (include_image_language === null)
            throw new globalThis.Error("The parameter 'include_image_language' cannot be null.");
        else if (include_image_language !== undefined)
            url_ += "include_image_language=" + encodeURIComponent("" + include_image_language) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCollectionImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCollectionImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous110>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous110>;
        }));
    }

    protected processCollectionImages(response: HttpResponseBase): Observable<Anonymous110> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous110.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Translations
     * @return 200
     */
    collectionTranslations(collection_id: number): Observable<Anonymous111> {
        let url_ = this.baseUrl + "/3/collection/{collection_id}/translations";
        if (collection_id === undefined || collection_id === null)
            throw new globalThis.Error("The parameter 'collection_id' must be defined.");
        url_ = url_.replace("{collection_id}", encodeURIComponent("" + collection_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCollectionTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCollectionTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous111>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous111>;
        }));
    }

    protected processCollectionTranslations(response: HttpResponseBase): Observable<Anonymous111> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous111.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    companyDetails(company_id: number): Observable<Anonymous112> {
        let url_ = this.baseUrl + "/3/company/{company_id}";
        if (company_id === undefined || company_id === null)
            throw new globalThis.Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCompanyDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCompanyDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous112>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous112>;
        }));
    }

    protected processCompanyDetails(response: HttpResponseBase): Observable<Anonymous112> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous112.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Alternative Names
     * @return 200
     */
    companyAlternativeNames(company_id: number): Observable<Anonymous113> {
        let url_ = this.baseUrl + "/3/company/{company_id}/alternative_names";
        if (company_id === undefined || company_id === null)
            throw new globalThis.Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCompanyAlternativeNames(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCompanyAlternativeNames(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous113>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous113>;
        }));
    }

    protected processCompanyAlternativeNames(response: HttpResponseBase): Observable<Anonymous113> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous113.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @return 200
     */
    companyImages(company_id: number): Observable<Anonymous114> {
        let url_ = this.baseUrl + "/3/company/{company_id}/images";
        if (company_id === undefined || company_id === null)
            throw new globalThis.Error("The parameter 'company_id' must be defined.");
        url_ = url_.replace("{company_id}", encodeURIComponent("" + company_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCompanyImages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCompanyImages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous114>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous114>;
        }));
    }

    protected processCompanyImages(response: HttpResponseBase): Observable<Anonymous114> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous114.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    creditDetails(credit_id: string): Observable<Anonymous115> {
        let url_ = this.baseUrl + "/3/credit/{credit_id}";
        if (credit_id === undefined || credit_id === null)
            throw new globalThis.Error("The parameter 'credit_id' must be defined.");
        url_ = url_.replace("{credit_id}", encodeURIComponent("" + credit_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processCreditDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processCreditDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous115>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous115>;
        }));
    }

    protected processCreditDetails(response: HttpResponseBase): Observable<Anonymous115> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous115.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie List
     * @param language (optional)
     * @return 200
     */
    genreMovieList(language: string | undefined): Observable<Anonymous116> {
        let url_ = this.baseUrl + "/3/genre/movie/list?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGenreMovieList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGenreMovieList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous116>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous116>;
        }));
    }

    protected processGenreMovieList(response: HttpResponseBase): Observable<Anonymous116> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous116.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV List
     * @param language (optional)
     * @return 200
     */
    genreTvList(language: string | undefined): Observable<Anonymous117> {
        let url_ = this.baseUrl + "/3/genre/tv/list?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGenreTvList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGenreTvList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous117>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous117>;
        }));
    }

    protected processGenreTvList(response: HttpResponseBase): Observable<Anonymous117> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous117.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated Movies
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedMovies(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by10 | undefined): Observable<Anonymous118> {
        let url_ = this.baseUrl + "/3/guest_session/{guest_session_id}/rated/movies?";
        if (guest_session_id === undefined || guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' must be defined.");
        url_ = url_.replace("{guest_session_id}", encodeURIComponent("" + guest_session_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedMovies(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedMovies(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous118>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous118>;
        }));
    }

    protected processGuestSessionRatedMovies(response: HttpResponseBase): Observable<Anonymous118> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous118.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated TV
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedTv(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by11 | undefined): Observable<Anonymous119> {
        let url_ = this.baseUrl + "/3/guest_session/{guest_session_id}/rated/tv?";
        if (guest_session_id === undefined || guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' must be defined.");
        url_ = url_.replace("{guest_session_id}", encodeURIComponent("" + guest_session_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedTv(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedTv(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous119>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous119>;
        }));
    }

    protected processGuestSessionRatedTv(response: HttpResponseBase): Observable<Anonymous119> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous119.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Rated TV Episodes
     * @param language (optional)
     * @param page (optional)
     * @param sort_by (optional)
     * @return 200
     */
    guestSessionRatedTvEpisodes(guest_session_id: string, language: string | undefined, page: number | undefined, sort_by: Sort_by12 | undefined): Observable<Anonymous120> {
        let url_ = this.baseUrl + "/3/guest_session/{guest_session_id}/rated/tv/episodes?";
        if (guest_session_id === undefined || guest_session_id === null)
            throw new globalThis.Error("The parameter 'guest_session_id' must be defined.");
        url_ = url_.replace("{guest_session_id}", encodeURIComponent("" + guest_session_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (sort_by === null)
            throw new globalThis.Error("The parameter 'sort_by' cannot be null.");
        else if (sort_by !== undefined)
            url_ += "sort_by=" + encodeURIComponent("" + sort_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedTvEpisodes(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processGuestSessionRatedTvEpisodes(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous120>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous120>;
        }));
    }

    protected processGuestSessionRatedTvEpisodes(response: HttpResponseBase): Observable<Anonymous120> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous120.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Available Regions
     * @param language (optional)
     * @return 200
     */
    watchProvidersAvailableRegions(language: string | undefined): Observable<Anonymous121> {
        let url_ = this.baseUrl + "/3/watch/providers/regions?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processWatchProvidersAvailableRegions(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWatchProvidersAvailableRegions(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous121>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous121>;
        }));
    }

    protected processWatchProvidersAvailableRegions(response: HttpResponseBase): Observable<Anonymous121> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous121.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movie Providers
     * @param language (optional)
     * @param watch_region (optional)
     * @return 200
     */
    watchProvidersMovieList(language: string | undefined, watch_region: string | undefined): Observable<Anonymous122> {
        let url_ = this.baseUrl + "/3/watch/providers/movie?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (watch_region === null)
            throw new globalThis.Error("The parameter 'watch_region' cannot be null.");
        else if (watch_region !== undefined)
            url_ += "watch_region=" + encodeURIComponent("" + watch_region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processWatchProvidersMovieList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWatchProvidersMovieList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous122>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous122>;
        }));
    }

    protected processWatchProvidersMovieList(response: HttpResponseBase): Observable<Anonymous122> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous122.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * TV Providers
     * @param language (optional)
     * @param watch_region (optional)
     * @return 200
     */
    watchProviderTvList(language: string | undefined, watch_region: string | undefined): Observable<Anonymous123> {
        let url_ = this.baseUrl + "/3/watch/providers/tv?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (watch_region === null)
            throw new globalThis.Error("The parameter 'watch_region' cannot be null.");
        else if (watch_region !== undefined)
            url_ += "watch_region=" + encodeURIComponent("" + watch_region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processWatchProviderTvList(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWatchProviderTvList(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous123>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous123>;
        }));
    }

    protected processWatchProviderTvList(response: HttpResponseBase): Observable<Anonymous123> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous123.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    keywordDetails(keyword_id: number): Observable<Anonymous124> {
        let url_ = this.baseUrl + "/3/keyword/{keyword_id}";
        if (keyword_id === undefined || keyword_id === null)
            throw new globalThis.Error("The parameter 'keyword_id' must be defined.");
        url_ = url_.replace("{keyword_id}", encodeURIComponent("" + keyword_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processKeywordDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processKeywordDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous124>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous124>;
        }));
    }

    protected processKeywordDetails(response: HttpResponseBase): Observable<Anonymous124> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous124.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Movies
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    keywordMovies(keyword_id: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined): Observable<Anonymous125> {
        let url_ = this.baseUrl + "/3/keyword/{keyword_id}/movies?";
        if (keyword_id === undefined || keyword_id === null)
            throw new globalThis.Error("The parameter 'keyword_id' must be defined.");
        url_ = url_.replace("{keyword_id}", encodeURIComponent("" + keyword_id));
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processKeywordMovies(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processKeywordMovies(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous125>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous125>;
        }));
    }

    protected processKeywordMovies(response: HttpResponseBase): Observable<Anonymous125> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous125.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    listDetails(list_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous126> {
        let url_ = this.baseUrl + "/3/list/{list_id}?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous126>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous126>;
        }));
    }

    protected processListDetails(response: HttpResponseBase): Observable<Anonymous126> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous126.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Delete
     * @return 200
     */
    listDelete(list_id: number, session_id: string): Observable<Anonymous127> {
        let url_ = this.baseUrl + "/3/list/{list_id}?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (session_id === undefined || session_id === null)
            throw new globalThis.Error("The parameter 'session_id' must be defined and cannot be null.");
        else
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("delete", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListDelete(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListDelete(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous127>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous127>;
        }));
    }

    protected processListDelete(response: HttpResponseBase): Observable<Anonymous127> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous127.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Check Item Status
     * @param language (optional)
     * @param movie_id (optional)
     * @return 200
     */
    listCheckItemStatus(list_id: number, language: string | undefined, movie_id: number | undefined): Observable<Anonymous128> {
        let url_ = this.baseUrl + "/3/list/{list_id}/item_status?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (movie_id === null)
            throw new globalThis.Error("The parameter 'movie_id' cannot be null.");
        else if (movie_id !== undefined)
            url_ += "movie_id=" + encodeURIComponent("" + movie_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListCheckItemStatus(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListCheckItemStatus(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous128>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous128>;
        }));
    }

    protected processListCheckItemStatus(response: HttpResponseBase): Observable<Anonymous128> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous128.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create
     * @param body (optional)
     * @return 200
     */
    listCreate(session_id: string, body: Body9 | undefined): Observable<Anonymous129> {
        let url_ = this.baseUrl + "/3/list?";
        if (session_id === undefined || session_id === null)
            throw new globalThis.Error("The parameter 'session_id' must be defined and cannot be null.");
        else
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListCreate(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListCreate(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous129>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous129>;
        }));
    }

    protected processListCreate(response: HttpResponseBase): Observable<Anonymous129> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous129.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Add Movie
     * @param body (optional)
     * @return 200
     */
    listAddMovie(list_id: number, session_id: string, body: Body10 | undefined): Observable<Anonymous130> {
        let url_ = this.baseUrl + "/3/list/{list_id}/add_item?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (session_id === undefined || session_id === null)
            throw new globalThis.Error("The parameter 'session_id' must be defined and cannot be null.");
        else
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListAddMovie(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListAddMovie(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous130>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous130>;
        }));
    }

    protected processListAddMovie(response: HttpResponseBase): Observable<Anonymous130> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous130.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Remove Movie
     * @param body (optional)
     * @return 200
     */
    listRemoveMovie(list_id: number, session_id: string, body: Body11 | undefined): Observable<Anonymous131> {
        let url_ = this.baseUrl + "/3/list/{list_id}/remove_item?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (session_id === undefined || session_id === null)
            throw new globalThis.Error("The parameter 'session_id' must be defined and cannot be null.");
        else
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListRemoveMovie(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListRemoveMovie(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous131>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous131>;
        }));
    }

    protected processListRemoveMovie(response: HttpResponseBase): Observable<Anonymous131> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous131.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Clear
     * @return 200
     */
    listClear(list_id: number, session_id: string, confirm: boolean): Observable<Anonymous132> {
        let url_ = this.baseUrl + "/3/list/{list_id}/clear?";
        if (list_id === undefined || list_id === null)
            throw new globalThis.Error("The parameter 'list_id' must be defined.");
        url_ = url_.replace("{list_id}", encodeURIComponent("" + list_id));
        if (session_id === undefined || session_id === null)
            throw new globalThis.Error("The parameter 'session_id' must be defined and cannot be null.");
        else
            url_ += "session_id=" + encodeURIComponent("" + session_id) + "&";
        if (confirm === undefined || confirm === null)
            throw new globalThis.Error("The parameter 'confirm' must be defined and cannot be null.");
        else
            url_ += "confirm=" + encodeURIComponent("" + confirm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListClear(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListClear(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous132>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous132>;
        }));
    }

    protected processListClear(response: HttpResponseBase): Observable<Anonymous132> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous132.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    networkDetails(network_id: number): Observable<Anonymous133> {
        let url_ = this.baseUrl + "/3/network/{network_id}";
        if (network_id === undefined || network_id === null)
            throw new globalThis.Error("The parameter 'network_id' must be defined.");
        url_ = url_.replace("{network_id}", encodeURIComponent("" + network_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processNetworkDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processNetworkDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous133>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous133>;
        }));
    }

    protected processNetworkDetails(response: HttpResponseBase): Observable<Anonymous133> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous133.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Alternative Names
     * @return 200
     */
    detailsCopy(network_id: number): Observable<Anonymous134> {
        let url_ = this.baseUrl + "/3/network/{network_id}/alternative_names";
        if (network_id === undefined || network_id === null)
            throw new globalThis.Error("The parameter 'network_id' must be defined.");
        url_ = url_.replace("{network_id}", encodeURIComponent("" + network_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processDetailsCopy(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processDetailsCopy(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous134>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous134>;
        }));
    }

    protected processDetailsCopy(response: HttpResponseBase): Observable<Anonymous134> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous134.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Images
     * @return 200
     */
    alternativeNamesCopy(network_id: number): Observable<Anonymous135> {
        let url_ = this.baseUrl + "/3/network/{network_id}/images";
        if (network_id === undefined || network_id === null)
            throw new globalThis.Error("The parameter 'network_id' must be defined.");
        url_ = url_.replace("{network_id}", encodeURIComponent("" + network_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAlternativeNamesCopy(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAlternativeNamesCopy(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous135>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous135>;
        }));
    }

    protected processAlternativeNamesCopy(response: HttpResponseBase): Observable<Anonymous135> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous135.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    reviewDetails(review_id: string): Observable<Anonymous136> {
        let url_ = this.baseUrl + "/3/review/{review_id}";
        if (review_id === undefined || review_id === null)
            throw new globalThis.Error("The parameter 'review_id' must be defined.");
        url_ = url_.replace("{review_id}", encodeURIComponent("" + review_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processReviewDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processReviewDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous136>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous136>;
        }));
    }

    protected processReviewDetails(response: HttpResponseBase): Observable<Anonymous136> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous136.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Validate Key
     * @return 200
     */
    authenticationValidateKey(): Observable<Anonymous137> {
        let url_ = this.baseUrl + "/3/authentication";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationValidateKey(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationValidateKey(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous137>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous137>;
        }));
    }

    protected processAuthenticationValidateKey(response: HttpResponseBase): Observable<Anonymous137> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous137.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = Anonymous138.fromJS(resultData401);
            return throwException("401", status, _responseText, _headers, result401);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Watch Providers
     * @param language (optional)
     * @return 200
     */
    tvSeasonWatchProviders(series_id: number, language: string | undefined, season_number: number): Observable<Anonymous139> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/season/{season_number}/watch/providers?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (season_number === undefined || season_number === null)
            throw new globalThis.Error("The parameter 'season_number' must be defined.");
        url_ = url_.replace("{season_number}", encodeURIComponent("" + season_number));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvSeasonWatchProviders(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvSeasonWatchProviders(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous139>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous139>;
        }));
    }

    protected processTvSeasonWatchProviders(response: HttpResponseBase): Observable<Anonymous139> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous139.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Countries
     * @param language (optional)
     * @return 200
     */
    configurationCountries(language: string | undefined): Observable<Anonymous140[]> {
        let url_ = this.baseUrl + "/3/configuration/countries?";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationCountries(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationCountries(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous140[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous140[]>;
        }));
    }

    protected processConfigurationCountries(response: HttpResponseBase): Observable<Anonymous140[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Anonymous140.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Jobs
     * @return 200
     */
    configurationJobs(): Observable<Anonymous141[]> {
        let url_ = this.baseUrl + "/3/configuration/jobs";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationJobs(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationJobs(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous141[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous141[]>;
        }));
    }

    protected processConfigurationJobs(response: HttpResponseBase): Observable<Anonymous141[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Anonymous141.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Languages
     * @return 200
     */
    configurationLanguages(): Observable<Anonymous142[]> {
        let url_ = this.baseUrl + "/3/configuration/languages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationLanguages(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationLanguages(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous142[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous142[]>;
        }));
    }

    protected processConfigurationLanguages(response: HttpResponseBase): Observable<Anonymous142[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Anonymous142.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Primary Translations
     * @return 200
     */
    configurationPrimaryTranslations(): Observable<string[]> {
        let url_ = this.baseUrl + "/3/configuration/primary_translations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationPrimaryTranslations(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationPrimaryTranslations(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processConfigurationPrimaryTranslations(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Timezones
     * @return 200
     */
    configurationTimezones(): Observable<Anonymous143[]> {
        let url_ = this.baseUrl + "/3/configuration/timezones";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processConfigurationTimezones(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processConfigurationTimezones(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous143[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous143[]>;
        }));
    }

    protected processConfigurationTimezones(response: HttpResponseBase): Observable<Anonymous143[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Anonymous143.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Create Session (with login)
     * @param body (optional)
     * @return 200
     */
    authenticationCreateSessionFromLogin(body: Body12 | undefined): Observable<Anonymous144> {
        let url_ = this.baseUrl + "/3/authentication/token/validate_with_login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("post", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSessionFromLogin(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processAuthenticationCreateSessionFromLogin(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous144>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous144>;
        }));
    }

    protected processAuthenticationCreateSessionFromLogin(response: HttpResponseBase): Observable<Anonymous144> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous144.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Latest
     * @return 200
     */
    personLatestId(): Observable<Anonymous145> {
        let url_ = this.baseUrl + "/3/person/latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processPersonLatestId(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processPersonLatestId(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous145>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous145>;
        }));
    }

    protected processPersonLatestId(response: HttpResponseBase): Observable<Anonymous145> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous145.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Changes
     * @return 200
     */
    tvEpisodeChangesById(episode_id: number): Observable<Anonymous146> {
        let url_ = this.baseUrl + "/3/tv/episode/{episode_id}/changes";
        if (episode_id === undefined || episode_id === null)
            throw new globalThis.Error("The parameter 'episode_id' must be defined.");
        url_ = url_.replace("{episode_id}", encodeURIComponent("" + episode_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeChangesById(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeChangesById(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous146>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous146>;
        }));
    }

    protected processTvEpisodeChangesById(response: HttpResponseBase): Observable<Anonymous146> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous146.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Details
     * @return 200
     */
    tvEpisodeGroupDetails(tv_episode_group_id: string): Observable<Anonymous147> {
        let url_ = this.baseUrl + "/3/tv/episode_group/{tv_episode_group_id}";
        if (tv_episode_group_id === undefined || tv_episode_group_id === null)
            throw new globalThis.Error("The parameter 'tv_episode_group_id' must be defined.");
        url_ = url_.replace("{tv_episode_group_id}", encodeURIComponent("" + tv_episode_group_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processTvEpisodeGroupDetails(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processTvEpisodeGroupDetails(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous147>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous147>;
        }));
    }

    protected processTvEpisodeGroupDetails(response: HttpResponseBase): Observable<Anonymous147> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous147.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Company
     * @param page (optional)
     * @return 200
     */
    searchCompany(query: string, page: number | undefined): Observable<Anonymous148> {
        let url_ = this.baseUrl + "/3/search/company?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchCompany(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchCompany(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous148>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous148>;
        }));
    }

    protected processSearchCompany(response: HttpResponseBase): Observable<Anonymous148> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous148.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Collection
     * @param include_adult (optional)
     * @param language (optional)
     * @param page (optional)
     * @param region (optional)
     * @return 200
     */
    searchCollection(query: string, include_adult: boolean | undefined, language: string | undefined, page: number | undefined, region: string | undefined): Observable<Anonymous149> {
        let url_ = this.baseUrl + "/3/search/collection?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (include_adult === null)
            throw new globalThis.Error("The parameter 'include_adult' cannot be null.");
        else if (include_adult !== undefined)
            url_ += "include_adult=" + encodeURIComponent("" + include_adult) + "&";
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (region === null)
            throw new globalThis.Error("The parameter 'region' cannot be null.");
        else if (region !== undefined)
            url_ += "region=" + encodeURIComponent("" + region) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchCollection(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchCollection(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous149>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous149>;
        }));
    }

    protected processSearchCollection(response: HttpResponseBase): Observable<Anonymous149> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous149.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Keyword
     * @param page (optional)
     * @return 200
     */
    searchKeyword(query: string, page: number | undefined): Observable<Anonymous150> {
        let url_ = this.baseUrl + "/3/search/keyword?";
        if (query === undefined || query === null)
            throw new globalThis.Error("The parameter 'query' must be defined and cannot be null.");
        else
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processSearchKeyword(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processSearchKeyword(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous150>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous150>;
        }));
    }

    protected processSearchKeyword(response: HttpResponseBase): Observable<Anonymous150> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous150.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Lists
     * @param language (optional)
     * @param page (optional)
     * @return 200
     */
    listsCopy(series_id: number, language: string | undefined, page: number | undefined): Observable<Anonymous151> {
        let url_ = this.baseUrl + "/3/tv/{series_id}/lists?";
        if (series_id === undefined || series_id === null)
            throw new globalThis.Error("The parameter 'series_id' must be defined.");
        url_ = url_.replace("{series_id}", encodeURIComponent("" + series_id));
        if (language === null)
            throw new globalThis.Error("The parameter 'language' cannot be null.");
        else if (language !== undefined)
            url_ += "language=" + encodeURIComponent("" + language) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processListsCopy(r as any));
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processListsCopy(r as any));
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Anonymous151>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Anonymous151>;
        }));
    }

    protected processListsCopy(response: HttpResponseBase): Observable<Anonymous151> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Anonymous151.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export enum Sort_by {
    Original_title_asc = "original_title.asc",
    Original_title_desc = "original_title.desc",
    Popularity_asc = "popularity.asc",
    Popularity_desc = "popularity.desc",
    Revenue_asc = "revenue.asc",
    Revenue_desc = "revenue.desc",
    Primary_release_date_asc = "primary_release_date.asc",
    Title_asc = "title.asc",
    Title_desc = "title.desc",
    Primary_release_date_desc = "primary_release_date.desc",
    Vote_average_asc = "vote_average.asc",
    Vote_average_desc = "vote_average.desc",
    Vote_count_asc = "vote_count.asc",
    Vote_count_desc = "vote_count.desc",
}

export enum Sort_by2 {
    First_air_date_asc = "first_air_date.asc",
    First_air_date_desc = "first_air_date.desc",
    Name_asc = "name.asc",
    Name_desc = "name.desc",
    Original_name_asc = "original_name.asc",
    Original_name_desc = "original_name.desc",
    Popularity_asc = "popularity.asc",
    Popularity_desc = "popularity.desc",
    Vote_average_asc = "vote_average.asc",
    Vote_average_desc = "vote_average.desc",
    Vote_count_asc = "vote_count.asc",
    Vote_count_desc = "vote_count.desc",
}

export enum Time_window {
    Day = "day",
    Week = "week",
}

export enum Time_window2 {
    Day = "day",
    Week = "week",
}

export enum Time_window3 {
    Day = "day",
    Week = "week",
}

export enum Time_window4 {
    Day = "day",
    Week = "week",
}

export class Body implements IBody {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body {
        data = typeof data === 'object' ? data : {};
        let result = new Body();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body2 implements IBody2 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body2 {
        data = typeof data === 'object' ? data : {};
        let result = new Body2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody2 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body3 implements IBody3 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body3 {
        data = typeof data === 'object' ? data : {};
        let result = new Body3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody3 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body4 implements IBody4 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body4 {
        data = typeof data === 'object' ? data : {};
        let result = new Body4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody4 {
    rAW_BODY: string;

    [key: string]: any;
}

export enum External_source {
    Empty = "",
    Imdb_id = "imdb_id",
    Facebook_id = "facebook_id",
    Instagram_id = "instagram_id",
    Tvdb_id = "tvdb_id",
    Tiktok_id = "tiktok_id",
    Twitter_id = "twitter_id",
    Wikidata_id = "wikidata_id",
    Youtube_id = "youtube_id",
}

export class Body5 implements IBody5 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body5 {
        data = typeof data === 'object' ? data : {};
        let result = new Body5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody5 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body6 implements IBody6 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body6 {
        data = typeof data === 'object' ? data : {};
        let result = new Body6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody6 {
    rAW_BODY: string;

    [key: string]: any;
}

export enum Sort_by3 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by4 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by5 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by6 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by7 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by8 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by9 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export class Body7 implements IBody7 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body7 {
        data = typeof data === 'object' ? data : {};
        let result = new Body7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody7 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body8 implements IBody8 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body8 {
        data = typeof data === 'object' ? data : {};
        let result = new Body8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody8 {
    rAW_BODY: string;

    [key: string]: any;
}

export enum Sort_by10 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by11 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export enum Sort_by12 {
    Created_at_asc = "created_at.asc",
    Created_at_desc = "created_at.desc",
}

export class Body9 implements IBody9 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body9 {
        data = typeof data === 'object' ? data : {};
        let result = new Body9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody9 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body10 implements IBody10 {
    rAW_BODY?: string;

    [key: string]: any;

    constructor(data?: IBody10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body10 {
        data = typeof data === 'object' ? data : {};
        let result = new Body10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody10 {
    rAW_BODY?: string;

    [key: string]: any;
}

export class Body11 implements IBody11 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body11 {
        data = typeof data === 'object' ? data : {};
        let result = new Body11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody11 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Body12 implements IBody12 {
    rAW_BODY!: string;

    [key: string]: any;

    constructor(data?: IBody12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.rAW_BODY = _data["RAW_BODY"];
        }
    }

    static fromJS(data: any): Body12 {
        data = typeof data === 'object' ? data : {};
        let result = new Body12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["RAW_BODY"] = this.rAW_BODY;
        return data;
    }
}

export interface IBody12 {
    rAW_BODY: string;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {
    page?: number;
    results?: Results[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous {
    page?: number;
    results?: Results[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous2 implements IAnonymous2 {
    page?: number;
    results?: Results2[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results2.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous2 {
    page?: number;
    results?: Results2[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous3 implements IAnonymous3 {
    adult?: boolean;
    backdrop_path?: string;
    belongs_to_collection?: any;
    budget?: number;
    genres?: Genres[];
    homepage?: string;
    id?: number;
    imdb_id?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    production_companies?: Production_companies[];
    production_countries?: Production_countries[];
    release_date?: string;
    revenue?: number;
    runtime?: number;
    spoken_languages?: Spoken_languages[];
    status?: string;
    tagline?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.budget = 0;
            this.id = 0;
            this.popularity = 0;
            this.revenue = 0;
            this.runtime = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.belongs_to_collection = _data["belongs_to_collection"];
            this.budget = _data["budget"] !== undefined ? _data["budget"] : 0;
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genres.fromJS(item));
            }
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            if (Array.isArray(_data["production_companies"])) {
                this.production_companies = [] as any;
                for (let item of _data["production_companies"])
                    this.production_companies!.push(Production_companies.fromJS(item));
            }
            if (Array.isArray(_data["production_countries"])) {
                this.production_countries = [] as any;
                for (let item of _data["production_countries"])
                    this.production_countries!.push(Production_countries.fromJS(item));
            }
            this.release_date = _data["release_date"];
            this.revenue = _data["revenue"] !== undefined ? _data["revenue"] : 0;
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            if (Array.isArray(_data["spoken_languages"])) {
                this.spoken_languages = [] as any;
                for (let item of _data["spoken_languages"])
                    this.spoken_languages!.push(Spoken_languages.fromJS(item));
            }
            this.status = _data["status"];
            this.tagline = _data["tagline"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["belongs_to_collection"] = this.belongs_to_collection;
        data["budget"] = this.budget;
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item ? item.toJSON() : undefined as any);
        }
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        if (Array.isArray(this.production_companies)) {
            data["production_companies"] = [];
            for (let item of this.production_companies)
                data["production_companies"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.production_countries)) {
            data["production_countries"] = [];
            for (let item of this.production_countries)
                data["production_countries"].push(item ? item.toJSON() : undefined as any);
        }
        data["release_date"] = this.release_date;
        data["revenue"] = this.revenue;
        data["runtime"] = this.runtime;
        if (Array.isArray(this.spoken_languages)) {
            data["spoken_languages"] = [];
            for (let item of this.spoken_languages)
                data["spoken_languages"].push(item ? item.toJSON() : undefined as any);
        }
        data["status"] = this.status;
        data["tagline"] = this.tagline;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IAnonymous3 {
    adult?: boolean;
    backdrop_path?: string;
    belongs_to_collection?: any;
    budget?: number;
    genres?: Genres[];
    homepage?: string;
    id?: number;
    imdb_id?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    production_companies?: Production_companies[];
    production_countries?: Production_countries[];
    release_date?: string;
    revenue?: number;
    runtime?: number;
    spoken_languages?: Spoken_languages[];
    status?: string;
    tagline?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Anonymous4 implements IAnonymous4 {
    adult?: boolean;
    backdrop_path?: string;
    created_by?: Created_by[];
    episode_run_time?: number[];
    first_air_date?: string;
    genres?: Genres2[];
    homepage?: string;
    id?: number;
    in_production?: boolean;
    languages?: string[];
    last_air_date?: string;
    last_episode_to_air?: Last_episode_to_air;
    name?: string;
    next_episode_to_air?: any;
    networks?: Networks[];
    number_of_episodes?: number;
    number_of_seasons?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    production_companies?: Production_companies2[];
    production_countries?: Production_countries2[];
    seasons?: Seasons[];
    spoken_languages?: Spoken_languages2[];
    status?: string;
    tagline?: string;
    type?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.in_production = true;
            this.number_of_episodes = 0;
            this.number_of_seasons = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["created_by"])) {
                this.created_by = [] as any;
                for (let item of _data["created_by"])
                    this.created_by!.push(Created_by.fromJS(item));
            }
            if (Array.isArray(_data["episode_run_time"])) {
                this.episode_run_time = [] as any;
                for (let item of _data["episode_run_time"])
                    this.episode_run_time!.push(item);
            }
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genres2.fromJS(item));
            }
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.in_production = _data["in_production"] !== undefined ? _data["in_production"] : true;
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            this.last_air_date = _data["last_air_date"];
            this.last_episode_to_air = _data["last_episode_to_air"] ? Last_episode_to_air.fromJS(_data["last_episode_to_air"]) : undefined as any;
            this.name = _data["name"];
            this.next_episode_to_air = _data["next_episode_to_air"];
            if (Array.isArray(_data["networks"])) {
                this.networks = [] as any;
                for (let item of _data["networks"])
                    this.networks!.push(Networks.fromJS(item));
            }
            this.number_of_episodes = _data["number_of_episodes"] !== undefined ? _data["number_of_episodes"] : 0;
            this.number_of_seasons = _data["number_of_seasons"] !== undefined ? _data["number_of_seasons"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            if (Array.isArray(_data["production_companies"])) {
                this.production_companies = [] as any;
                for (let item of _data["production_companies"])
                    this.production_companies!.push(Production_companies2.fromJS(item));
            }
            if (Array.isArray(_data["production_countries"])) {
                this.production_countries = [] as any;
                for (let item of _data["production_countries"])
                    this.production_countries!.push(Production_countries2.fromJS(item));
            }
            if (Array.isArray(_data["seasons"])) {
                this.seasons = [] as any;
                for (let item of _data["seasons"])
                    this.seasons!.push(Seasons.fromJS(item));
            }
            if (Array.isArray(_data["spoken_languages"])) {
                this.spoken_languages = [] as any;
                for (let item of _data["spoken_languages"])
                    this.spoken_languages!.push(Spoken_languages2.fromJS(item));
            }
            this.status = _data["status"];
            this.tagline = _data["tagline"];
            this.type = _data["type"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.created_by)) {
            data["created_by"] = [];
            for (let item of this.created_by)
                data["created_by"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.episode_run_time)) {
            data["episode_run_time"] = [];
            for (let item of this.episode_run_time)
                data["episode_run_time"].push(item);
        }
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item ? item.toJSON() : undefined as any);
        }
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["in_production"] = this.in_production;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["last_air_date"] = this.last_air_date;
        data["last_episode_to_air"] = this.last_episode_to_air ? this.last_episode_to_air.toJSON() : undefined as any;
        data["name"] = this.name;
        data["next_episode_to_air"] = this.next_episode_to_air;
        if (Array.isArray(this.networks)) {
            data["networks"] = [];
            for (let item of this.networks)
                data["networks"].push(item ? item.toJSON() : undefined as any);
        }
        data["number_of_episodes"] = this.number_of_episodes;
        data["number_of_seasons"] = this.number_of_seasons;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        if (Array.isArray(this.production_companies)) {
            data["production_companies"] = [];
            for (let item of this.production_companies)
                data["production_companies"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.production_countries)) {
            data["production_countries"] = [];
            for (let item of this.production_countries)
                data["production_countries"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.seasons)) {
            data["seasons"] = [];
            for (let item of this.seasons)
                data["seasons"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.spoken_languages)) {
            data["spoken_languages"] = [];
            for (let item of this.spoken_languages)
                data["spoken_languages"].push(item ? item.toJSON() : undefined as any);
        }
        data["status"] = this.status;
        data["tagline"] = this.tagline;
        data["type"] = this.type;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IAnonymous4 {
    adult?: boolean;
    backdrop_path?: string;
    created_by?: Created_by[];
    episode_run_time?: number[];
    first_air_date?: string;
    genres?: Genres2[];
    homepage?: string;
    id?: number;
    in_production?: boolean;
    languages?: string[];
    last_air_date?: string;
    last_episode_to_air?: Last_episode_to_air;
    name?: string;
    next_episode_to_air?: any;
    networks?: Networks[];
    number_of_episodes?: number;
    number_of_seasons?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    production_companies?: Production_companies2[];
    production_countries?: Production_countries2[];
    seasons?: Seasons[];
    spoken_languages?: Spoken_languages2[];
    status?: string;
    tagline?: string;
    type?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Anonymous5 implements IAnonymous5 {
    page?: number;
    results?: Results3[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results3.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous5 {
    page?: number;
    results?: Results3[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous6 implements IAnonymous6 {
    page?: number;
    results?: Results4[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results4.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous6 {
    page?: number;
    results?: Results4[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous7 implements IAnonymous7 {
    page?: number;
    results?: Results5[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results5.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous7 {
    page?: number;
    results?: Results5[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous8 implements IAnonymous8 {
    images?: Images;
    change_keys?: string[];

    [key: string]: any;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.images = _data["images"] ? Images.fromJS(_data["images"]) : undefined as any;
            if (Array.isArray(_data["change_keys"])) {
                this.change_keys = [] as any;
                for (let item of _data["change_keys"])
                    this.change_keys!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["images"] = this.images ? this.images.toJSON() : undefined as any;
        if (Array.isArray(this.change_keys)) {
            data["change_keys"] = [];
            for (let item of this.change_keys)
                data["change_keys"].push(item);
        }
        return data;
    }
}

export interface IAnonymous8 {
    images?: Images;
    change_keys?: string[];

    [key: string]: any;
}

export class Anonymous9 implements IAnonymous9 {
    _id?: string;
    air_date?: string;
    episodes?: Episodes[];
    name?: string;
    overview?: string;
    id?: number;
    poster_path?: string;
    season_number?: number;
    vote_average?: number;

    [key: string]: any;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.season_number = 0;
            this.vote_average = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this._id = _data["_id"];
            this.air_date = _data["air_date"];
            if (Array.isArray(_data["episodes"])) {
                this.episodes = [] as any;
                for (let item of _data["episodes"])
                    this.episodes!.push(Episodes.fromJS(item));
            }
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.poster_path = _data["poster_path"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["_id"] = this._id;
        data["air_date"] = this.air_date;
        if (Array.isArray(this.episodes)) {
            data["episodes"] = [];
            for (let item of this.episodes)
                data["episodes"].push(item ? item.toJSON() : undefined as any);
        }
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["id"] = this.id;
        data["poster_path"] = this.poster_path;
        data["season_number"] = this.season_number;
        data["vote_average"] = this.vote_average;
        return data;
    }
}

export interface IAnonymous9 {
    _id?: string;
    air_date?: string;
    episodes?: Episodes[];
    name?: string;
    overview?: string;
    id?: number;
    poster_path?: string;
    season_number?: number;
    vote_average?: number;

    [key: string]: any;
}

export class Anonymous10 implements IAnonymous10 {
    air_date?: string;
    crew?: Crew[];
    episode_number?: number;
    guest_stars?: Guest_stars[];
    name?: string;
    overview?: string;
    id?: number;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_number = 0;
            this.id = 0;
            this.runtime = 0;
            this.season_number = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew.fromJS(item));
            }
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            if (Array.isArray(_data["guest_stars"])) {
                this.guest_stars = [] as any;
                for (let item of _data["guest_stars"])
                    this.guest_stars!.push(Guest_stars.fromJS(item));
            }
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.still_path = _data["still_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["episode_number"] = this.episode_number;
        if (Array.isArray(this.guest_stars)) {
            data["guest_stars"] = [];
            for (let item of this.guest_stars)
                data["guest_stars"].push(item ? item.toJSON() : undefined as any);
        }
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["id"] = this.id;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["still_path"] = this.still_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IAnonymous10 {
    air_date?: string;
    crew?: Crew[];
    episode_number?: number;
    guest_stars?: Guest_stars[];
    name?: string;
    overview?: string;
    id?: number;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Anonymous11 implements IAnonymous11 {
    page?: number;
    results?: Results6[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results6.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous11 {
    page?: number;
    results?: Results6[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous12 implements IAnonymous12 {
    backdrops?: Backdrops[];
    id?: number;
    logos?: Logos[];
    posters?: Posters[];

    [key: string]: any;

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["backdrops"])) {
                this.backdrops = [] as any;
                for (let item of _data["backdrops"])
                    this.backdrops!.push(Backdrops.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos!.push(Logos.fromJS(item));
            }
            if (Array.isArray(_data["posters"])) {
                this.posters = [] as any;
                for (let item of _data["posters"])
                    this.posters!.push(Posters.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.backdrops)) {
            data["backdrops"] = [];
            for (let item of this.backdrops)
                data["backdrops"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.posters)) {
            data["posters"] = [];
            for (let item of this.posters)
                data["posters"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous12 {
    backdrops?: Backdrops[];
    id?: number;
    logos?: Logos[];
    posters?: Posters[];

    [key: string]: any;
}

export class Anonymous13 implements IAnonymous13 {
    backdrops?: Backdrops2[];
    id?: number;
    logos?: Logos2[];
    posters?: Posters2[];

    [key: string]: any;

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["backdrops"])) {
                this.backdrops = [] as any;
                for (let item of _data["backdrops"])
                    this.backdrops!.push(Backdrops2.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos!.push(Logos2.fromJS(item));
            }
            if (Array.isArray(_data["posters"])) {
                this.posters = [] as any;
                for (let item of _data["posters"])
                    this.posters!.push(Posters2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.backdrops)) {
            data["backdrops"] = [];
            for (let item of this.backdrops)
                data["backdrops"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.posters)) {
            data["posters"] = [];
            for (let item of this.posters)
                data["posters"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous13 {
    backdrops?: Backdrops2[];
    id?: number;
    logos?: Logos2[];
    posters?: Posters2[];

    [key: string]: any;
}

export class Anonymous14 implements IAnonymous14 {
    id?: number;
    posters?: Posters3[];

    [key: string]: any;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["posters"])) {
                this.posters = [] as any;
                for (let item of _data["posters"])
                    this.posters!.push(Posters3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.posters)) {
            data["posters"] = [];
            for (let item of this.posters)
                data["posters"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous14 {
    id?: number;
    posters?: Posters3[];

    [key: string]: any;
}

export class Anonymous15 implements IAnonymous15 {
    id?: number;
    stills?: Stills[];

    [key: string]: any;

    constructor(data?: IAnonymous15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["stills"])) {
                this.stills = [] as any;
                for (let item of _data["stills"])
                    this.stills!.push(Stills.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous15 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.stills)) {
            data["stills"] = [];
            for (let item of this.stills)
                data["stills"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous15 {
    id?: number;
    stills?: Stills[];

    [key: string]: any;
}

export class Anonymous16 implements IAnonymous16 {
    page?: number;
    results?: Results7[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results7.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous16 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous16 {
    page?: number;
    results?: Results7[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous17 implements IAnonymous17 {
    page?: number;
    results?: Results8[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results8.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous17 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous17 {
    page?: number;
    results?: Results8[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous18 implements IAnonymous18 {
    page?: number;
    results?: Results9[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results9.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous18 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous18 {
    page?: number;
    results?: Results9[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous19 implements IAnonymous19 {
    id?: number;
    favorite?: boolean;
    rated?: Rated;
    watchlist?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.favorite = true;
            this.watchlist = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.favorite = _data["favorite"] !== undefined ? _data["favorite"] : true;
            this.rated = _data["rated"] ? Rated.fromJS(_data["rated"]) : undefined as any;
            this.watchlist = _data["watchlist"] !== undefined ? _data["watchlist"] : true;
        }
    }

    static fromJS(data: any): Anonymous19 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["favorite"] = this.favorite;
        data["rated"] = this.rated ? this.rated.toJSON() : undefined as any;
        data["watchlist"] = this.watchlist;
        return data;
    }
}

export interface IAnonymous19 {
    id?: number;
    favorite?: boolean;
    rated?: Rated;
    watchlist?: boolean;

    [key: string]: any;
}

export class Anonymous20 implements IAnonymous20 {
    id?: number;
    favorite?: boolean;
    rated?: Rated2;
    watchlist?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.favorite = true;
            this.watchlist = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.favorite = _data["favorite"] !== undefined ? _data["favorite"] : true;
            this.rated = _data["rated"] ? Rated2.fromJS(_data["rated"]) : undefined as any;
            this.watchlist = _data["watchlist"] !== undefined ? _data["watchlist"] : true;
        }
    }

    static fromJS(data: any): Anonymous20 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["favorite"] = this.favorite;
        data["rated"] = this.rated ? this.rated.toJSON() : undefined as any;
        data["watchlist"] = this.watchlist;
        return data;
    }
}

export interface IAnonymous20 {
    id?: number;
    favorite?: boolean;
    rated?: Rated2;
    watchlist?: boolean;

    [key: string]: any;
}

export class Anonymous21 implements IAnonymous21 {
    id?: number;
    favorite?: boolean;
    rated?: Rated3;
    watchlist?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.favorite = true;
            this.watchlist = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.favorite = _data["favorite"] !== undefined ? _data["favorite"] : true;
            this.rated = _data["rated"] ? Rated3.fromJS(_data["rated"]) : undefined as any;
            this.watchlist = _data["watchlist"] !== undefined ? _data["watchlist"] : true;
        }
    }

    static fromJS(data: any): Anonymous21 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["favorite"] = this.favorite;
        data["rated"] = this.rated ? this.rated.toJSON() : undefined as any;
        data["watchlist"] = this.watchlist;
        return data;
    }
}

export interface IAnonymous21 {
    id?: number;
    favorite?: boolean;
    rated?: Rated3;
    watchlist?: boolean;

    [key: string]: any;
}

export class Anonymous22 implements IAnonymous22 {
    page?: number;
    results?: Results10[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results10.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous22 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous22 {
    page?: number;
    results?: Results10[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous23 implements IAnonymous23 {
    id?: number;
    titles?: Titles[];

    [key: string]: any;

    constructor(data?: IAnonymous23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["titles"])) {
                this.titles = [] as any;
                for (let item of _data["titles"])
                    this.titles!.push(Titles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous23 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.titles)) {
            data["titles"] = [];
            for (let item of this.titles)
                data["titles"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous23 {
    id?: number;
    titles?: Titles[];

    [key: string]: any;
}

export class Anonymous24 implements IAnonymous24 {
    changes?: Changes[];

    [key: string]: any;

    constructor(data?: IAnonymous24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(Changes.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous24 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous24 {
    changes?: Changes[];

    [key: string]: any;
}

export class Anonymous25 implements IAnonymous25 {
    id?: number;
    cast?: Cast[];
    crew?: Crew2[];

    [key: string]: any;

    constructor(data?: IAnonymous25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous25 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous25 {
    id?: number;
    cast?: Cast[];
    crew?: Crew2[];

    [key: string]: any;
}

export class Anonymous26 implements IAnonymous26 {
    id?: number;
    imdb_id?: string;
    wikidata_id?: any;
    facebook_id?: string;
    instagram_id?: any;
    twitter_id?: any;

    [key: string]: any;

    constructor(data?: IAnonymous26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.wikidata_id = _data["wikidata_id"];
            this.facebook_id = _data["facebook_id"];
            this.instagram_id = _data["instagram_id"];
            this.twitter_id = _data["twitter_id"];
        }
    }

    static fromJS(data: any): Anonymous26 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["wikidata_id"] = this.wikidata_id;
        data["facebook_id"] = this.facebook_id;
        data["instagram_id"] = this.instagram_id;
        data["twitter_id"] = this.twitter_id;
        return data;
    }
}

export interface IAnonymous26 {
    id?: number;
    imdb_id?: string;
    wikidata_id?: any;
    facebook_id?: string;
    instagram_id?: any;
    twitter_id?: any;

    [key: string]: any;
}

export class Anonymous27 implements IAnonymous27 {
    id?: number;
    keywords?: Keywords[];

    [key: string]: any;

    constructor(data?: IAnonymous27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["keywords"])) {
                this.keywords = [] as any;
                for (let item of _data["keywords"])
                    this.keywords!.push(Keywords.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous27 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.keywords)) {
            data["keywords"] = [];
            for (let item of this.keywords)
                data["keywords"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous27 {
    id?: number;
    keywords?: Keywords[];

    [key: string]: any;
}

export class Anonymous28 implements IAnonymous28 {
    id?: number;
    page?: number;
    results?: Results11[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results11.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous28 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous28 {
    id?: number;
    page?: number;
    results?: Results11[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous29 implements IAnonymous29 {
    id?: number;
    results?: Results12[];

    [key: string]: any;

    constructor(data?: IAnonymous29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results12.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous29 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous29 {
    id?: number;
    results?: Results12[];

    [key: string]: any;
}

export class Anonymous30 implements IAnonymous30 {
    id?: number;
    page?: number;
    results?: Results13[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results13.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous30 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous30 {
    id?: number;
    page?: number;
    results?: Results13[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous31 implements IAnonymous31 {
    page?: number;
    results?: Results14[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results14.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous31 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous31 {
    page?: number;
    results?: Results14[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous32 implements IAnonymous32 {
    id?: number;
    translations?: Translations[];

    [key: string]: any;

    constructor(data?: IAnonymous32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous32 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous32 {
    id?: number;
    translations?: Translations[];

    [key: string]: any;
}

export class Anonymous33 implements IAnonymous33 {
    id?: number;
    results?: Results15[];

    [key: string]: any;

    constructor(data?: IAnonymous33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results15.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous33 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous33 {
    id?: number;
    results?: Results15[];

    [key: string]: any;
}

export class Anonymous34 implements IAnonymous34 {
    id?: number;
    results?: Results16;

    [key: string]: any;

    constructor(data?: IAnonymous34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.results = _data["results"] ? Results16.fromJS(_data["results"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous34 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["results"] = this.results ? this.results.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous34 {
    id?: number;
    results?: Results16;

    [key: string]: any;
}

export class Anonymous35 implements IAnonymous35 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous35 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous35 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous36 implements IAnonymous36 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous36 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous36 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous37 implements IAnonymous37 {
    success?: boolean;
    guest_session_id?: string;
    expires_at?: string;

    [key: string]: any;

    constructor(data?: IAnonymous37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.guest_session_id = _data["guest_session_id"];
            this.expires_at = _data["expires_at"];
        }
    }

    static fromJS(data: any): Anonymous37 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["guest_session_id"] = this.guest_session_id;
        data["expires_at"] = this.expires_at;
        return data;
    }
}

export interface IAnonymous37 {
    success?: boolean;
    guest_session_id?: string;
    expires_at?: string;

    [key: string]: any;
}

export class Anonymous38 implements IAnonymous38 {
    success?: boolean;
    expires_at?: string;
    request_token?: string;

    [key: string]: any;

    constructor(data?: IAnonymous38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.expires_at = _data["expires_at"];
            this.request_token = _data["request_token"];
        }
    }

    static fromJS(data: any): Anonymous38 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["expires_at"] = this.expires_at;
        data["request_token"] = this.request_token;
        return data;
    }
}

export interface IAnonymous38 {
    success?: boolean;
    expires_at?: string;
    request_token?: string;

    [key: string]: any;
}

export class Anonymous39 implements IAnonymous39 {
    success?: boolean;
    session_id?: string;

    [key: string]: any;

    constructor(data?: IAnonymous39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.session_id = _data["session_id"];
        }
    }

    static fromJS(data: any): Anonymous39 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["session_id"] = this.session_id;
        return data;
    }
}

export interface IAnonymous39 {
    success?: boolean;
    session_id?: string;

    [key: string]: any;
}

export class Anonymous40 implements IAnonymous40 {
    success?: boolean;
    session_id?: string;

    [key: string]: any;

    constructor(data?: IAnonymous40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.session_id = _data["session_id"];
        }
    }

    static fromJS(data: any): Anonymous40 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["session_id"] = this.session_id;
        return data;
    }
}

export interface IAnonymous40 {
    success?: boolean;
    session_id?: string;

    [key: string]: any;
}

export class Anonymous41 implements IAnonymous41 {
    success?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
        }
    }

    static fromJS(data: any): Anonymous41 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        return data;
    }
}

export interface IAnonymous41 {
    success?: boolean;

    [key: string]: any;
}

export class Anonymous42 implements IAnonymous42 {
    movie_results?: Movie_results[];
    person_results?: any[];
    tv_results?: any[];
    tv_episode_results?: any[];
    tv_season_results?: any[];

    [key: string]: any;

    constructor(data?: IAnonymous42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["movie_results"])) {
                this.movie_results = [] as any;
                for (let item of _data["movie_results"])
                    this.movie_results!.push(Movie_results.fromJS(item));
            }
            if (Array.isArray(_data["person_results"])) {
                this.person_results = [] as any;
                for (let item of _data["person_results"])
                    this.person_results!.push(item);
            }
            if (Array.isArray(_data["tv_results"])) {
                this.tv_results = [] as any;
                for (let item of _data["tv_results"])
                    this.tv_results!.push(item);
            }
            if (Array.isArray(_data["tv_episode_results"])) {
                this.tv_episode_results = [] as any;
                for (let item of _data["tv_episode_results"])
                    this.tv_episode_results!.push(item);
            }
            if (Array.isArray(_data["tv_season_results"])) {
                this.tv_season_results = [] as any;
                for (let item of _data["tv_season_results"])
                    this.tv_season_results!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous42 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.movie_results)) {
            data["movie_results"] = [];
            for (let item of this.movie_results)
                data["movie_results"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.person_results)) {
            data["person_results"] = [];
            for (let item of this.person_results)
                data["person_results"].push(item);
        }
        if (Array.isArray(this.tv_results)) {
            data["tv_results"] = [];
            for (let item of this.tv_results)
                data["tv_results"].push(item);
        }
        if (Array.isArray(this.tv_episode_results)) {
            data["tv_episode_results"] = [];
            for (let item of this.tv_episode_results)
                data["tv_episode_results"].push(item);
        }
        if (Array.isArray(this.tv_season_results)) {
            data["tv_season_results"] = [];
            for (let item of this.tv_season_results)
                data["tv_season_results"].push(item);
        }
        return data;
    }
}

export interface IAnonymous42 {
    movie_results?: Movie_results[];
    person_results?: any[];
    tv_results?: any[];
    tv_episode_results?: any[];
    tv_season_results?: any[];

    [key: string]: any;
}

export class Anonymous43 implements IAnonymous43 {
    adult?: boolean;
    also_known_as?: string[];
    biography?: string;
    birthday?: string;
    deathday?: any;
    gender?: number;
    homepage?: any;
    id?: number;
    imdb_id?: string;
    known_for_department?: string;
    name?: string;
    place_of_birth?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IAnonymous43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            if (Array.isArray(_data["also_known_as"])) {
                this.also_known_as = [] as any;
                for (let item of _data["also_known_as"])
                    this.also_known_as!.push(item);
            }
            this.biography = _data["biography"];
            this.birthday = _data["birthday"];
            this.deathday = _data["deathday"];
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.place_of_birth = _data["place_of_birth"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Anonymous43 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        if (Array.isArray(this.also_known_as)) {
            data["also_known_as"] = [];
            for (let item of this.also_known_as)
                data["also_known_as"].push(item);
        }
        data["biography"] = this.biography;
        data["birthday"] = this.birthday;
        data["deathday"] = this.deathday;
        data["gender"] = this.gender;
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["place_of_birth"] = this.place_of_birth;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IAnonymous43 {
    adult?: boolean;
    also_known_as?: string[];
    biography?: string;
    birthday?: string;
    deathday?: any;
    gender?: number;
    homepage?: any;
    id?: number;
    imdb_id?: string;
    known_for_department?: string;
    name?: string;
    place_of_birth?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Anonymous44 implements IAnonymous44 {
    changes?: Changes2[];

    [key: string]: any;

    constructor(data?: IAnonymous44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(Changes2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous44 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous44 {
    changes?: Changes2[];

    [key: string]: any;
}

export class Anonymous45 implements IAnonymous45 {
    changes?: Changes3[];

    [key: string]: any;

    constructor(data?: IAnonymous45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(Changes3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous45 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous45 {
    changes?: Changes3[];

    [key: string]: any;
}

export class Anonymous46 implements IAnonymous46 {
    id?: number;
    profiles?: Profiles[];

    [key: string]: any;

    constructor(data?: IAnonymous46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["profiles"])) {
                this.profiles = [] as any;
                for (let item of _data["profiles"])
                    this.profiles!.push(Profiles.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous46 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.profiles)) {
            data["profiles"] = [];
            for (let item of this.profiles)
                data["profiles"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous46 {
    id?: number;
    profiles?: Profiles[];

    [key: string]: any;
}

export class Anonymous47 implements IAnonymous47 {
    cast?: Cast2[];
    crew?: Crew3[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast2.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew3.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous47 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous47 {
    cast?: Cast2[];
    crew?: Crew3[];
    id?: number;

    [key: string]: any;
}

export class Anonymous48 implements IAnonymous48 {
    cast?: Cast3[];
    crew?: Crew4[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast3.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew4.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous48 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous48 {
    cast?: Cast3[];
    crew?: Crew4[];
    id?: number;

    [key: string]: any;
}

export class Anonymous49 implements IAnonymous49 {
    cast?: Cast4[];
    crew?: Crew5[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast4.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew5.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous49 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous49 {
    cast?: Cast4[];
    crew?: Crew5[];
    id?: number;

    [key: string]: any;
}

export class Anonymous50 implements IAnonymous50 {
    id?: number;
    freebase_mid?: string;
    freebase_id?: string;
    imdb_id?: string;
    tvrage_id?: number;
    wikidata_id?: string;
    facebook_id?: string;
    instagram_id?: string;
    tiktok_id?: string;
    twitter_id?: string;
    youtube_id?: any;

    [key: string]: any;

    constructor(data?: IAnonymous50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.tvrage_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.freebase_mid = _data["freebase_mid"];
            this.freebase_id = _data["freebase_id"];
            this.imdb_id = _data["imdb_id"];
            this.tvrage_id = _data["tvrage_id"] !== undefined ? _data["tvrage_id"] : 0;
            this.wikidata_id = _data["wikidata_id"];
            this.facebook_id = _data["facebook_id"];
            this.instagram_id = _data["instagram_id"];
            this.tiktok_id = _data["tiktok_id"];
            this.twitter_id = _data["twitter_id"];
            this.youtube_id = _data["youtube_id"];
        }
    }

    static fromJS(data: any): Anonymous50 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["freebase_mid"] = this.freebase_mid;
        data["freebase_id"] = this.freebase_id;
        data["imdb_id"] = this.imdb_id;
        data["tvrage_id"] = this.tvrage_id;
        data["wikidata_id"] = this.wikidata_id;
        data["facebook_id"] = this.facebook_id;
        data["instagram_id"] = this.instagram_id;
        data["tiktok_id"] = this.tiktok_id;
        data["twitter_id"] = this.twitter_id;
        data["youtube_id"] = this.youtube_id;
        return data;
    }
}

export interface IAnonymous50 {
    id?: number;
    freebase_mid?: string;
    freebase_id?: string;
    imdb_id?: string;
    tvrage_id?: number;
    wikidata_id?: string;
    facebook_id?: string;
    instagram_id?: string;
    tiktok_id?: string;
    twitter_id?: string;
    youtube_id?: any;

    [key: string]: any;
}

export class Anonymous51 implements IAnonymous51 {
    id?: number;
    page?: number;
    results?: Results17[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results17.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous51 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous51 {
    id?: number;
    page?: number;
    results?: Results17[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous52 implements IAnonymous52 {
    id?: number;
    translations?: Translations2[];

    [key: string]: any;

    constructor(data?: IAnonymous52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous52 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous52 {
    id?: number;
    translations?: Translations2[];

    [key: string]: any;
}

export class Anonymous53 implements IAnonymous53 {
    page?: number;
    results?: Results18[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results18.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous53 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous53 {
    page?: number;
    results?: Results18[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous54 implements IAnonymous54 {
    page?: number;
    results?: Results19[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results19.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous54 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous54 {
    page?: number;
    results?: Results19[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous55 implements IAnonymous55 {
    page?: number;
    results?: Results20[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results20.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous55 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous55 {
    page?: number;
    results?: Results20[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous56 implements IAnonymous56 {
    dates?: Dates;
    page?: number;
    results?: Results21[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.dates = _data["dates"] ? Dates.fromJS(_data["dates"]) : undefined as any;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results21.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous56 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["dates"] = this.dates ? this.dates.toJSON() : undefined as any;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous56 {
    dates?: Dates;
    page?: number;
    results?: Results21[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous57 implements IAnonymous57 {
    dates?: Dates2;
    page?: number;
    results?: Results22[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.dates = _data["dates"] ? Dates2.fromJS(_data["dates"]) : undefined as any;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results22.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous57 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["dates"] = this.dates ? this.dates.toJSON() : undefined as any;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous57 {
    dates?: Dates2;
    page?: number;
    results?: Results22[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous58 implements IAnonymous58 {
    page?: number;
    results?: Results23[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results23.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous58 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous58 {
    page?: number;
    results?: Results23[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous59 implements IAnonymous59 {
    page?: number;
    results?: Results24[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results24.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous59 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous59 {
    page?: number;
    results?: Results24[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous60 implements IAnonymous60 {
    page?: number;
    results?: Results25[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results25.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous60 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous60 {
    page?: number;
    results?: Results25[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous61 implements IAnonymous61 {
    page?: number;
    results?: Results26[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results26.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous61 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous61 {
    page?: number;
    results?: Results26[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous62 implements IAnonymous62 {
    adult?: boolean;
    backdrop_path?: any;
    belongs_to_collection?: any;
    budget?: number;
    genres?: any[];
    homepage?: string;
    id?: number;
    imdb_id?: any;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: any;
    production_companies?: any[];
    production_countries?: any[];
    release_date?: string;
    revenue?: number;
    runtime?: number;
    spoken_languages?: any[];
    status?: string;
    tagline?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IAnonymous62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.budget = 0;
            this.id = 0;
            this.popularity = 0;
            this.revenue = 0;
            this.runtime = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.belongs_to_collection = _data["belongs_to_collection"];
            this.budget = _data["budget"] !== undefined ? _data["budget"] : 0;
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(item);
            }
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            if (Array.isArray(_data["production_companies"])) {
                this.production_companies = [] as any;
                for (let item of _data["production_companies"])
                    this.production_companies!.push(item);
            }
            if (Array.isArray(_data["production_countries"])) {
                this.production_countries = [] as any;
                for (let item of _data["production_countries"])
                    this.production_countries!.push(item);
            }
            this.release_date = _data["release_date"];
            this.revenue = _data["revenue"] !== undefined ? _data["revenue"] : 0;
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            if (Array.isArray(_data["spoken_languages"])) {
                this.spoken_languages = [] as any;
                for (let item of _data["spoken_languages"])
                    this.spoken_languages!.push(item);
            }
            this.status = _data["status"];
            this.tagline = _data["tagline"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Anonymous62 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["belongs_to_collection"] = this.belongs_to_collection;
        data["budget"] = this.budget;
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item);
        }
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        if (Array.isArray(this.production_companies)) {
            data["production_companies"] = [];
            for (let item of this.production_companies)
                data["production_companies"].push(item);
        }
        if (Array.isArray(this.production_countries)) {
            data["production_countries"] = [];
            for (let item of this.production_countries)
                data["production_countries"].push(item);
        }
        data["release_date"] = this.release_date;
        data["revenue"] = this.revenue;
        data["runtime"] = this.runtime;
        if (Array.isArray(this.spoken_languages)) {
            data["spoken_languages"] = [];
            for (let item of this.spoken_languages)
                data["spoken_languages"].push(item);
        }
        data["status"] = this.status;
        data["tagline"] = this.tagline;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IAnonymous62 {
    adult?: boolean;
    backdrop_path?: any;
    belongs_to_collection?: any;
    budget?: number;
    genres?: any[];
    homepage?: string;
    id?: number;
    imdb_id?: any;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: any;
    production_companies?: any[];
    production_countries?: any[];
    release_date?: string;
    revenue?: number;
    runtime?: number;
    spoken_languages?: any[];
    status?: string;
    tagline?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Anonymous63 implements IAnonymous63 {
    adult?: boolean;
    backdrop_path?: any;
    created_by?: any[];
    episode_run_time?: any[];
    first_air_date?: string;
    genres?: any[];
    homepage?: string;
    id?: number;
    in_production?: boolean;
    languages?: any[];
    last_air_date?: string;
    last_episode_to_air?: Last_episode_to_air2;
    name?: string;
    next_episode_to_air?: any;
    networks?: any[];
    number_of_episodes?: number;
    number_of_seasons?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: any;
    production_companies?: any[];
    production_countries?: any[];
    seasons?: Seasons2[];
    spoken_languages?: any[];
    status?: string;
    tagline?: string;
    type?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IAnonymous63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.in_production = true;
            this.number_of_episodes = 0;
            this.number_of_seasons = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["created_by"])) {
                this.created_by = [] as any;
                for (let item of _data["created_by"])
                    this.created_by!.push(item);
            }
            if (Array.isArray(_data["episode_run_time"])) {
                this.episode_run_time = [] as any;
                for (let item of _data["episode_run_time"])
                    this.episode_run_time!.push(item);
            }
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(item);
            }
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.in_production = _data["in_production"] !== undefined ? _data["in_production"] : true;
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            this.last_air_date = _data["last_air_date"];
            this.last_episode_to_air = _data["last_episode_to_air"] ? Last_episode_to_air2.fromJS(_data["last_episode_to_air"]) : undefined as any;
            this.name = _data["name"];
            this.next_episode_to_air = _data["next_episode_to_air"];
            if (Array.isArray(_data["networks"])) {
                this.networks = [] as any;
                for (let item of _data["networks"])
                    this.networks!.push(item);
            }
            this.number_of_episodes = _data["number_of_episodes"] !== undefined ? _data["number_of_episodes"] : 0;
            this.number_of_seasons = _data["number_of_seasons"] !== undefined ? _data["number_of_seasons"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            if (Array.isArray(_data["production_companies"])) {
                this.production_companies = [] as any;
                for (let item of _data["production_companies"])
                    this.production_companies!.push(item);
            }
            if (Array.isArray(_data["production_countries"])) {
                this.production_countries = [] as any;
                for (let item of _data["production_countries"])
                    this.production_countries!.push(item);
            }
            if (Array.isArray(_data["seasons"])) {
                this.seasons = [] as any;
                for (let item of _data["seasons"])
                    this.seasons!.push(Seasons2.fromJS(item));
            }
            if (Array.isArray(_data["spoken_languages"])) {
                this.spoken_languages = [] as any;
                for (let item of _data["spoken_languages"])
                    this.spoken_languages!.push(item);
            }
            this.status = _data["status"];
            this.tagline = _data["tagline"];
            this.type = _data["type"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Anonymous63 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.created_by)) {
            data["created_by"] = [];
            for (let item of this.created_by)
                data["created_by"].push(item);
        }
        if (Array.isArray(this.episode_run_time)) {
            data["episode_run_time"] = [];
            for (let item of this.episode_run_time)
                data["episode_run_time"].push(item);
        }
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item);
        }
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["in_production"] = this.in_production;
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        data["last_air_date"] = this.last_air_date;
        data["last_episode_to_air"] = this.last_episode_to_air ? this.last_episode_to_air.toJSON() : undefined as any;
        data["name"] = this.name;
        data["next_episode_to_air"] = this.next_episode_to_air;
        if (Array.isArray(this.networks)) {
            data["networks"] = [];
            for (let item of this.networks)
                data["networks"].push(item);
        }
        data["number_of_episodes"] = this.number_of_episodes;
        data["number_of_seasons"] = this.number_of_seasons;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        if (Array.isArray(this.production_companies)) {
            data["production_companies"] = [];
            for (let item of this.production_companies)
                data["production_companies"].push(item);
        }
        if (Array.isArray(this.production_countries)) {
            data["production_countries"] = [];
            for (let item of this.production_countries)
                data["production_countries"].push(item);
        }
        if (Array.isArray(this.seasons)) {
            data["seasons"] = [];
            for (let item of this.seasons)
                data["seasons"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.spoken_languages)) {
            data["spoken_languages"] = [];
            for (let item of this.spoken_languages)
                data["spoken_languages"].push(item);
        }
        data["status"] = this.status;
        data["tagline"] = this.tagline;
        data["type"] = this.type;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IAnonymous63 {
    adult?: boolean;
    backdrop_path?: any;
    created_by?: any[];
    episode_run_time?: any[];
    first_air_date?: string;
    genres?: any[];
    homepage?: string;
    id?: number;
    in_production?: boolean;
    languages?: any[];
    last_air_date?: string;
    last_episode_to_air?: Last_episode_to_air2;
    name?: string;
    next_episode_to_air?: any;
    networks?: any[];
    number_of_episodes?: number;
    number_of_seasons?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: any;
    production_companies?: any[];
    production_countries?: any[];
    seasons?: Seasons2[];
    spoken_languages?: any[];
    status?: string;
    tagline?: string;
    type?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Anonymous64 implements IAnonymous64 {
    cast?: Cast5[];
    crew?: Crew6[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast5.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew6.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous64 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous64 {
    cast?: Cast5[];
    crew?: Crew6[];
    id?: number;

    [key: string]: any;
}

export class Anonymous65 implements IAnonymous65 {
    id?: number;
    results?: Results27[];

    [key: string]: any;

    constructor(data?: IAnonymous65) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results27.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous65 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous65();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous65 {
    id?: number;
    results?: Results27[];

    [key: string]: any;
}

export class Anonymous66 implements IAnonymous66 {
    results?: Results28[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous66) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results28.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous66 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous66();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous66 {
    results?: Results28[];
    id?: number;

    [key: string]: any;
}

export class Anonymous67 implements IAnonymous67 {
    cast?: Cast6[];
    crew?: Crew7[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous67) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast6.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew7.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous67 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous67();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous67 {
    cast?: Cast6[];
    crew?: Crew7[];
    id?: number;

    [key: string]: any;
}

export class Anonymous68 implements IAnonymous68 {
    results?: Results29[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous68) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results29.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous68 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous68();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous68 {
    results?: Results29[];
    id?: number;

    [key: string]: any;
}

export class Anonymous69 implements IAnonymous69 {
    id?: number;
    imdb_id?: string;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: number;
    wikidata_id?: string;
    facebook_id?: string;
    instagram_id?: string;
    twitter_id?: string;

    [key: string]: any;

    constructor(data?: IAnonymous69) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.tvdb_id = 0;
            this.tvrage_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.freebase_mid = _data["freebase_mid"];
            this.freebase_id = _data["freebase_id"];
            this.tvdb_id = _data["tvdb_id"] !== undefined ? _data["tvdb_id"] : 0;
            this.tvrage_id = _data["tvrage_id"] !== undefined ? _data["tvrage_id"] : 0;
            this.wikidata_id = _data["wikidata_id"];
            this.facebook_id = _data["facebook_id"];
            this.instagram_id = _data["instagram_id"];
            this.twitter_id = _data["twitter_id"];
        }
    }

    static fromJS(data: any): Anonymous69 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous69();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["freebase_mid"] = this.freebase_mid;
        data["freebase_id"] = this.freebase_id;
        data["tvdb_id"] = this.tvdb_id;
        data["tvrage_id"] = this.tvrage_id;
        data["wikidata_id"] = this.wikidata_id;
        data["facebook_id"] = this.facebook_id;
        data["instagram_id"] = this.instagram_id;
        data["twitter_id"] = this.twitter_id;
        return data;
    }
}

export interface IAnonymous69 {
    id?: number;
    imdb_id?: string;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: number;
    wikidata_id?: string;
    facebook_id?: string;
    instagram_id?: string;
    twitter_id?: string;

    [key: string]: any;
}

export class Anonymous70 implements IAnonymous70 {
    id?: number;
    results?: Results30[];

    [key: string]: any;

    constructor(data?: IAnonymous70) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results30.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous70 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous70();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous70 {
    id?: number;
    results?: Results30[];

    [key: string]: any;
}

export class Anonymous71 implements IAnonymous71 {
    page?: number;
    results?: Results31[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous71) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results31.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous71 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous71();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous71 {
    page?: number;
    results?: Results31[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous72 implements IAnonymous72 {
    id?: number;
    page?: number;
    results?: Results32[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous72) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results32.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous72 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous72();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous72 {
    id?: number;
    page?: number;
    results?: Results32[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous73 implements IAnonymous73 {
    id?: number;
    results?: Results33[];

    [key: string]: any;

    constructor(data?: IAnonymous73) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results33.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous73 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous73();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous73 {
    id?: number;
    results?: Results33[];

    [key: string]: any;
}

export class Anonymous74 implements IAnonymous74 {
    page?: number;
    results?: Results34[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous74) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results34.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous74 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous74();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous74 {
    page?: number;
    results?: Results34[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous75 implements IAnonymous75 {
    id?: number;
    translations?: Translations3[];

    [key: string]: any;

    constructor(data?: IAnonymous75) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous75 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous75();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous75 {
    id?: number;
    translations?: Translations3[];

    [key: string]: any;
}

export class Anonymous76 implements IAnonymous76 {
    id?: number;
    results?: Results35[];

    [key: string]: any;

    constructor(data?: IAnonymous76) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results35.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous76 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous76();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous76 {
    id?: number;
    results?: Results35[];

    [key: string]: any;
}

export class Anonymous77 implements IAnonymous77 {
    id?: number;
    results?: Results36;

    [key: string]: any;

    constructor(data?: IAnonymous77) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.results = _data["results"] ? Results36.fromJS(_data["results"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous77 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous77();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["results"] = this.results ? this.results.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous77 {
    id?: number;
    results?: Results36;

    [key: string]: any;
}

export class Anonymous78 implements IAnonymous78 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous78) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous78 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous78();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous78 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous79 implements IAnonymous79 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous79) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous79 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous79();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous79 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous80 implements IAnonymous80 {
    id?: number;
    results?: Results37[];

    [key: string]: any;

    constructor(data?: IAnonymous80) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results37.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous80 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous80();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous80 {
    id?: number;
    results?: Results37[];

    [key: string]: any;
}

export class Anonymous81 implements IAnonymous81 {
    cast?: Cast7[];
    crew?: Crew8[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous81) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast7.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew8.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous81 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous81();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous81 {
    cast?: Cast7[];
    crew?: Crew8[];
    id?: number;

    [key: string]: any;
}

export class Anonymous82 implements IAnonymous82 {
    changes?: Changes4[];

    [key: string]: any;

    constructor(data?: IAnonymous82) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(Changes4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous82 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous82();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous82 {
    changes?: Changes4[];

    [key: string]: any;
}

export class Anonymous83 implements IAnonymous83 {
    cast?: Cast8[];
    crew?: Crew9[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous83) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast8.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew9.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous83 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous83();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous83 {
    cast?: Cast8[];
    crew?: Crew9[];
    id?: number;

    [key: string]: any;
}

export class Anonymous84 implements IAnonymous84 {
    id?: number;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: any;
    wikidata_id?: string;

    [key: string]: any;

    constructor(data?: IAnonymous84) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.tvdb_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.freebase_mid = _data["freebase_mid"];
            this.freebase_id = _data["freebase_id"];
            this.tvdb_id = _data["tvdb_id"] !== undefined ? _data["tvdb_id"] : 0;
            this.tvrage_id = _data["tvrage_id"];
            this.wikidata_id = _data["wikidata_id"];
        }
    }

    static fromJS(data: any): Anonymous84 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous84();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["freebase_mid"] = this.freebase_mid;
        data["freebase_id"] = this.freebase_id;
        data["tvdb_id"] = this.tvdb_id;
        data["tvrage_id"] = this.tvrage_id;
        data["wikidata_id"] = this.wikidata_id;
        return data;
    }
}

export interface IAnonymous84 {
    id?: number;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: any;
    wikidata_id?: string;

    [key: string]: any;
}

export class Anonymous85 implements IAnonymous85 {
    id?: number;
    translations?: Translations4[];

    [key: string]: any;

    constructor(data?: IAnonymous85) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous85 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous85();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous85 {
    id?: number;
    translations?: Translations4[];

    [key: string]: any;
}

export class Anonymous86 implements IAnonymous86 {
    id?: number;
    results?: Results38[];

    [key: string]: any;

    constructor(data?: IAnonymous86) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results38.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous86 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous86();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous86 {
    id?: number;
    results?: Results38[];

    [key: string]: any;
}

export class Anonymous87 implements IAnonymous87 {
    cast?: Cast9[];
    crew?: Crew10[];
    guest_stars?: Guest_stars2[];
    id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous87) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["cast"])) {
                this.cast = [] as any;
                for (let item of _data["cast"])
                    this.cast!.push(Cast9.fromJS(item));
            }
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew10.fromJS(item));
            }
            if (Array.isArray(_data["guest_stars"])) {
                this.guest_stars = [] as any;
                for (let item of _data["guest_stars"])
                    this.guest_stars!.push(Guest_stars2.fromJS(item));
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous87 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous87();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.cast)) {
            data["cast"] = [];
            for (let item of this.cast)
                data["cast"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.guest_stars)) {
            data["guest_stars"] = [];
            for (let item of this.guest_stars)
                data["guest_stars"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IAnonymous87 {
    cast?: Cast9[];
    crew?: Crew10[];
    guest_stars?: Guest_stars2[];
    id?: number;

    [key: string]: any;
}

export class Anonymous88 implements IAnonymous88 {
    id?: number;
    imdb_id?: string;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: number;
    wikidata_id?: string;

    [key: string]: any;

    constructor(data?: IAnonymous88) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.tvdb_id = 0;
            this.tvrage_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.freebase_mid = _data["freebase_mid"];
            this.freebase_id = _data["freebase_id"];
            this.tvdb_id = _data["tvdb_id"] !== undefined ? _data["tvdb_id"] : 0;
            this.tvrage_id = _data["tvrage_id"] !== undefined ? _data["tvrage_id"] : 0;
            this.wikidata_id = _data["wikidata_id"];
        }
    }

    static fromJS(data: any): Anonymous88 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous88();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["freebase_mid"] = this.freebase_mid;
        data["freebase_id"] = this.freebase_id;
        data["tvdb_id"] = this.tvdb_id;
        data["tvrage_id"] = this.tvrage_id;
        data["wikidata_id"] = this.wikidata_id;
        return data;
    }
}

export interface IAnonymous88 {
    id?: number;
    imdb_id?: string;
    freebase_mid?: string;
    freebase_id?: string;
    tvdb_id?: number;
    tvrage_id?: number;
    wikidata_id?: string;

    [key: string]: any;
}

export class Anonymous89 implements IAnonymous89 {
    id?: number;
    translations?: Translations5[];

    [key: string]: any;

    constructor(data?: IAnonymous89) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous89 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous89();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous89 {
    id?: number;
    translations?: Translations5[];

    [key: string]: any;
}

export class Anonymous90 implements IAnonymous90 {
    id?: number;
    results?: Results39[];

    [key: string]: any;

    constructor(data?: IAnonymous90) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results39.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous90 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous90();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous90 {
    id?: number;
    results?: Results39[];

    [key: string]: any;
}

export class Anonymous91 implements IAnonymous91 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous91) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous91 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous91();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous91 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous92 implements IAnonymous92 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous92) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous92 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous92();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous92 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous93 implements IAnonymous93 {
    avatar?: Avatar;
    id?: number;
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    include_adult?: boolean;
    username?: string;

    [key: string]: any;

    constructor(data?: IAnonymous93) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.include_adult = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.avatar = _data["avatar"] ? Avatar.fromJS(_data["avatar"]) : undefined as any;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.include_adult = _data["include_adult"] !== undefined ? _data["include_adult"] : true;
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): Anonymous93 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous93();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["avatar"] = this.avatar ? this.avatar.toJSON() : undefined as any;
        data["id"] = this.id;
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["include_adult"] = this.include_adult;
        data["username"] = this.username;
        return data;
    }
}

export interface IAnonymous93 {
    avatar?: Avatar;
    id?: number;
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    include_adult?: boolean;
    username?: string;

    [key: string]: any;
}

export class Anonymous94 implements IAnonymous94 {
    page?: number;
    results?: Results40[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous94) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results40.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous94 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous94();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous94 {
    page?: number;
    results?: Results40[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous95 implements IAnonymous95 {
    page?: number;
    results?: Results41[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous95) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results41.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous95 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous95();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous95 {
    page?: number;
    results?: Results41[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous96 implements IAnonymous96 {
    page?: number;
    results?: Results42[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous96) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results42.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous96 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous96();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous96 {
    page?: number;
    results?: Results42[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous97 implements IAnonymous97 {
    page?: number;
    results?: Results43[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous97) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results43.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous97 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous97();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous97 {
    page?: number;
    results?: Results43[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous98 implements IAnonymous98 {
    page?: number;
    results?: Results44[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous98) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results44.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous98 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous98();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous98 {
    page?: number;
    results?: Results44[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous99 implements IAnonymous99 {
    page?: number;
    results?: Results45[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous99) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results45.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous99 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous99();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous99 {
    page?: number;
    results?: Results45[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous100 implements IAnonymous100 {
    page?: number;
    results?: Results46[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous100) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results46.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous100 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous100();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous100 {
    page?: number;
    results?: Results46[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous101 implements IAnonymous101 {
    page?: number;
    results?: Results47[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous101) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results47.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous101 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous101();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous101 {
    page?: number;
    results?: Results47[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous102 implements IAnonymous102 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous102) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous102 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous102();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous102 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous103 implements IAnonymous103 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous103) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous103 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous103();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous103 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous104 implements IAnonymous104 {
    certifications?: Certifications;

    [key: string]: any;

    constructor(data?: IAnonymous104) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certifications = _data["certifications"] ? Certifications.fromJS(_data["certifications"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous104 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous104();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certifications"] = this.certifications ? this.certifications.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous104 {
    certifications?: Certifications;

    [key: string]: any;
}

export class Anonymous105 implements IAnonymous105 {
    certifications?: Certifications2;

    [key: string]: any;

    constructor(data?: IAnonymous105) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certifications = _data["certifications"] ? Certifications2.fromJS(_data["certifications"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous105 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous105();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certifications"] = this.certifications ? this.certifications.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous105 {
    certifications?: Certifications2;

    [key: string]: any;
}

export class Anonymous106 implements IAnonymous106 {
    results?: Results48[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous106) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results48.fromJS(item));
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous106 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous106();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["page"] = this.page;
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous106 {
    results?: Results48[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous107 implements IAnonymous107 {
    results?: Results49[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous107) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results49.fromJS(item));
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous107 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous107();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["page"] = this.page;
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous107 {
    results?: Results49[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous108 implements IAnonymous108 {
    results?: Results50[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous108) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results50.fromJS(item));
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous108 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous108();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["page"] = this.page;
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous108 {
    results?: Results50[];
    page?: number;
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous109 implements IAnonymous109 {
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    backdrop_path?: string;
    parts?: Parts[];

    [key: string]: any;

    constructor(data?: IAnonymous109) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["parts"])) {
                this.parts = [] as any;
                for (let item of _data["parts"])
                    this.parts!.push(Parts.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous109 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous109();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.parts)) {
            data["parts"] = [];
            for (let item of this.parts)
                data["parts"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous109 {
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    backdrop_path?: string;
    parts?: Parts[];

    [key: string]: any;
}

export class Anonymous110 implements IAnonymous110 {
    id?: number;
    backdrops?: Backdrops3[];
    posters?: Posters4[];

    [key: string]: any;

    constructor(data?: IAnonymous110) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["backdrops"])) {
                this.backdrops = [] as any;
                for (let item of _data["backdrops"])
                    this.backdrops!.push(Backdrops3.fromJS(item));
            }
            if (Array.isArray(_data["posters"])) {
                this.posters = [] as any;
                for (let item of _data["posters"])
                    this.posters!.push(Posters4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous110 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous110();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.backdrops)) {
            data["backdrops"] = [];
            for (let item of this.backdrops)
                data["backdrops"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.posters)) {
            data["posters"] = [];
            for (let item of this.posters)
                data["posters"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous110 {
    id?: number;
    backdrops?: Backdrops3[];
    posters?: Posters4[];

    [key: string]: any;
}

export class Anonymous111 implements IAnonymous111 {
    id?: number;
    translations?: Translations6[];

    [key: string]: any;

    constructor(data?: IAnonymous111) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["translations"])) {
                this.translations = [] as any;
                for (let item of _data["translations"])
                    this.translations!.push(Translations6.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous111 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous111();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.translations)) {
            data["translations"] = [];
            for (let item of this.translations)
                data["translations"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous111 {
    id?: number;
    translations?: Translations6[];

    [key: string]: any;
}

export class Anonymous112 implements IAnonymous112 {
    description?: string;
    headquarters?: string;
    homepage?: string;
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;
    parent_company?: any;

    [key: string]: any;

    constructor(data?: IAnonymous112) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.headquarters = _data["headquarters"];
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
            this.parent_company = _data["parent_company"];
        }
    }

    static fromJS(data: any): Anonymous112 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous112();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["headquarters"] = this.headquarters;
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        data["parent_company"] = this.parent_company;
        return data;
    }
}

export interface IAnonymous112 {
    description?: string;
    headquarters?: string;
    homepage?: string;
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;
    parent_company?: any;

    [key: string]: any;
}

export class Anonymous113 implements IAnonymous113 {
    id?: number;
    results?: Results51[];

    [key: string]: any;

    constructor(data?: IAnonymous113) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results51.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous113 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous113();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous113 {
    id?: number;
    results?: Results51[];

    [key: string]: any;
}

export class Anonymous114 implements IAnonymous114 {
    id?: number;
    logos?: Logos3[];

    [key: string]: any;

    constructor(data?: IAnonymous114) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos!.push(Logos3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous114 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous114();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous114 {
    id?: number;
    logos?: Logos3[];

    [key: string]: any;
}

export class Anonymous115 implements IAnonymous115 {
    credit_type?: string;
    department?: string;
    job?: string;
    media?: Media;
    media_type?: string;
    id?: string;
    person?: Person;

    [key: string]: any;

    constructor(data?: IAnonymous115) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.credit_type = _data["credit_type"];
            this.department = _data["department"];
            this.job = _data["job"];
            this.media = _data["media"] ? Media.fromJS(_data["media"]) : undefined as any;
            this.media_type = _data["media_type"];
            this.id = _data["id"];
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous115 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous115();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["credit_type"] = this.credit_type;
        data["department"] = this.department;
        data["job"] = this.job;
        data["media"] = this.media ? this.media.toJSON() : undefined as any;
        data["media_type"] = this.media_type;
        data["id"] = this.id;
        data["person"] = this.person ? this.person.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous115 {
    credit_type?: string;
    department?: string;
    job?: string;
    media?: Media;
    media_type?: string;
    id?: string;
    person?: Person;

    [key: string]: any;
}

export class Anonymous116 implements IAnonymous116 {
    genres?: Genres3[];

    [key: string]: any;

    constructor(data?: IAnonymous116) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genres3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous116 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous116();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous116 {
    genres?: Genres3[];

    [key: string]: any;
}

export class Anonymous117 implements IAnonymous117 {
    genres?: Genres4[];

    [key: string]: any;

    constructor(data?: IAnonymous117) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genres4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous117 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous117();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous117 {
    genres?: Genres4[];

    [key: string]: any;
}

export class Anonymous118 implements IAnonymous118 {
    page?: number;
    results?: Results52[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous118) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results52.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous118 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous118();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous118 {
    page?: number;
    results?: Results52[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous119 implements IAnonymous119 {
    page?: number;
    results?: Results53[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous119) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results53.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous119 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous119();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous119 {
    page?: number;
    results?: Results53[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous120 implements IAnonymous120 {
    page?: number;
    results?: Results54[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous120) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results54.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous120 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous120();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous120 {
    page?: number;
    results?: Results54[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous121 implements IAnonymous121 {
    results?: Results55[];

    [key: string]: any;

    constructor(data?: IAnonymous121) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results55.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous121 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous121();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous121 {
    results?: Results55[];

    [key: string]: any;
}

export class Anonymous122 implements IAnonymous122 {
    results?: Results56[];

    [key: string]: any;

    constructor(data?: IAnonymous122) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results56.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous122 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous122();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous122 {
    results?: Results56[];

    [key: string]: any;
}

export class Anonymous123 implements IAnonymous123 {
    results?: Results57[];

    [key: string]: any;

    constructor(data?: IAnonymous123) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results57.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous123 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous123();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous123 {
    results?: Results57[];

    [key: string]: any;
}

export class Anonymous124 implements IAnonymous124 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IAnonymous124) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Anonymous124 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous124();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAnonymous124 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Anonymous125 implements IAnonymous125 {
    id?: number;
    page?: number;
    results?: Results58[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous125) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results58.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous125 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous125();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous125 {
    id?: number;
    page?: number;
    results?: Results58[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous126 implements IAnonymous126 {
    created_by?: string;
    description?: string;
    favorite_count?: number;
    id?: string;
    items?: Items[];
    item_count?: number;
    iso_639_1?: string;
    name?: string;
    poster_path?: string;

    [key: string]: any;

    constructor(data?: IAnonymous126) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.favorite_count = 0;
            this.item_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.created_by = _data["created_by"];
            this.description = _data["description"];
            this.favorite_count = _data["favorite_count"] !== undefined ? _data["favorite_count"] : 0;
            this.id = _data["id"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items.fromJS(item));
            }
            this.item_count = _data["item_count"] !== undefined ? _data["item_count"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.poster_path = _data["poster_path"];
        }
    }

    static fromJS(data: any): Anonymous126 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous126();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["created_by"] = this.created_by;
        data["description"] = this.description;
        data["favorite_count"] = this.favorite_count;
        data["id"] = this.id;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        data["item_count"] = this.item_count;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["poster_path"] = this.poster_path;
        return data;
    }
}

export interface IAnonymous126 {
    created_by?: string;
    description?: string;
    favorite_count?: number;
    id?: string;
    items?: Items[];
    item_count?: number;
    iso_639_1?: string;
    name?: string;
    poster_path?: string;

    [key: string]: any;
}

export class Anonymous127 implements IAnonymous127 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous127) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous127 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous127();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous127 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous128 implements IAnonymous128 {
    id?: number;
    item_present?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous128) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.item_present = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.item_present = _data["item_present"] !== undefined ? _data["item_present"] : true;
        }
    }

    static fromJS(data: any): Anonymous128 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous128();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["item_present"] = this.item_present;
        return data;
    }
}

export interface IAnonymous128 {
    id?: number;
    item_present?: boolean;

    [key: string]: any;
}

export class Anonymous129 implements IAnonymous129 {
    status_message?: string;
    success?: boolean;
    status_code?: number;
    list_id?: number;

    [key: string]: any;

    constructor(data?: IAnonymous129) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
            this.status_code = 0;
            this.list_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_message = _data["status_message"];
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.list_id = _data["list_id"] !== undefined ? _data["list_id"] : 0;
        }
    }

    static fromJS(data: any): Anonymous129 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous129();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_message"] = this.status_message;
        data["success"] = this.success;
        data["status_code"] = this.status_code;
        data["list_id"] = this.list_id;
        return data;
    }
}

export interface IAnonymous129 {
    status_message?: string;
    success?: boolean;
    status_code?: number;
    list_id?: number;

    [key: string]: any;
}

export class Anonymous130 implements IAnonymous130 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous130) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous130 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous130();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous130 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous131 implements IAnonymous131 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous131) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous131 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous131();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous131 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous132 implements IAnonymous132 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous132) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous132 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous132();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous132 {
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous133 implements IAnonymous133 {
    headquarters?: string;
    homepage?: string;
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: IAnonymous133) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.headquarters = _data["headquarters"];
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Anonymous133 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous133();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["headquarters"] = this.headquarters;
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface IAnonymous133 {
    headquarters?: string;
    homepage?: string;
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Anonymous134 implements IAnonymous134 {
    id?: number;
    results?: Results59[];

    [key: string]: any;

    constructor(data?: IAnonymous134) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results59.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous134 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous134();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous134 {
    id?: number;
    results?: Results59[];

    [key: string]: any;
}

export class Anonymous135 implements IAnonymous135 {
    id?: number;
    logos?: Logos4[];

    [key: string]: any;

    constructor(data?: IAnonymous135) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["logos"])) {
                this.logos = [] as any;
                for (let item of _data["logos"])
                    this.logos!.push(Logos4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous135 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous135();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        if (Array.isArray(this.logos)) {
            data["logos"] = [];
            for (let item of this.logos)
                data["logos"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous135 {
    id?: number;
    logos?: Logos4[];

    [key: string]: any;
}

export class Anonymous136 implements IAnonymous136 {
    id?: string;
    author?: string;
    author_details?: Author_details;
    content?: string;
    created_at?: string;
    iso_639_1?: string;
    media_id?: number;
    media_title?: string;
    media_type?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;

    constructor(data?: IAnonymous136) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.media_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.author = _data["author"];
            this.author_details = _data["author_details"] ? Author_details.fromJS(_data["author_details"]) : undefined as any;
            this.content = _data["content"];
            this.created_at = _data["created_at"];
            this.iso_639_1 = _data["iso_639_1"];
            this.media_id = _data["media_id"] !== undefined ? _data["media_id"] : 0;
            this.media_title = _data["media_title"];
            this.media_type = _data["media_type"];
            this.updated_at = _data["updated_at"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Anonymous136 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous136();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["author"] = this.author;
        data["author_details"] = this.author_details ? this.author_details.toJSON() : undefined as any;
        data["content"] = this.content;
        data["created_at"] = this.created_at;
        data["iso_639_1"] = this.iso_639_1;
        data["media_id"] = this.media_id;
        data["media_title"] = this.media_title;
        data["media_type"] = this.media_type;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    }
}

export interface IAnonymous136 {
    id?: string;
    author?: string;
    author_details?: Author_details;
    content?: string;
    created_at?: string;
    iso_639_1?: string;
    media_id?: number;
    media_title?: string;
    media_type?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;
}

export class Anonymous137 implements IAnonymous137 {
    success?: boolean;
    status_code?: number;
    status_message?: string;

    [key: string]: any;

    constructor(data?: IAnonymous137) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
            this.status_code = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
        }
    }

    static fromJS(data: any): Anonymous137 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous137();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        return data;
    }
}

export interface IAnonymous137 {
    success?: boolean;
    status_code?: number;
    status_message?: string;

    [key: string]: any;
}

export class Anonymous138 implements IAnonymous138 {
    status_code?: number;
    status_message?: string;
    success?: boolean;

    [key: string]: any;

    constructor(data?: IAnonymous138) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.status_code = 0;
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.status_code = _data["status_code"] !== undefined ? _data["status_code"] : 0;
            this.status_message = _data["status_message"];
            this.success = _data["success"] !== undefined ? _data["success"] : true;
        }
    }

    static fromJS(data: any): Anonymous138 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous138();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["status_code"] = this.status_code;
        data["status_message"] = this.status_message;
        data["success"] = this.success;
        return data;
    }
}

export interface IAnonymous138 {
    status_code?: number;
    status_message?: string;
    success?: boolean;

    [key: string]: any;
}

export class Anonymous139 implements IAnonymous139 {
    id?: number;
    results?: Results60;

    [key: string]: any;

    constructor(data?: IAnonymous139) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.results = _data["results"] ? Results60.fromJS(_data["results"]) : undefined as any;
        }
    }

    static fromJS(data: any): Anonymous139 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous139();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["results"] = this.results ? this.results.toJSON() : undefined as any;
        return data;
    }
}

export interface IAnonymous139 {
    id?: number;
    results?: Results60;

    [key: string]: any;
}

export class Anonymous140 implements IAnonymous140 {
    iso_3166_1?: string;
    english_name?: string;
    native_name?: string;

    [key: string]: any;

    constructor(data?: IAnonymous140) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.english_name = _data["english_name"];
            this.native_name = _data["native_name"];
        }
    }

    static fromJS(data: any): Anonymous140 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous140();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["english_name"] = this.english_name;
        data["native_name"] = this.native_name;
        return data;
    }
}

export interface IAnonymous140 {
    iso_3166_1?: string;
    english_name?: string;
    native_name?: string;

    [key: string]: any;
}

export class Anonymous141 implements IAnonymous141 {
    department?: string;
    jobs?: string[];

    [key: string]: any;

    constructor(data?: IAnonymous141) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.department = _data["department"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous141 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous141();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["department"] = this.department;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item);
        }
        return data;
    }
}

export interface IAnonymous141 {
    department?: string;
    jobs?: string[];

    [key: string]: any;
}

export class Anonymous142 implements IAnonymous142 {
    iso_639_1?: string;
    english_name?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: IAnonymous142) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.english_name = _data["english_name"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Anonymous142 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous142();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_639_1"] = this.iso_639_1;
        data["english_name"] = this.english_name;
        data["name"] = this.name;
        return data;
    }
}

export interface IAnonymous142 {
    iso_639_1?: string;
    english_name?: string;
    name?: string;

    [key: string]: any;
}

export class Anonymous143 implements IAnonymous143 {
    iso_3166_1?: string;
    zones?: string[];

    [key: string]: any;

    constructor(data?: IAnonymous143) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            if (Array.isArray(_data["zones"])) {
                this.zones = [] as any;
                for (let item of _data["zones"])
                    this.zones!.push(item);
            }
        }
    }

    static fromJS(data: any): Anonymous143 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous143();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        if (Array.isArray(this.zones)) {
            data["zones"] = [];
            for (let item of this.zones)
                data["zones"].push(item);
        }
        return data;
    }
}

export interface IAnonymous143 {
    iso_3166_1?: string;
    zones?: string[];

    [key: string]: any;
}

export class Anonymous144 implements IAnonymous144 {
    success?: boolean;
    expires_at?: string;
    request_token?: string;

    [key: string]: any;

    constructor(data?: IAnonymous144) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.success = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.success = _data["success"] !== undefined ? _data["success"] : true;
            this.expires_at = _data["expires_at"];
            this.request_token = _data["request_token"];
        }
    }

    static fromJS(data: any): Anonymous144 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous144();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["success"] = this.success;
        data["expires_at"] = this.expires_at;
        data["request_token"] = this.request_token;
        return data;
    }
}

export interface IAnonymous144 {
    success?: boolean;
    expires_at?: string;
    request_token?: string;

    [key: string]: any;
}

export class Anonymous145 implements IAnonymous145 {
    adult?: boolean;
    also_known_as?: any[];
    biography?: string;
    birthday?: any;
    deathday?: any;
    gender?: number;
    homepage?: any;
    id?: number;
    imdb_id?: any;
    known_for_department?: any;
    name?: string;
    place_of_birth?: any;
    popularity?: number;
    profile_path?: any;

    [key: string]: any;

    constructor(data?: IAnonymous145) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            if (Array.isArray(_data["also_known_as"])) {
                this.also_known_as = [] as any;
                for (let item of _data["also_known_as"])
                    this.also_known_as!.push(item);
            }
            this.biography = _data["biography"];
            this.birthday = _data["birthday"];
            this.deathday = _data["deathday"];
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.homepage = _data["homepage"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.imdb_id = _data["imdb_id"];
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.place_of_birth = _data["place_of_birth"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Anonymous145 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous145();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        if (Array.isArray(this.also_known_as)) {
            data["also_known_as"] = [];
            for (let item of this.also_known_as)
                data["also_known_as"].push(item);
        }
        data["biography"] = this.biography;
        data["birthday"] = this.birthday;
        data["deathday"] = this.deathday;
        data["gender"] = this.gender;
        data["homepage"] = this.homepage;
        data["id"] = this.id;
        data["imdb_id"] = this.imdb_id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["place_of_birth"] = this.place_of_birth;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IAnonymous145 {
    adult?: boolean;
    also_known_as?: any[];
    biography?: string;
    birthday?: any;
    deathday?: any;
    gender?: number;
    homepage?: any;
    id?: number;
    imdb_id?: any;
    known_for_department?: any;
    name?: string;
    place_of_birth?: any;
    popularity?: number;
    profile_path?: any;

    [key: string]: any;
}

export class Anonymous146 implements IAnonymous146 {
    changes?: Changes5[];

    [key: string]: any;

    constructor(data?: IAnonymous146) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["changes"])) {
                this.changes = [] as any;
                for (let item of _data["changes"])
                    this.changes!.push(Changes5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous146 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous146();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.changes)) {
            data["changes"] = [];
            for (let item of this.changes)
                data["changes"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAnonymous146 {
    changes?: Changes5[];

    [key: string]: any;
}

export class Anonymous147 implements IAnonymous147 {
    description?: string;
    episode_count?: number;
    group_count?: number;
    groups?: Groups[];
    id?: string;
    name?: string;
    network?: Network;
    type?: number;

    [key: string]: any;

    constructor(data?: IAnonymous147) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
            this.group_count = 0;
            this.type = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.group_count = _data["group_count"] !== undefined ? _data["group_count"] : 0;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(Groups.fromJS(item));
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.network = _data["network"] ? Network.fromJS(_data["network"]) : undefined as any;
            this.type = _data["type"] !== undefined ? _data["type"] : 0;
        }
    }

    static fromJS(data: any): Anonymous147 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous147();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["episode_count"] = this.episode_count;
        data["group_count"] = this.group_count;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item ? item.toJSON() : undefined as any);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["network"] = this.network ? this.network.toJSON() : undefined as any;
        data["type"] = this.type;
        return data;
    }
}

export interface IAnonymous147 {
    description?: string;
    episode_count?: number;
    group_count?: number;
    groups?: Groups[];
    id?: string;
    name?: string;
    network?: Network;
    type?: number;

    [key: string]: any;
}

export class Anonymous148 implements IAnonymous148 {
    page?: number;
    results?: Results61[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous148) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results61.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous148 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous148();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous148 {
    page?: number;
    results?: Results61[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous149 implements IAnonymous149 {
    page?: number;
    results?: Results62[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous149) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results62.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous149 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous149();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous149 {
    page?: number;
    results?: Results62[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous150 implements IAnonymous150 {
    page?: number;
    results?: Results63[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous150) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results63.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous150 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous150();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous150 {
    page?: number;
    results?: Results63[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Anonymous151 implements IAnonymous151 {
    id?: number;
    page?: number;
    results?: Results64[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;

    constructor(data?: IAnonymous151) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.page = 0;
            this.total_pages = 0;
            this.total_results = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.page = _data["page"] !== undefined ? _data["page"] : 0;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Results64.fromJS(item));
            }
            this.total_pages = _data["total_pages"] !== undefined ? _data["total_pages"] : 0;
            this.total_results = _data["total_results"] !== undefined ? _data["total_results"] : 0;
        }
    }

    static fromJS(data: any): Anonymous151 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous151();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["page"] = this.page;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_pages"] = this.total_pages;
        data["total_results"] = this.total_results;
        return data;
    }
}

export interface IAnonymous151 {
    id?: number;
    page?: number;
    results?: Results64[];
    total_pages?: number;
    total_results?: number;

    [key: string]: any;
}

export class Results implements IResults {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results {
        data = typeof data === 'object' ? data : {};
        let result = new Results();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results2 implements IResults2 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results2 {
        data = typeof data === 'object' ? data : {};
        let result = new Results2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults2 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Genres implements IGenres {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IGenres) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Genres {
        data = typeof data === 'object' ? data : {};
        let result = new Genres();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenres {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Production_companies implements IProduction_companies {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: IProduction_companies) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Production_companies {
        data = typeof data === 'object' ? data : {};
        let result = new Production_companies();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface IProduction_companies {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Production_countries implements IProduction_countries {
    iso_3166_1?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: IProduction_countries) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Production_countries {
        data = typeof data === 'object' ? data : {};
        let result = new Production_countries();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        return data;
    }
}

export interface IProduction_countries {
    iso_3166_1?: string;
    name?: string;

    [key: string]: any;
}

export class Spoken_languages implements ISpoken_languages {
    english_name?: string;
    iso_639_1?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: ISpoken_languages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.english_name = _data["english_name"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Spoken_languages {
        data = typeof data === 'object' ? data : {};
        let result = new Spoken_languages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["english_name"] = this.english_name;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        return data;
    }
}

export interface ISpoken_languages {
    english_name?: string;
    iso_639_1?: string;
    name?: string;

    [key: string]: any;
}

export class Created_by implements ICreated_by {
    id?: number;
    credit_id?: string;
    name?: string;
    gender?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: ICreated_by) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.gender = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.credit_id = _data["credit_id"];
            this.name = _data["name"];
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Created_by {
        data = typeof data === 'object' ? data : {};
        let result = new Created_by();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["credit_id"] = this.credit_id;
        data["name"] = this.name;
        data["gender"] = this.gender;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface ICreated_by {
    id?: number;
    credit_id?: string;
    name?: string;
    gender?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Genres2 implements IGenres2 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IGenres2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Genres2 {
        data = typeof data === 'object' ? data : {};
        let result = new Genres2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenres2 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Last_episode_to_air implements ILast_episode_to_air {
    id?: number;
    name?: string;
    overview?: string;
    vote_average?: number;
    vote_count?: number;
    air_date?: string;
    episode_number?: number;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;

    [key: string]: any;

    constructor(data?: ILast_episode_to_air) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.episode_number = 0;
            this.runtime = 0;
            this.season_number = 0;
            this.show_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
        }
    }

    static fromJS(data: any): Last_episode_to_air {
        data = typeof data === 'object' ? data : {};
        let result = new Last_episode_to_air();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        return data;
    }
}

export interface ILast_episode_to_air {
    id?: number;
    name?: string;
    overview?: string;
    vote_average?: number;
    vote_count?: number;
    air_date?: string;
    episode_number?: number;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;

    [key: string]: any;
}

export class Networks implements INetworks {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: INetworks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Networks {
        data = typeof data === 'object' ? data : {};
        let result = new Networks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface INetworks {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Production_companies2 implements IProduction_companies2 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: IProduction_companies2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Production_companies2 {
        data = typeof data === 'object' ? data : {};
        let result = new Production_companies2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface IProduction_companies2 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Production_countries2 implements IProduction_countries2 {
    iso_3166_1?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: IProduction_countries2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Production_countries2 {
        data = typeof data === 'object' ? data : {};
        let result = new Production_countries2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        return data;
    }
}

export interface IProduction_countries2 {
    iso_3166_1?: string;
    name?: string;

    [key: string]: any;
}

export class Seasons implements ISeasons {
    air_date?: string;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    season_number?: number;
    vote_average?: number;

    [key: string]: any;

    constructor(data?: ISeasons) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
            this.id = 0;
            this.season_number = 0;
            this.vote_average = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
        }
    }

    static fromJS(data: any): Seasons {
        data = typeof data === 'object' ? data : {};
        let result = new Seasons();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_count"] = this.episode_count;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["season_number"] = this.season_number;
        data["vote_average"] = this.vote_average;
        return data;
    }
}

export interface ISeasons {
    air_date?: string;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    season_number?: number;
    vote_average?: number;

    [key: string]: any;
}

export class Spoken_languages2 implements ISpoken_languages2 {
    english_name?: string;
    iso_639_1?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: ISpoken_languages2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.english_name = _data["english_name"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Spoken_languages2 {
        data = typeof data === 'object' ? data : {};
        let result = new Spoken_languages2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["english_name"] = this.english_name;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        return data;
    }
}

export interface ISpoken_languages2 {
    english_name?: string;
    iso_639_1?: string;
    name?: string;

    [key: string]: any;
}

export class Results3 implements IResults3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results3 {
        data = typeof data === 'object' ? data : {};
        let result = new Results3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results4 implements IResults4 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results4 {
        data = typeof data === 'object' ? data : {};
        let result = new Results4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults4 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results5 implements IResults5 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    known_for?: Known_for[];

    [key: string]: any;

    constructor(data?: IResults5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["known_for"])) {
                this.known_for = [] as any;
                for (let item of _data["known_for"])
                    this.known_for!.push(Known_for.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Results5 {
        data = typeof data === 'object' ? data : {};
        let result = new Results5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.known_for)) {
            data["known_for"] = [];
            for (let item of this.known_for)
                data["known_for"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IResults5 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    known_for?: Known_for[];

    [key: string]: any;
}

export class Images implements IImages {
    base_url?: string;
    secure_base_url?: string;
    backdrop_sizes?: string[];
    logo_sizes?: string[];
    poster_sizes?: string[];
    profile_sizes?: string[];
    still_sizes?: string[];

    [key: string]: any;

    constructor(data?: IImages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.base_url = _data["base_url"];
            this.secure_base_url = _data["secure_base_url"];
            if (Array.isArray(_data["backdrop_sizes"])) {
                this.backdrop_sizes = [] as any;
                for (let item of _data["backdrop_sizes"])
                    this.backdrop_sizes!.push(item);
            }
            if (Array.isArray(_data["logo_sizes"])) {
                this.logo_sizes = [] as any;
                for (let item of _data["logo_sizes"])
                    this.logo_sizes!.push(item);
            }
            if (Array.isArray(_data["poster_sizes"])) {
                this.poster_sizes = [] as any;
                for (let item of _data["poster_sizes"])
                    this.poster_sizes!.push(item);
            }
            if (Array.isArray(_data["profile_sizes"])) {
                this.profile_sizes = [] as any;
                for (let item of _data["profile_sizes"])
                    this.profile_sizes!.push(item);
            }
            if (Array.isArray(_data["still_sizes"])) {
                this.still_sizes = [] as any;
                for (let item of _data["still_sizes"])
                    this.still_sizes!.push(item);
            }
        }
    }

    static fromJS(data: any): Images {
        data = typeof data === 'object' ? data : {};
        let result = new Images();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["base_url"] = this.base_url;
        data["secure_base_url"] = this.secure_base_url;
        if (Array.isArray(this.backdrop_sizes)) {
            data["backdrop_sizes"] = [];
            for (let item of this.backdrop_sizes)
                data["backdrop_sizes"].push(item);
        }
        if (Array.isArray(this.logo_sizes)) {
            data["logo_sizes"] = [];
            for (let item of this.logo_sizes)
                data["logo_sizes"].push(item);
        }
        if (Array.isArray(this.poster_sizes)) {
            data["poster_sizes"] = [];
            for (let item of this.poster_sizes)
                data["poster_sizes"].push(item);
        }
        if (Array.isArray(this.profile_sizes)) {
            data["profile_sizes"] = [];
            for (let item of this.profile_sizes)
                data["profile_sizes"].push(item);
        }
        if (Array.isArray(this.still_sizes)) {
            data["still_sizes"] = [];
            for (let item of this.still_sizes)
                data["still_sizes"].push(item);
        }
        return data;
    }
}

export interface IImages {
    base_url?: string;
    secure_base_url?: string;
    backdrop_sizes?: string[];
    logo_sizes?: string[];
    poster_sizes?: string[];
    profile_sizes?: string[];
    still_sizes?: string[];

    [key: string]: any;
}

export class Episodes implements IEpisodes {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    crew?: Crew11[];
    guest_stars?: Guest_stars3[];

    [key: string]: any;

    constructor(data?: IEpisodes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_number = 0;
            this.id = 0;
            this.runtime = 0;
            this.season_number = 0;
            this.show_id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            if (Array.isArray(_data["crew"])) {
                this.crew = [] as any;
                for (let item of _data["crew"])
                    this.crew!.push(Crew11.fromJS(item));
            }
            if (Array.isArray(_data["guest_stars"])) {
                this.guest_stars = [] as any;
                for (let item of _data["guest_stars"])
                    this.guest_stars!.push(Guest_stars3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Episodes {
        data = typeof data === 'object' ? data : {};
        let result = new Episodes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        if (Array.isArray(this.crew)) {
            data["crew"] = [];
            for (let item of this.crew)
                data["crew"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.guest_stars)) {
            data["guest_stars"] = [];
            for (let item of this.guest_stars)
                data["guest_stars"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEpisodes {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    crew?: Crew11[];
    guest_stars?: Guest_stars3[];

    [key: string]: any;
}

export class Crew implements ICrew {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: ICrew) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.department = _data["department"];
            this.job = _data["job"];
            this.credit_id = _data["credit_id"];
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Crew {
        data = typeof data === 'object' ? data : {};
        let result = new Crew();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["department"] = this.department;
        data["job"] = this.job;
        data["credit_id"] = this.credit_id;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface ICrew {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Guest_stars implements IGuest_stars {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IGuest_stars) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Guest_stars {
        data = typeof data === 'object' ? data : {};
        let result = new Guest_stars();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IGuest_stars {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Results6 implements IResults6 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.backdrop_path = _data["backdrop_path"];
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results6 {
        data = typeof data === 'object' ? data : {};
        let result = new Results6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["backdrop_path"] = this.backdrop_path;
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults6 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Backdrops implements IBackdrops {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IBackdrops) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Backdrops {
        data = typeof data === 'object' ? data : {};
        let result = new Backdrops();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IBackdrops {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Logos implements ILogos {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: ILogos) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Logos {
        data = typeof data === 'object' ? data : {};
        let result = new Logos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface ILogos {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Posters implements IPosters {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IPosters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Posters {
        data = typeof data === 'object' ? data : {};
        let result = new Posters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IPosters {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Backdrops2 implements IBackdrops2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IBackdrops2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Backdrops2 {
        data = typeof data === 'object' ? data : {};
        let result = new Backdrops2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IBackdrops2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Logos2 implements ILogos2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: ILogos2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Logos2 {
        data = typeof data === 'object' ? data : {};
        let result = new Logos2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface ILogos2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Posters2 implements IPosters2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IPosters2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Posters2 {
        data = typeof data === 'object' ? data : {};
        let result = new Posters2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IPosters2 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Posters3 implements IPosters3 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IPosters3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Posters3 {
        data = typeof data === 'object' ? data : {};
        let result = new Posters3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IPosters3 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Stills implements IStills {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IStills) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Stills {
        data = typeof data === 'object' ? data : {};
        let result = new Stills();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IStills {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Results7 implements IResults7 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results7 {
        data = typeof data === 'object' ? data : {};
        let result = new Results7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults7 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results8 implements IResults8 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results8 {
        data = typeof data === 'object' ? data : {};
        let result = new Results8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults8 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results9 implements IResults9 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];

    [key: string]: any;

    constructor(data?: IResults9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.first_air_date = _data["first_air_date"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
        }
    }

    static fromJS(data: any): Results9 {
        data = typeof data === 'object' ? data : {};
        let result = new Results9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["first_air_date"] = this.first_air_date;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        return data;
    }
}

export interface IResults9 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];

    [key: string]: any;
}

export class Rated implements IRated {
    value?: number;

    [key: string]: any;

    constructor(data?: IRated) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.value = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] !== undefined ? _data["value"] : 0;
        }
    }

    static fromJS(data: any): Rated {
        data = typeof data === 'object' ? data : {};
        let result = new Rated();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        return data;
    }
}

export interface IRated {
    value?: number;

    [key: string]: any;
}

export class Rated2 implements IRated2 {
    value?: number;

    [key: string]: any;

    constructor(data?: IRated2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.value = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] !== undefined ? _data["value"] : 0;
        }
    }

    static fromJS(data: any): Rated2 {
        data = typeof data === 'object' ? data : {};
        let result = new Rated2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        return data;
    }
}

export interface IRated2 {
    value?: number;

    [key: string]: any;
}

export class Rated3 implements IRated3 {
    value?: number;

    [key: string]: any;

    constructor(data?: IRated3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.value = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] !== undefined ? _data["value"] : 0;
        }
    }

    static fromJS(data: any): Rated3 {
        data = typeof data === 'object' ? data : {};
        let result = new Rated3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        return data;
    }
}

export interface IRated3 {
    value?: number;

    [key: string]: any;
}

export class Results10 implements IResults10 {
    adult?: boolean;
    id?: number;
    name?: string;
    original_name?: string;
    media_type?: string;
    popularity?: number;
    gender?: number;
    known_for_department?: string;
    profile_path?: string;
    known_for?: Known_for2[];

    [key: string]: any;

    constructor(data?: IResults10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.gender = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.media_type = _data["media_type"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["known_for"])) {
                this.known_for = [] as any;
                for (let item of _data["known_for"])
                    this.known_for!.push(Known_for2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Results10 {
        data = typeof data === 'object' ? data : {};
        let result = new Results10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["media_type"] = this.media_type;
        data["popularity"] = this.popularity;
        data["gender"] = this.gender;
        data["known_for_department"] = this.known_for_department;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.known_for)) {
            data["known_for"] = [];
            for (let item of this.known_for)
                data["known_for"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IResults10 {
    adult?: boolean;
    id?: number;
    name?: string;
    original_name?: string;
    media_type?: string;
    popularity?: number;
    gender?: number;
    known_for_department?: string;
    profile_path?: string;
    known_for?: Known_for2[];

    [key: string]: any;
}

export class Titles implements ITitles {
    iso_3166_1?: string;
    title?: string;
    type?: string;

    [key: string]: any;

    constructor(data?: ITitles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Titles {
        data = typeof data === 'object' ? data : {};
        let result = new Titles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface ITitles {
    iso_3166_1?: string;
    title?: string;
    type?: string;

    [key: string]: any;
}

export class Changes implements IChanges {
    key?: string;
    items?: Items2[];

    [key: string]: any;

    constructor(data?: IChanges) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.key = _data["key"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Changes {
        data = typeof data === 'object' ? data : {};
        let result = new Changes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["key"] = this.key;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IChanges {
    key?: string;
    items?: Items2[];

    [key: string]: any;
}

export class Cast implements ICast {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    cast_id?: number;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.cast_id = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.cast_id = _data["cast_id"] !== undefined ? _data["cast_id"] : 0;
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast {
        data = typeof data === 'object' ? data : {};
        let result = new Cast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["cast_id"] = this.cast_id;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    cast_id?: number;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;
}

export class Crew2 implements ICrew2 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;

    constructor(data?: ICrew2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.job = _data["job"];
        }
    }

    static fromJS(data: any): Crew2 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["job"] = this.job;
        return data;
    }
}

export interface ICrew2 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;
}

export class Keywords implements IKeywords {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IKeywords) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Keywords {
        data = typeof data === 'object' ? data : {};
        let result = new Keywords();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IKeywords {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Results11 implements IResults11 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    list_type?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;

    constructor(data?: IResults11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.favorite_count = 0;
            this.id = 0;
            this.item_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.favorite_count = _data["favorite_count"] !== undefined ? _data["favorite_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.item_count = _data["item_count"] !== undefined ? _data["item_count"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.list_type = _data["list_type"];
            this.name = _data["name"];
            this.poster_path = _data["poster_path"];
        }
    }

    static fromJS(data: any): Results11 {
        data = typeof data === 'object' ? data : {};
        let result = new Results11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["favorite_count"] = this.favorite_count;
        data["id"] = this.id;
        data["item_count"] = this.item_count;
        data["iso_639_1"] = this.iso_639_1;
        data["list_type"] = this.list_type;
        data["name"] = this.name;
        data["poster_path"] = this.poster_path;
        return data;
    }
}

export interface IResults11 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    list_type?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;
}

export class Results12 implements IResults12 {
    iso_3166_1?: string;
    release_dates?: Release_dates[];

    [key: string]: any;

    constructor(data?: IResults12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            if (Array.isArray(_data["release_dates"])) {
                this.release_dates = [] as any;
                for (let item of _data["release_dates"])
                    this.release_dates!.push(Release_dates.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Results12 {
        data = typeof data === 'object' ? data : {};
        let result = new Results12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        if (Array.isArray(this.release_dates)) {
            data["release_dates"] = [];
            for (let item of this.release_dates)
                data["release_dates"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IResults12 {
    iso_3166_1?: string;
    release_dates?: Release_dates[];

    [key: string]: any;
}

export class Results13 implements IResults13 {
    author?: string;
    author_details?: Author_details2;
    content?: string;
    created_at?: string;
    id?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;

    constructor(data?: IResults13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.author = _data["author"];
            this.author_details = _data["author_details"] ? Author_details2.fromJS(_data["author_details"]) : undefined as any;
            this.content = _data["content"];
            this.created_at = _data["created_at"];
            this.id = _data["id"];
            this.updated_at = _data["updated_at"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Results13 {
        data = typeof data === 'object' ? data : {};
        let result = new Results13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["author"] = this.author;
        data["author_details"] = this.author_details ? this.author_details.toJSON() : undefined as any;
        data["content"] = this.content;
        data["created_at"] = this.created_at;
        data["id"] = this.id;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    }
}

export interface IResults13 {
    author?: string;
    author_details?: Author_details2;
    content?: string;
    created_at?: string;
    id?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;
}

export class Results14 implements IResults14 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results14 {
        data = typeof data === 'object' ? data : {};
        let result = new Results14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults14 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Translations implements ITranslations {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data;

    [key: string]: any;

    constructor(data?: ITranslations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations {
        data = typeof data === 'object' ? data : {};
        let result = new Translations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data;

    [key: string]: any;
}

export class Results15 implements IResults15 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;

    constructor(data?: IResults15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.size = 0;
            this.official = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.site = _data["site"];
            this.size = _data["size"] !== undefined ? _data["size"] : 0;
            this.type = _data["type"];
            this.official = _data["official"] !== undefined ? _data["official"] : true;
            this.published_at = _data["published_at"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Results15 {
        data = typeof data === 'object' ? data : {};
        let result = new Results15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["key"] = this.key;
        data["site"] = this.site;
        data["size"] = this.size;
        data["type"] = this.type;
        data["official"] = this.official;
        data["published_at"] = this.published_at;
        data["id"] = this.id;
        return data;
    }
}

export interface IResults15 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;
}

export class Results16 implements IResults16 {
    aE?: AE;
    aL?: AL;
    aR?: AR;
    aT?: AT;
    aU?: AU;
    bA?: BA;
    bB?: BB;
    bE?: BE;
    bG?: BG;
    bH?: BH;
    bO?: BO;
    bR?: BR;
    bS?: BS;
    cA?: CA;
    cH?: CH;
    cL?: CL;
    cO?: CO;
    cR?: CR;
    cV?: CV;
    cZ?: CZ;
    dE?: DE;
    dK?: DK;
    dO?: DO;
    eC?: EC;
    eE?: EE;
    eG?: EG;
    eS?: ES;
    fI?: FI;
    fJ?: FJ;
    fR?: FR;
    gB?: GB;
    gF?: GF;
    gI?: GI;
    gR?: GR;
    gT?: GT;
    hK?: HK;
    hN?: HN;
    hR?: HR;
    hU?: HU;
    iD?: ID;
    iE?: IE;
    iL?: IL;
    iN?: IN;
    iQ?: IQ;
    iS?: IS;
    iT?: IT;
    jM?: JM;
    jO?: JO;
    jP?: JP;
    kR?: KR;
    kW?: KW;
    lB?: LB;
    lI?: LI;
    lT?: LT;
    lV?: LV;
    mD?: MD;
    mK?: MK;
    mT?: MT;
    mU?: MU;
    mX?: MX;
    mY?: MY;
    mZ?: MZ;
    nL?: NL;
    nO?: NO;
    nZ?: NZ;
    oM?: OM;
    pA?: PA;
    pE?: PE;
    pH?: PH;
    pK?: PK;
    pL?: PL;
    pS?: PS;
    pT?: PT;
    pY?: PY;
    qA?: QA;
    rO?: RO;
    rS?: RS;
    rU?: RU;
    sA?: SA;
    sE?: SE;
    sG?: SG;
    sI?: SI;
    sK?: SK;
    sM?: SM;
    sV?: SV;
    tH?: TH;
    tR?: TR;
    tT?: TT;
    tW?: TW;
    uG?: UG;
    uS?: US;
    uY?: UY;
    vE?: VE;
    yE?: YE;
    zA?: ZA;

    [key: string]: any;

    constructor(data?: IResults16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aE = _data["AE"] ? AE.fromJS(_data["AE"]) : undefined as any;
            this.aL = _data["AL"] ? AL.fromJS(_data["AL"]) : undefined as any;
            this.aR = _data["AR"] ? AR.fromJS(_data["AR"]) : undefined as any;
            this.aT = _data["AT"] ? AT.fromJS(_data["AT"]) : undefined as any;
            this.aU = _data["AU"] ? AU.fromJS(_data["AU"]) : undefined as any;
            this.bA = _data["BA"] ? BA.fromJS(_data["BA"]) : undefined as any;
            this.bB = _data["BB"] ? BB.fromJS(_data["BB"]) : undefined as any;
            this.bE = _data["BE"] ? BE.fromJS(_data["BE"]) : undefined as any;
            this.bG = _data["BG"] ? BG.fromJS(_data["BG"]) : undefined as any;
            this.bH = _data["BH"] ? BH.fromJS(_data["BH"]) : undefined as any;
            this.bO = _data["BO"] ? BO.fromJS(_data["BO"]) : undefined as any;
            this.bR = _data["BR"] ? BR.fromJS(_data["BR"]) : undefined as any;
            this.bS = _data["BS"] ? BS.fromJS(_data["BS"]) : undefined as any;
            this.cA = _data["CA"] ? CA.fromJS(_data["CA"]) : undefined as any;
            this.cH = _data["CH"] ? CH.fromJS(_data["CH"]) : undefined as any;
            this.cL = _data["CL"] ? CL.fromJS(_data["CL"]) : undefined as any;
            this.cO = _data["CO"] ? CO.fromJS(_data["CO"]) : undefined as any;
            this.cR = _data["CR"] ? CR.fromJS(_data["CR"]) : undefined as any;
            this.cV = _data["CV"] ? CV.fromJS(_data["CV"]) : undefined as any;
            this.cZ = _data["CZ"] ? CZ.fromJS(_data["CZ"]) : undefined as any;
            this.dE = _data["DE"] ? DE.fromJS(_data["DE"]) : undefined as any;
            this.dK = _data["DK"] ? DK.fromJS(_data["DK"]) : undefined as any;
            this.dO = _data["DO"] ? DO.fromJS(_data["DO"]) : undefined as any;
            this.eC = _data["EC"] ? EC.fromJS(_data["EC"]) : undefined as any;
            this.eE = _data["EE"] ? EE.fromJS(_data["EE"]) : undefined as any;
            this.eG = _data["EG"] ? EG.fromJS(_data["EG"]) : undefined as any;
            this.eS = _data["ES"] ? ES.fromJS(_data["ES"]) : undefined as any;
            this.fI = _data["FI"] ? FI.fromJS(_data["FI"]) : undefined as any;
            this.fJ = _data["FJ"] ? FJ.fromJS(_data["FJ"]) : undefined as any;
            this.fR = _data["FR"] ? FR.fromJS(_data["FR"]) : undefined as any;
            this.gB = _data["GB"] ? GB.fromJS(_data["GB"]) : undefined as any;
            this.gF = _data["GF"] ? GF.fromJS(_data["GF"]) : undefined as any;
            this.gI = _data["GI"] ? GI.fromJS(_data["GI"]) : undefined as any;
            this.gR = _data["GR"] ? GR.fromJS(_data["GR"]) : undefined as any;
            this.gT = _data["GT"] ? GT.fromJS(_data["GT"]) : undefined as any;
            this.hK = _data["HK"] ? HK.fromJS(_data["HK"]) : undefined as any;
            this.hN = _data["HN"] ? HN.fromJS(_data["HN"]) : undefined as any;
            this.hR = _data["HR"] ? HR.fromJS(_data["HR"]) : undefined as any;
            this.hU = _data["HU"] ? HU.fromJS(_data["HU"]) : undefined as any;
            this.iD = _data["ID"] ? ID.fromJS(_data["ID"]) : undefined as any;
            this.iE = _data["IE"] ? IE.fromJS(_data["IE"]) : undefined as any;
            this.iL = _data["IL"] ? IL.fromJS(_data["IL"]) : undefined as any;
            this.iN = _data["IN"] ? IN.fromJS(_data["IN"]) : undefined as any;
            this.iQ = _data["IQ"] ? IQ.fromJS(_data["IQ"]) : undefined as any;
            this.iS = _data["IS"] ? IS.fromJS(_data["IS"]) : undefined as any;
            this.iT = _data["IT"] ? IT.fromJS(_data["IT"]) : undefined as any;
            this.jM = _data["JM"] ? JM.fromJS(_data["JM"]) : undefined as any;
            this.jO = _data["JO"] ? JO.fromJS(_data["JO"]) : undefined as any;
            this.jP = _data["JP"] ? JP.fromJS(_data["JP"]) : undefined as any;
            this.kR = _data["KR"] ? KR.fromJS(_data["KR"]) : undefined as any;
            this.kW = _data["KW"] ? KW.fromJS(_data["KW"]) : undefined as any;
            this.lB = _data["LB"] ? LB.fromJS(_data["LB"]) : undefined as any;
            this.lI = _data["LI"] ? LI.fromJS(_data["LI"]) : undefined as any;
            this.lT = _data["LT"] ? LT.fromJS(_data["LT"]) : undefined as any;
            this.lV = _data["LV"] ? LV.fromJS(_data["LV"]) : undefined as any;
            this.mD = _data["MD"] ? MD.fromJS(_data["MD"]) : undefined as any;
            this.mK = _data["MK"] ? MK.fromJS(_data["MK"]) : undefined as any;
            this.mT = _data["MT"] ? MT.fromJS(_data["MT"]) : undefined as any;
            this.mU = _data["MU"] ? MU.fromJS(_data["MU"]) : undefined as any;
            this.mX = _data["MX"] ? MX.fromJS(_data["MX"]) : undefined as any;
            this.mY = _data["MY"] ? MY.fromJS(_data["MY"]) : undefined as any;
            this.mZ = _data["MZ"] ? MZ.fromJS(_data["MZ"]) : undefined as any;
            this.nL = _data["NL"] ? NL.fromJS(_data["NL"]) : undefined as any;
            this.nO = _data["NO"] ? NO.fromJS(_data["NO"]) : undefined as any;
            this.nZ = _data["NZ"] ? NZ.fromJS(_data["NZ"]) : undefined as any;
            this.oM = _data["OM"] ? OM.fromJS(_data["OM"]) : undefined as any;
            this.pA = _data["PA"] ? PA.fromJS(_data["PA"]) : undefined as any;
            this.pE = _data["PE"] ? PE.fromJS(_data["PE"]) : undefined as any;
            this.pH = _data["PH"] ? PH.fromJS(_data["PH"]) : undefined as any;
            this.pK = _data["PK"] ? PK.fromJS(_data["PK"]) : undefined as any;
            this.pL = _data["PL"] ? PL.fromJS(_data["PL"]) : undefined as any;
            this.pS = _data["PS"] ? PS.fromJS(_data["PS"]) : undefined as any;
            this.pT = _data["PT"] ? PT.fromJS(_data["PT"]) : undefined as any;
            this.pY = _data["PY"] ? PY.fromJS(_data["PY"]) : undefined as any;
            this.qA = _data["QA"] ? QA.fromJS(_data["QA"]) : undefined as any;
            this.rO = _data["RO"] ? RO.fromJS(_data["RO"]) : undefined as any;
            this.rS = _data["RS"] ? RS.fromJS(_data["RS"]) : undefined as any;
            this.rU = _data["RU"] ? RU.fromJS(_data["RU"]) : undefined as any;
            this.sA = _data["SA"] ? SA.fromJS(_data["SA"]) : undefined as any;
            this.sE = _data["SE"] ? SE.fromJS(_data["SE"]) : undefined as any;
            this.sG = _data["SG"] ? SG.fromJS(_data["SG"]) : undefined as any;
            this.sI = _data["SI"] ? SI.fromJS(_data["SI"]) : undefined as any;
            this.sK = _data["SK"] ? SK.fromJS(_data["SK"]) : undefined as any;
            this.sM = _data["SM"] ? SM.fromJS(_data["SM"]) : undefined as any;
            this.sV = _data["SV"] ? SV.fromJS(_data["SV"]) : undefined as any;
            this.tH = _data["TH"] ? TH.fromJS(_data["TH"]) : undefined as any;
            this.tR = _data["TR"] ? TR.fromJS(_data["TR"]) : undefined as any;
            this.tT = _data["TT"] ? TT.fromJS(_data["TT"]) : undefined as any;
            this.tW = _data["TW"] ? TW.fromJS(_data["TW"]) : undefined as any;
            this.uG = _data["UG"] ? UG.fromJS(_data["UG"]) : undefined as any;
            this.uS = _data["US"] ? US.fromJS(_data["US"]) : undefined as any;
            this.uY = _data["UY"] ? UY.fromJS(_data["UY"]) : undefined as any;
            this.vE = _data["VE"] ? VE.fromJS(_data["VE"]) : undefined as any;
            this.yE = _data["YE"] ? YE.fromJS(_data["YE"]) : undefined as any;
            this.zA = _data["ZA"] ? ZA.fromJS(_data["ZA"]) : undefined as any;
        }
    }

    static fromJS(data: any): Results16 {
        data = typeof data === 'object' ? data : {};
        let result = new Results16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["AE"] = this.aE ? this.aE.toJSON() : undefined as any;
        data["AL"] = this.aL ? this.aL.toJSON() : undefined as any;
        data["AR"] = this.aR ? this.aR.toJSON() : undefined as any;
        data["AT"] = this.aT ? this.aT.toJSON() : undefined as any;
        data["AU"] = this.aU ? this.aU.toJSON() : undefined as any;
        data["BA"] = this.bA ? this.bA.toJSON() : undefined as any;
        data["BB"] = this.bB ? this.bB.toJSON() : undefined as any;
        data["BE"] = this.bE ? this.bE.toJSON() : undefined as any;
        data["BG"] = this.bG ? this.bG.toJSON() : undefined as any;
        data["BH"] = this.bH ? this.bH.toJSON() : undefined as any;
        data["BO"] = this.bO ? this.bO.toJSON() : undefined as any;
        data["BR"] = this.bR ? this.bR.toJSON() : undefined as any;
        data["BS"] = this.bS ? this.bS.toJSON() : undefined as any;
        data["CA"] = this.cA ? this.cA.toJSON() : undefined as any;
        data["CH"] = this.cH ? this.cH.toJSON() : undefined as any;
        data["CL"] = this.cL ? this.cL.toJSON() : undefined as any;
        data["CO"] = this.cO ? this.cO.toJSON() : undefined as any;
        data["CR"] = this.cR ? this.cR.toJSON() : undefined as any;
        data["CV"] = this.cV ? this.cV.toJSON() : undefined as any;
        data["CZ"] = this.cZ ? this.cZ.toJSON() : undefined as any;
        data["DE"] = this.dE ? this.dE.toJSON() : undefined as any;
        data["DK"] = this.dK ? this.dK.toJSON() : undefined as any;
        data["DO"] = this.dO ? this.dO.toJSON() : undefined as any;
        data["EC"] = this.eC ? this.eC.toJSON() : undefined as any;
        data["EE"] = this.eE ? this.eE.toJSON() : undefined as any;
        data["EG"] = this.eG ? this.eG.toJSON() : undefined as any;
        data["ES"] = this.eS ? this.eS.toJSON() : undefined as any;
        data["FI"] = this.fI ? this.fI.toJSON() : undefined as any;
        data["FJ"] = this.fJ ? this.fJ.toJSON() : undefined as any;
        data["FR"] = this.fR ? this.fR.toJSON() : undefined as any;
        data["GB"] = this.gB ? this.gB.toJSON() : undefined as any;
        data["GF"] = this.gF ? this.gF.toJSON() : undefined as any;
        data["GI"] = this.gI ? this.gI.toJSON() : undefined as any;
        data["GR"] = this.gR ? this.gR.toJSON() : undefined as any;
        data["GT"] = this.gT ? this.gT.toJSON() : undefined as any;
        data["HK"] = this.hK ? this.hK.toJSON() : undefined as any;
        data["HN"] = this.hN ? this.hN.toJSON() : undefined as any;
        data["HR"] = this.hR ? this.hR.toJSON() : undefined as any;
        data["HU"] = this.hU ? this.hU.toJSON() : undefined as any;
        data["ID"] = this.iD ? this.iD.toJSON() : undefined as any;
        data["IE"] = this.iE ? this.iE.toJSON() : undefined as any;
        data["IL"] = this.iL ? this.iL.toJSON() : undefined as any;
        data["IN"] = this.iN ? this.iN.toJSON() : undefined as any;
        data["IQ"] = this.iQ ? this.iQ.toJSON() : undefined as any;
        data["IS"] = this.iS ? this.iS.toJSON() : undefined as any;
        data["IT"] = this.iT ? this.iT.toJSON() : undefined as any;
        data["JM"] = this.jM ? this.jM.toJSON() : undefined as any;
        data["JO"] = this.jO ? this.jO.toJSON() : undefined as any;
        data["JP"] = this.jP ? this.jP.toJSON() : undefined as any;
        data["KR"] = this.kR ? this.kR.toJSON() : undefined as any;
        data["KW"] = this.kW ? this.kW.toJSON() : undefined as any;
        data["LB"] = this.lB ? this.lB.toJSON() : undefined as any;
        data["LI"] = this.lI ? this.lI.toJSON() : undefined as any;
        data["LT"] = this.lT ? this.lT.toJSON() : undefined as any;
        data["LV"] = this.lV ? this.lV.toJSON() : undefined as any;
        data["MD"] = this.mD ? this.mD.toJSON() : undefined as any;
        data["MK"] = this.mK ? this.mK.toJSON() : undefined as any;
        data["MT"] = this.mT ? this.mT.toJSON() : undefined as any;
        data["MU"] = this.mU ? this.mU.toJSON() : undefined as any;
        data["MX"] = this.mX ? this.mX.toJSON() : undefined as any;
        data["MY"] = this.mY ? this.mY.toJSON() : undefined as any;
        data["MZ"] = this.mZ ? this.mZ.toJSON() : undefined as any;
        data["NL"] = this.nL ? this.nL.toJSON() : undefined as any;
        data["NO"] = this.nO ? this.nO.toJSON() : undefined as any;
        data["NZ"] = this.nZ ? this.nZ.toJSON() : undefined as any;
        data["OM"] = this.oM ? this.oM.toJSON() : undefined as any;
        data["PA"] = this.pA ? this.pA.toJSON() : undefined as any;
        data["PE"] = this.pE ? this.pE.toJSON() : undefined as any;
        data["PH"] = this.pH ? this.pH.toJSON() : undefined as any;
        data["PK"] = this.pK ? this.pK.toJSON() : undefined as any;
        data["PL"] = this.pL ? this.pL.toJSON() : undefined as any;
        data["PS"] = this.pS ? this.pS.toJSON() : undefined as any;
        data["PT"] = this.pT ? this.pT.toJSON() : undefined as any;
        data["PY"] = this.pY ? this.pY.toJSON() : undefined as any;
        data["QA"] = this.qA ? this.qA.toJSON() : undefined as any;
        data["RO"] = this.rO ? this.rO.toJSON() : undefined as any;
        data["RS"] = this.rS ? this.rS.toJSON() : undefined as any;
        data["RU"] = this.rU ? this.rU.toJSON() : undefined as any;
        data["SA"] = this.sA ? this.sA.toJSON() : undefined as any;
        data["SE"] = this.sE ? this.sE.toJSON() : undefined as any;
        data["SG"] = this.sG ? this.sG.toJSON() : undefined as any;
        data["SI"] = this.sI ? this.sI.toJSON() : undefined as any;
        data["SK"] = this.sK ? this.sK.toJSON() : undefined as any;
        data["SM"] = this.sM ? this.sM.toJSON() : undefined as any;
        data["SV"] = this.sV ? this.sV.toJSON() : undefined as any;
        data["TH"] = this.tH ? this.tH.toJSON() : undefined as any;
        data["TR"] = this.tR ? this.tR.toJSON() : undefined as any;
        data["TT"] = this.tT ? this.tT.toJSON() : undefined as any;
        data["TW"] = this.tW ? this.tW.toJSON() : undefined as any;
        data["UG"] = this.uG ? this.uG.toJSON() : undefined as any;
        data["US"] = this.uS ? this.uS.toJSON() : undefined as any;
        data["UY"] = this.uY ? this.uY.toJSON() : undefined as any;
        data["VE"] = this.vE ? this.vE.toJSON() : undefined as any;
        data["YE"] = this.yE ? this.yE.toJSON() : undefined as any;
        data["ZA"] = this.zA ? this.zA.toJSON() : undefined as any;
        return data;
    }
}

export interface IResults16 {
    aE?: AE;
    aL?: AL;
    aR?: AR;
    aT?: AT;
    aU?: AU;
    bA?: BA;
    bB?: BB;
    bE?: BE;
    bG?: BG;
    bH?: BH;
    bO?: BO;
    bR?: BR;
    bS?: BS;
    cA?: CA;
    cH?: CH;
    cL?: CL;
    cO?: CO;
    cR?: CR;
    cV?: CV;
    cZ?: CZ;
    dE?: DE;
    dK?: DK;
    dO?: DO;
    eC?: EC;
    eE?: EE;
    eG?: EG;
    eS?: ES;
    fI?: FI;
    fJ?: FJ;
    fR?: FR;
    gB?: GB;
    gF?: GF;
    gI?: GI;
    gR?: GR;
    gT?: GT;
    hK?: HK;
    hN?: HN;
    hR?: HR;
    hU?: HU;
    iD?: ID;
    iE?: IE;
    iL?: IL;
    iN?: IN;
    iQ?: IQ;
    iS?: IS;
    iT?: IT;
    jM?: JM;
    jO?: JO;
    jP?: JP;
    kR?: KR;
    kW?: KW;
    lB?: LB;
    lI?: LI;
    lT?: LT;
    lV?: LV;
    mD?: MD;
    mK?: MK;
    mT?: MT;
    mU?: MU;
    mX?: MX;
    mY?: MY;
    mZ?: MZ;
    nL?: NL;
    nO?: NO;
    nZ?: NZ;
    oM?: OM;
    pA?: PA;
    pE?: PE;
    pH?: PH;
    pK?: PK;
    pL?: PL;
    pS?: PS;
    pT?: PT;
    pY?: PY;
    qA?: QA;
    rO?: RO;
    rS?: RS;
    rU?: RU;
    sA?: SA;
    sE?: SE;
    sG?: SG;
    sI?: SI;
    sK?: SK;
    sM?: SM;
    sV?: SV;
    tH?: TH;
    tR?: TR;
    tT?: TT;
    tW?: TW;
    uG?: UG;
    uS?: US;
    uY?: UY;
    vE?: VE;
    yE?: YE;
    zA?: ZA;

    [key: string]: any;
}

export class Movie_results implements IMovie_results {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IMovie_results) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Movie_results {
        data = typeof data === 'object' ? data : {};
        let result = new Movie_results();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IMovie_results {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Changes2 implements IChanges2 {
    key?: string;
    items?: Items3[];

    [key: string]: any;

    constructor(data?: IChanges2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.key = _data["key"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Changes2 {
        data = typeof data === 'object' ? data : {};
        let result = new Changes2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["key"] = this.key;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IChanges2 {
    key?: string;
    items?: Items3[];

    [key: string]: any;
}

export class Changes3 implements IChanges3 {
    key?: string;
    items?: Items4[];

    [key: string]: any;

    constructor(data?: IChanges3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.key = _data["key"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items4.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Changes3 {
        data = typeof data === 'object' ? data : {};
        let result = new Changes3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["key"] = this.key;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IChanges3 {
    key?: string;
    items?: Items4[];

    [key: string]: any;
}

export class Profiles implements IProfiles {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IProfiles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Profiles {
        data = typeof data === 'object' ? data : {};
        let result = new Profiles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IProfiles {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Cast2 implements ICast2 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast2 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast2 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;
}

export class Crew3 implements ICrew3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;

    constructor(data?: ICrew3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.job = _data["job"];
        }
    }

    static fromJS(data: any): Crew3 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["job"] = this.job;
        return data;
    }
}

export interface ICrew3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;
}

export class Cast3 implements ICast3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    episode_count?: number;

    [key: string]: any;

    constructor(data?: ICast3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
        }
    }

    static fromJS(data: any): Cast3 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["episode_count"] = this.episode_count;
        return data;
    }
}

export interface ICast3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    episode_count?: number;

    [key: string]: any;
}

export class Crew4 implements ICrew4 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    episode_count?: number;
    job?: string;

    [key: string]: any;

    constructor(data?: ICrew4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.job = _data["job"];
        }
    }

    static fromJS(data: any): Crew4 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["episode_count"] = this.episode_count;
        data["job"] = this.job;
        return data;
    }
}

export interface ICrew4 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    episode_count?: number;
    job?: string;

    [key: string]: any;
}

export class Cast4 implements ICast4 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    order?: number;
    media_type?: string;

    [key: string]: any;

    constructor(data?: ICast4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
            this.media_type = _data["media_type"];
        }
    }

    static fromJS(data: any): Cast4 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        data["media_type"] = this.media_type;
        return data;
    }
}

export interface ICast4 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    character?: string;
    credit_id?: string;
    order?: number;
    media_type?: string;

    [key: string]: any;
}

export class Crew5 implements ICrew5 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    job?: string;
    media_type?: string;

    [key: string]: any;

    constructor(data?: ICrew5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.job = _data["job"];
            this.media_type = _data["media_type"];
        }
    }

    static fromJS(data: any): Crew5 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["job"] = this.job;
        data["media_type"] = this.media_type;
        return data;
    }
}

export interface ICrew5 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    credit_id?: string;
    department?: string;
    job?: string;
    media_type?: string;

    [key: string]: any;
}

export class Results17 implements IResults17 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    iso_639_1?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;
    image_type?: string;
    media?: Media2;
    media_type?: string;

    [key: string]: any;

    constructor(data?: IResults17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.file_path = _data["file_path"];
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.id = _data["id"];
            this.iso_639_1 = _data["iso_639_1"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
            this.image_type = _data["image_type"];
            this.media = _data["media"] ? Media2.fromJS(_data["media"]) : undefined as any;
            this.media_type = _data["media_type"];
        }
    }

    static fromJS(data: any): Results17 {
        data = typeof data === 'object' ? data : {};
        let result = new Results17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["file_path"] = this.file_path;
        data["height"] = this.height;
        data["id"] = this.id;
        data["iso_639_1"] = this.iso_639_1;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        data["image_type"] = this.image_type;
        data["media"] = this.media ? this.media.toJSON() : undefined as any;
        data["media_type"] = this.media_type;
        return data;
    }
}

export interface IResults17 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    iso_639_1?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;
    image_type?: string;
    media?: Media2;
    media_type?: string;

    [key: string]: any;
}

export class Translations2 implements ITranslations2 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data2;

    [key: string]: any;

    constructor(data?: ITranslations2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data2.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations2 {
        data = typeof data === 'object' ? data : {};
        let result = new Translations2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations2 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data2;

    [key: string]: any;
}

export class Results18 implements IResults18 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for?: Known_for3[];
    known_for_department?: string;
    name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IResults18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["known_for"])) {
                this.known_for = [] as any;
                for (let item of _data["known_for"])
                    this.known_for!.push(Known_for3.fromJS(item));
            }
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Results18 {
        data = typeof data === 'object' ? data : {};
        let result = new Results18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        if (Array.isArray(this.known_for)) {
            data["known_for"] = [];
            for (let item of this.known_for)
                data["known_for"].push(item ? item.toJSON() : undefined as any);
        }
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IResults18 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for?: Known_for3[];
    known_for_department?: string;
    name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Results19 implements IResults19 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results19 {
        data = typeof data === 'object' ? data : {};
        let result = new Results19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults19 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results20 implements IResults20 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results20 {
        data = typeof data === 'object' ? data : {};
        let result = new Results20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults20 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Dates implements IDates {
    maximum?: string;
    minimum?: string;

    [key: string]: any;

    constructor(data?: IDates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
        }
    }

    static fromJS(data: any): Dates {
        data = typeof data === 'object' ? data : {};
        let result = new Dates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        return data;
    }
}

export interface IDates {
    maximum?: string;
    minimum?: string;

    [key: string]: any;
}

export class Results21 implements IResults21 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results21 {
        data = typeof data === 'object' ? data : {};
        let result = new Results21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults21 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Dates2 implements IDates2 {
    maximum?: string;
    minimum?: string;

    [key: string]: any;

    constructor(data?: IDates2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
        }
    }

    static fromJS(data: any): Dates2 {
        data = typeof data === 'object' ? data : {};
        let result = new Dates2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        return data;
    }
}

export interface IDates2 {
    maximum?: string;
    minimum?: string;

    [key: string]: any;
}

export class Results22 implements IResults22 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results22 {
        data = typeof data === 'object' ? data : {};
        let result = new Results22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults22 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results23 implements IResults23 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.backdrop_path = _data["backdrop_path"];
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results23 {
        data = typeof data === 'object' ? data : {};
        let result = new Results23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["backdrop_path"] = this.backdrop_path;
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults23 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results24 implements IResults24 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.backdrop_path = _data["backdrop_path"];
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results24 {
        data = typeof data === 'object' ? data : {};
        let result = new Results24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["backdrop_path"] = this.backdrop_path;
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults24 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results25 implements IResults25 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.backdrop_path = _data["backdrop_path"];
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results25 {
        data = typeof data === 'object' ? data : {};
        let result = new Results25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["backdrop_path"] = this.backdrop_path;
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults25 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results26 implements IResults26 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.backdrop_path = _data["backdrop_path"];
            this.first_air_date = _data["first_air_date"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results26 {
        data = typeof data === 'object' ? data : {};
        let result = new Results26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["backdrop_path"] = this.backdrop_path;
        data["first_air_date"] = this.first_air_date;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults26 {
    backdrop_path?: string;
    first_air_date?: string;
    genre_ids?: number[];
    id?: number;
    name?: string;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Last_episode_to_air2 implements ILast_episode_to_air2 {
    id?: number;
    name?: string;
    overview?: string;
    vote_average?: number;
    vote_count?: number;
    air_date?: string;
    episode_number?: number;
    production_code?: string;
    runtime?: any;
    season_number?: number;
    show_id?: number;
    still_path?: any;

    [key: string]: any;

    constructor(data?: ILast_episode_to_air2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.episode_number = 0;
            this.season_number = 0;
            this.show_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
        }
    }

    static fromJS(data: any): Last_episode_to_air2 {
        data = typeof data === 'object' ? data : {};
        let result = new Last_episode_to_air2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        return data;
    }
}

export interface ILast_episode_to_air2 {
    id?: number;
    name?: string;
    overview?: string;
    vote_average?: number;
    vote_count?: number;
    air_date?: string;
    episode_number?: number;
    production_code?: string;
    runtime?: any;
    season_number?: number;
    show_id?: number;
    still_path?: any;

    [key: string]: any;
}

export class Seasons2 implements ISeasons2 {
    air_date?: any;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: any;
    season_number?: number;

    [key: string]: any;

    constructor(data?: ISeasons2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
            this.id = 0;
            this.season_number = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
        }
    }

    static fromJS(data: any): Seasons2 {
        data = typeof data === 'object' ? data : {};
        let result = new Seasons2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_count"] = this.episode_count;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["season_number"] = this.season_number;
        return data;
    }
}

export interface ISeasons2 {
    air_date?: any;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: any;
    season_number?: number;

    [key: string]: any;
}

export class Cast5 implements ICast5 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    roles?: Roles[];
    total_episode_count?: number;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.total_episode_count = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(Roles.fromJS(item));
            }
            this.total_episode_count = _data["total_episode_count"] !== undefined ? _data["total_episode_count"] : 0;
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast5 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_episode_count"] = this.total_episode_count;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast5 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    roles?: Roles[];
    total_episode_count?: number;
    order?: number;

    [key: string]: any;
}

export class Crew6 implements ICrew6 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    jobs?: Jobs[];
    department?: string;
    total_episode_count?: number;

    [key: string]: any;

    constructor(data?: ICrew6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.total_episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Jobs.fromJS(item));
            }
            this.department = _data["department"];
            this.total_episode_count = _data["total_episode_count"] !== undefined ? _data["total_episode_count"] : 0;
        }
    }

    static fromJS(data: any): Crew6 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item ? item.toJSON() : undefined as any);
        }
        data["department"] = this.department;
        data["total_episode_count"] = this.total_episode_count;
        return data;
    }
}

export interface ICrew6 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    jobs?: Jobs[];
    department?: string;
    total_episode_count?: number;

    [key: string]: any;
}

export class Results27 implements IResults27 {
    iso_3166_1?: string;
    title?: string;
    type?: string;

    [key: string]: any;

    constructor(data?: IResults27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Results27 {
        data = typeof data === 'object' ? data : {};
        let result = new Results27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface IResults27 {
    iso_3166_1?: string;
    title?: string;
    type?: string;

    [key: string]: any;
}

export class Results28 implements IResults28 {
    descriptors?: any[];
    iso_3166_1?: string;
    rating?: string;

    [key: string]: any;

    constructor(data?: IResults28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["descriptors"])) {
                this.descriptors = [] as any;
                for (let item of _data["descriptors"])
                    this.descriptors!.push(item);
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): Results28 {
        data = typeof data === 'object' ? data : {};
        let result = new Results28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.descriptors)) {
            data["descriptors"] = [];
            for (let item of this.descriptors)
                data["descriptors"].push(item);
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults28 {
    descriptors?: any[];
    iso_3166_1?: string;
    rating?: string;

    [key: string]: any;
}

export class Cast6 implements ICast6 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast6 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast6 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;
}

export class Crew7 implements ICrew7 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;

    constructor(data?: ICrew7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.job = _data["job"];
        }
    }

    static fromJS(data: any): Crew7 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["job"] = this.job;
        return data;
    }
}

export interface ICrew7 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;
}

export class Results29 implements IResults29 {
    description?: string;
    episode_count?: number;
    group_count?: number;
    id?: string;
    name?: string;
    network?: Network2;
    type?: number;

    [key: string]: any;

    constructor(data?: IResults29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
            this.group_count = 0;
            this.type = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.group_count = _data["group_count"] !== undefined ? _data["group_count"] : 0;
            this.id = _data["id"];
            this.name = _data["name"];
            this.network = _data["network"] ? Network2.fromJS(_data["network"]) : undefined as any;
            this.type = _data["type"] !== undefined ? _data["type"] : 0;
        }
    }

    static fromJS(data: any): Results29 {
        data = typeof data === 'object' ? data : {};
        let result = new Results29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["episode_count"] = this.episode_count;
        data["group_count"] = this.group_count;
        data["id"] = this.id;
        data["name"] = this.name;
        data["network"] = this.network ? this.network.toJSON() : undefined as any;
        data["type"] = this.type;
        return data;
    }
}

export interface IResults29 {
    description?: string;
    episode_count?: number;
    group_count?: number;
    id?: string;
    name?: string;
    network?: Network2;
    type?: number;

    [key: string]: any;
}

export class Results30 implements IResults30 {
    name?: string;
    id?: number;

    [key: string]: any;

    constructor(data?: IResults30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
        }
    }

    static fromJS(data: any): Results30 {
        data = typeof data === 'object' ? data : {};
        let result = new Results30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["id"] = this.id;
        return data;
    }
}

export interface IResults30 {
    name?: string;
    id?: number;

    [key: string]: any;
}

export class Results31 implements IResults31 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];

    [key: string]: any;

    constructor(data?: IResults31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.first_air_date = _data["first_air_date"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
        }
    }

    static fromJS(data: any): Results31 {
        data = typeof data === 'object' ? data : {};
        let result = new Results31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["first_air_date"] = this.first_air_date;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        return data;
    }
}

export interface IResults31 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];

    [key: string]: any;
}

export class Results32 implements IResults32 {
    author?: string;
    author_details?: Author_details3;
    content?: string;
    created_at?: string;
    id?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;

    constructor(data?: IResults32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.author = _data["author"];
            this.author_details = _data["author_details"] ? Author_details3.fromJS(_data["author_details"]) : undefined as any;
            this.content = _data["content"];
            this.created_at = _data["created_at"];
            this.id = _data["id"];
            this.updated_at = _data["updated_at"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): Results32 {
        data = typeof data === 'object' ? data : {};
        let result = new Results32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["author"] = this.author;
        data["author_details"] = this.author_details ? this.author_details.toJSON() : undefined as any;
        data["content"] = this.content;
        data["created_at"] = this.created_at;
        data["id"] = this.id;
        data["updated_at"] = this.updated_at;
        data["url"] = this.url;
        return data;
    }
}

export interface IResults32 {
    author?: string;
    author_details?: Author_details3;
    content?: string;
    created_at?: string;
    id?: string;
    updated_at?: string;
    url?: string;

    [key: string]: any;
}

export class Results33 implements IResults33 {
    id?: number;
    episode_number?: number;
    season_number?: number;

    [key: string]: any;

    constructor(data?: IResults33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.episode_number = 0;
            this.season_number = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
        }
    }

    static fromJS(data: any): Results33 {
        data = typeof data === 'object' ? data : {};
        let result = new Results33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["episode_number"] = this.episode_number;
        data["season_number"] = this.season_number;
        return data;
    }
}

export interface IResults33 {
    id?: number;
    episode_number?: number;
    season_number?: number;

    [key: string]: any;
}

export class Results34 implements IResults34 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results34 {
        data = typeof data === 'object' ? data : {};
        let result = new Results34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults34 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Translations3 implements ITranslations3 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data3;

    [key: string]: any;

    constructor(data?: ITranslations3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data3.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations3 {
        data = typeof data === 'object' ? data : {};
        let result = new Translations3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations3 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data3;

    [key: string]: any;
}

export class Results35 implements IResults35 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;

    constructor(data?: IResults35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.size = 0;
            this.official = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.site = _data["site"];
            this.size = _data["size"] !== undefined ? _data["size"] : 0;
            this.type = _data["type"];
            this.official = _data["official"] !== undefined ? _data["official"] : true;
            this.published_at = _data["published_at"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Results35 {
        data = typeof data === 'object' ? data : {};
        let result = new Results35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["key"] = this.key;
        data["site"] = this.site;
        data["size"] = this.size;
        data["type"] = this.type;
        data["official"] = this.official;
        data["published_at"] = this.published_at;
        data["id"] = this.id;
        return data;
    }
}

export interface IResults35 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;
}

export class Results36 implements IResults36 {
    aE?: AE2;
    aR?: AR2;
    aT?: AT2;
    aU?: AU2;
    bA?: BA2;
    bB?: BB2;
    bE?: BE2;
    bG?: BG2;
    bO?: BO2;
    bR?: BR2;
    bS?: BS2;
    cA?: CA2;
    cH?: CH2;
    cI?: CI;
    cL?: CL2;
    cO?: CO2;
    cR?: CR2;
    cZ?: CZ2;
    dE?: DE2;
    dK?: DK2;
    dO?: DO2;
    dZ?: DZ;
    eC?: EC2;
    eG?: EG2;
    eS?: ES2;
    fI?: FI2;
    fR?: FR2;
    gB?: GB2;
    gF?: GF2;
    gH?: GH;
    gQ?: GQ;
    gT?: GT2;
    hK?: HK2;
    hN?: HN2;
    hR?: HR2;
    hU?: HU2;
    iD?: ID2;
    iE?: IE2;
    iL?: IL2;
    iQ?: IQ2;
    iT?: IT2;
    jM?: JM2;
    jP?: JP2;
    kE?: KE;
    kR?: KR2;
    lB?: LB2;
    lT?: LT2;
    lY?: LY;
    mD?: MD2;
    mK?: MK2;
    mU?: MU2;
    mX?: MX2;
    mY?: MY2;
    mZ?: MZ2;
    nE?: NE;
    nG?: NG;
    nL?: NL2;
    nO?: NO2;
    nZ?: NZ2;
    pA?: PA2;
    pE?: PE2;
    pH?: PH2;
    pL?: PL2;
    pS?: PS2;
    pT?: PT2;
    pY?: PY2;
    rO?: RO2;
    rS?: RS2;
    rU?: RU2;
    sA?: SA2;
    sC?: SC;
    sE?: SE2;
    sG?: SG2;
    sI?: SI2;
    sK?: SK2;
    sN?: SN;
    sV?: SV2;
    tH?: TH2;
    tR?: TR2;
    tT?: TT2;
    tW?: TW2;
    tZ?: TZ;
    uG?: UG2;
    uS?: US2;
    uY?: UY2;
    vE?: VE2;
    zA?: ZA2;
    zM?: ZM;

    [key: string]: any;

    constructor(data?: IResults36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aE = _data["AE"] ? AE2.fromJS(_data["AE"]) : undefined as any;
            this.aR = _data["AR"] ? AR2.fromJS(_data["AR"]) : undefined as any;
            this.aT = _data["AT"] ? AT2.fromJS(_data["AT"]) : undefined as any;
            this.aU = _data["AU"] ? AU2.fromJS(_data["AU"]) : undefined as any;
            this.bA = _data["BA"] ? BA2.fromJS(_data["BA"]) : undefined as any;
            this.bB = _data["BB"] ? BB2.fromJS(_data["BB"]) : undefined as any;
            this.bE = _data["BE"] ? BE2.fromJS(_data["BE"]) : undefined as any;
            this.bG = _data["BG"] ? BG2.fromJS(_data["BG"]) : undefined as any;
            this.bO = _data["BO"] ? BO2.fromJS(_data["BO"]) : undefined as any;
            this.bR = _data["BR"] ? BR2.fromJS(_data["BR"]) : undefined as any;
            this.bS = _data["BS"] ? BS2.fromJS(_data["BS"]) : undefined as any;
            this.cA = _data["CA"] ? CA2.fromJS(_data["CA"]) : undefined as any;
            this.cH = _data["CH"] ? CH2.fromJS(_data["CH"]) : undefined as any;
            this.cI = _data["CI"] ? CI.fromJS(_data["CI"]) : undefined as any;
            this.cL = _data["CL"] ? CL2.fromJS(_data["CL"]) : undefined as any;
            this.cO = _data["CO"] ? CO2.fromJS(_data["CO"]) : undefined as any;
            this.cR = _data["CR"] ? CR2.fromJS(_data["CR"]) : undefined as any;
            this.cZ = _data["CZ"] ? CZ2.fromJS(_data["CZ"]) : undefined as any;
            this.dE = _data["DE"] ? DE2.fromJS(_data["DE"]) : undefined as any;
            this.dK = _data["DK"] ? DK2.fromJS(_data["DK"]) : undefined as any;
            this.dO = _data["DO"] ? DO2.fromJS(_data["DO"]) : undefined as any;
            this.dZ = _data["DZ"] ? DZ.fromJS(_data["DZ"]) : undefined as any;
            this.eC = _data["EC"] ? EC2.fromJS(_data["EC"]) : undefined as any;
            this.eG = _data["EG"] ? EG2.fromJS(_data["EG"]) : undefined as any;
            this.eS = _data["ES"] ? ES2.fromJS(_data["ES"]) : undefined as any;
            this.fI = _data["FI"] ? FI2.fromJS(_data["FI"]) : undefined as any;
            this.fR = _data["FR"] ? FR2.fromJS(_data["FR"]) : undefined as any;
            this.gB = _data["GB"] ? GB2.fromJS(_data["GB"]) : undefined as any;
            this.gF = _data["GF"] ? GF2.fromJS(_data["GF"]) : undefined as any;
            this.gH = _data["GH"] ? GH.fromJS(_data["GH"]) : undefined as any;
            this.gQ = _data["GQ"] ? GQ.fromJS(_data["GQ"]) : undefined as any;
            this.gT = _data["GT"] ? GT2.fromJS(_data["GT"]) : undefined as any;
            this.hK = _data["HK"] ? HK2.fromJS(_data["HK"]) : undefined as any;
            this.hN = _data["HN"] ? HN2.fromJS(_data["HN"]) : undefined as any;
            this.hR = _data["HR"] ? HR2.fromJS(_data["HR"]) : undefined as any;
            this.hU = _data["HU"] ? HU2.fromJS(_data["HU"]) : undefined as any;
            this.iD = _data["ID"] ? ID2.fromJS(_data["ID"]) : undefined as any;
            this.iE = _data["IE"] ? IE2.fromJS(_data["IE"]) : undefined as any;
            this.iL = _data["IL"] ? IL2.fromJS(_data["IL"]) : undefined as any;
            this.iQ = _data["IQ"] ? IQ2.fromJS(_data["IQ"]) : undefined as any;
            this.iT = _data["IT"] ? IT2.fromJS(_data["IT"]) : undefined as any;
            this.jM = _data["JM"] ? JM2.fromJS(_data["JM"]) : undefined as any;
            this.jP = _data["JP"] ? JP2.fromJS(_data["JP"]) : undefined as any;
            this.kE = _data["KE"] ? KE.fromJS(_data["KE"]) : undefined as any;
            this.kR = _data["KR"] ? KR2.fromJS(_data["KR"]) : undefined as any;
            this.lB = _data["LB"] ? LB2.fromJS(_data["LB"]) : undefined as any;
            this.lT = _data["LT"] ? LT2.fromJS(_data["LT"]) : undefined as any;
            this.lY = _data["LY"] ? LY.fromJS(_data["LY"]) : undefined as any;
            this.mD = _data["MD"] ? MD2.fromJS(_data["MD"]) : undefined as any;
            this.mK = _data["MK"] ? MK2.fromJS(_data["MK"]) : undefined as any;
            this.mU = _data["MU"] ? MU2.fromJS(_data["MU"]) : undefined as any;
            this.mX = _data["MX"] ? MX2.fromJS(_data["MX"]) : undefined as any;
            this.mY = _data["MY"] ? MY2.fromJS(_data["MY"]) : undefined as any;
            this.mZ = _data["MZ"] ? MZ2.fromJS(_data["MZ"]) : undefined as any;
            this.nE = _data["NE"] ? NE.fromJS(_data["NE"]) : undefined as any;
            this.nG = _data["NG"] ? NG.fromJS(_data["NG"]) : undefined as any;
            this.nL = _data["NL"] ? NL2.fromJS(_data["NL"]) : undefined as any;
            this.nO = _data["NO"] ? NO2.fromJS(_data["NO"]) : undefined as any;
            this.nZ = _data["NZ"] ? NZ2.fromJS(_data["NZ"]) : undefined as any;
            this.pA = _data["PA"] ? PA2.fromJS(_data["PA"]) : undefined as any;
            this.pE = _data["PE"] ? PE2.fromJS(_data["PE"]) : undefined as any;
            this.pH = _data["PH"] ? PH2.fromJS(_data["PH"]) : undefined as any;
            this.pL = _data["PL"] ? PL2.fromJS(_data["PL"]) : undefined as any;
            this.pS = _data["PS"] ? PS2.fromJS(_data["PS"]) : undefined as any;
            this.pT = _data["PT"] ? PT2.fromJS(_data["PT"]) : undefined as any;
            this.pY = _data["PY"] ? PY2.fromJS(_data["PY"]) : undefined as any;
            this.rO = _data["RO"] ? RO2.fromJS(_data["RO"]) : undefined as any;
            this.rS = _data["RS"] ? RS2.fromJS(_data["RS"]) : undefined as any;
            this.rU = _data["RU"] ? RU2.fromJS(_data["RU"]) : undefined as any;
            this.sA = _data["SA"] ? SA2.fromJS(_data["SA"]) : undefined as any;
            this.sC = _data["SC"] ? SC.fromJS(_data["SC"]) : undefined as any;
            this.sE = _data["SE"] ? SE2.fromJS(_data["SE"]) : undefined as any;
            this.sG = _data["SG"] ? SG2.fromJS(_data["SG"]) : undefined as any;
            this.sI = _data["SI"] ? SI2.fromJS(_data["SI"]) : undefined as any;
            this.sK = _data["SK"] ? SK2.fromJS(_data["SK"]) : undefined as any;
            this.sN = _data["SN"] ? SN.fromJS(_data["SN"]) : undefined as any;
            this.sV = _data["SV"] ? SV2.fromJS(_data["SV"]) : undefined as any;
            this.tH = _data["TH"] ? TH2.fromJS(_data["TH"]) : undefined as any;
            this.tR = _data["TR"] ? TR2.fromJS(_data["TR"]) : undefined as any;
            this.tT = _data["TT"] ? TT2.fromJS(_data["TT"]) : undefined as any;
            this.tW = _data["TW"] ? TW2.fromJS(_data["TW"]) : undefined as any;
            this.tZ = _data["TZ"] ? TZ.fromJS(_data["TZ"]) : undefined as any;
            this.uG = _data["UG"] ? UG2.fromJS(_data["UG"]) : undefined as any;
            this.uS = _data["US"] ? US2.fromJS(_data["US"]) : undefined as any;
            this.uY = _data["UY"] ? UY2.fromJS(_data["UY"]) : undefined as any;
            this.vE = _data["VE"] ? VE2.fromJS(_data["VE"]) : undefined as any;
            this.zA = _data["ZA"] ? ZA2.fromJS(_data["ZA"]) : undefined as any;
            this.zM = _data["ZM"] ? ZM.fromJS(_data["ZM"]) : undefined as any;
        }
    }

    static fromJS(data: any): Results36 {
        data = typeof data === 'object' ? data : {};
        let result = new Results36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["AE"] = this.aE ? this.aE.toJSON() : undefined as any;
        data["AR"] = this.aR ? this.aR.toJSON() : undefined as any;
        data["AT"] = this.aT ? this.aT.toJSON() : undefined as any;
        data["AU"] = this.aU ? this.aU.toJSON() : undefined as any;
        data["BA"] = this.bA ? this.bA.toJSON() : undefined as any;
        data["BB"] = this.bB ? this.bB.toJSON() : undefined as any;
        data["BE"] = this.bE ? this.bE.toJSON() : undefined as any;
        data["BG"] = this.bG ? this.bG.toJSON() : undefined as any;
        data["BO"] = this.bO ? this.bO.toJSON() : undefined as any;
        data["BR"] = this.bR ? this.bR.toJSON() : undefined as any;
        data["BS"] = this.bS ? this.bS.toJSON() : undefined as any;
        data["CA"] = this.cA ? this.cA.toJSON() : undefined as any;
        data["CH"] = this.cH ? this.cH.toJSON() : undefined as any;
        data["CI"] = this.cI ? this.cI.toJSON() : undefined as any;
        data["CL"] = this.cL ? this.cL.toJSON() : undefined as any;
        data["CO"] = this.cO ? this.cO.toJSON() : undefined as any;
        data["CR"] = this.cR ? this.cR.toJSON() : undefined as any;
        data["CZ"] = this.cZ ? this.cZ.toJSON() : undefined as any;
        data["DE"] = this.dE ? this.dE.toJSON() : undefined as any;
        data["DK"] = this.dK ? this.dK.toJSON() : undefined as any;
        data["DO"] = this.dO ? this.dO.toJSON() : undefined as any;
        data["DZ"] = this.dZ ? this.dZ.toJSON() : undefined as any;
        data["EC"] = this.eC ? this.eC.toJSON() : undefined as any;
        data["EG"] = this.eG ? this.eG.toJSON() : undefined as any;
        data["ES"] = this.eS ? this.eS.toJSON() : undefined as any;
        data["FI"] = this.fI ? this.fI.toJSON() : undefined as any;
        data["FR"] = this.fR ? this.fR.toJSON() : undefined as any;
        data["GB"] = this.gB ? this.gB.toJSON() : undefined as any;
        data["GF"] = this.gF ? this.gF.toJSON() : undefined as any;
        data["GH"] = this.gH ? this.gH.toJSON() : undefined as any;
        data["GQ"] = this.gQ ? this.gQ.toJSON() : undefined as any;
        data["GT"] = this.gT ? this.gT.toJSON() : undefined as any;
        data["HK"] = this.hK ? this.hK.toJSON() : undefined as any;
        data["HN"] = this.hN ? this.hN.toJSON() : undefined as any;
        data["HR"] = this.hR ? this.hR.toJSON() : undefined as any;
        data["HU"] = this.hU ? this.hU.toJSON() : undefined as any;
        data["ID"] = this.iD ? this.iD.toJSON() : undefined as any;
        data["IE"] = this.iE ? this.iE.toJSON() : undefined as any;
        data["IL"] = this.iL ? this.iL.toJSON() : undefined as any;
        data["IQ"] = this.iQ ? this.iQ.toJSON() : undefined as any;
        data["IT"] = this.iT ? this.iT.toJSON() : undefined as any;
        data["JM"] = this.jM ? this.jM.toJSON() : undefined as any;
        data["JP"] = this.jP ? this.jP.toJSON() : undefined as any;
        data["KE"] = this.kE ? this.kE.toJSON() : undefined as any;
        data["KR"] = this.kR ? this.kR.toJSON() : undefined as any;
        data["LB"] = this.lB ? this.lB.toJSON() : undefined as any;
        data["LT"] = this.lT ? this.lT.toJSON() : undefined as any;
        data["LY"] = this.lY ? this.lY.toJSON() : undefined as any;
        data["MD"] = this.mD ? this.mD.toJSON() : undefined as any;
        data["MK"] = this.mK ? this.mK.toJSON() : undefined as any;
        data["MU"] = this.mU ? this.mU.toJSON() : undefined as any;
        data["MX"] = this.mX ? this.mX.toJSON() : undefined as any;
        data["MY"] = this.mY ? this.mY.toJSON() : undefined as any;
        data["MZ"] = this.mZ ? this.mZ.toJSON() : undefined as any;
        data["NE"] = this.nE ? this.nE.toJSON() : undefined as any;
        data["NG"] = this.nG ? this.nG.toJSON() : undefined as any;
        data["NL"] = this.nL ? this.nL.toJSON() : undefined as any;
        data["NO"] = this.nO ? this.nO.toJSON() : undefined as any;
        data["NZ"] = this.nZ ? this.nZ.toJSON() : undefined as any;
        data["PA"] = this.pA ? this.pA.toJSON() : undefined as any;
        data["PE"] = this.pE ? this.pE.toJSON() : undefined as any;
        data["PH"] = this.pH ? this.pH.toJSON() : undefined as any;
        data["PL"] = this.pL ? this.pL.toJSON() : undefined as any;
        data["PS"] = this.pS ? this.pS.toJSON() : undefined as any;
        data["PT"] = this.pT ? this.pT.toJSON() : undefined as any;
        data["PY"] = this.pY ? this.pY.toJSON() : undefined as any;
        data["RO"] = this.rO ? this.rO.toJSON() : undefined as any;
        data["RS"] = this.rS ? this.rS.toJSON() : undefined as any;
        data["RU"] = this.rU ? this.rU.toJSON() : undefined as any;
        data["SA"] = this.sA ? this.sA.toJSON() : undefined as any;
        data["SC"] = this.sC ? this.sC.toJSON() : undefined as any;
        data["SE"] = this.sE ? this.sE.toJSON() : undefined as any;
        data["SG"] = this.sG ? this.sG.toJSON() : undefined as any;
        data["SI"] = this.sI ? this.sI.toJSON() : undefined as any;
        data["SK"] = this.sK ? this.sK.toJSON() : undefined as any;
        data["SN"] = this.sN ? this.sN.toJSON() : undefined as any;
        data["SV"] = this.sV ? this.sV.toJSON() : undefined as any;
        data["TH"] = this.tH ? this.tH.toJSON() : undefined as any;
        data["TR"] = this.tR ? this.tR.toJSON() : undefined as any;
        data["TT"] = this.tT ? this.tT.toJSON() : undefined as any;
        data["TW"] = this.tW ? this.tW.toJSON() : undefined as any;
        data["TZ"] = this.tZ ? this.tZ.toJSON() : undefined as any;
        data["UG"] = this.uG ? this.uG.toJSON() : undefined as any;
        data["US"] = this.uS ? this.uS.toJSON() : undefined as any;
        data["UY"] = this.uY ? this.uY.toJSON() : undefined as any;
        data["VE"] = this.vE ? this.vE.toJSON() : undefined as any;
        data["ZA"] = this.zA ? this.zA.toJSON() : undefined as any;
        data["ZM"] = this.zM ? this.zM.toJSON() : undefined as any;
        return data;
    }
}

export interface IResults36 {
    aE?: AE2;
    aR?: AR2;
    aT?: AT2;
    aU?: AU2;
    bA?: BA2;
    bB?: BB2;
    bE?: BE2;
    bG?: BG2;
    bO?: BO2;
    bR?: BR2;
    bS?: BS2;
    cA?: CA2;
    cH?: CH2;
    cI?: CI;
    cL?: CL2;
    cO?: CO2;
    cR?: CR2;
    cZ?: CZ2;
    dE?: DE2;
    dK?: DK2;
    dO?: DO2;
    dZ?: DZ;
    eC?: EC2;
    eG?: EG2;
    eS?: ES2;
    fI?: FI2;
    fR?: FR2;
    gB?: GB2;
    gF?: GF2;
    gH?: GH;
    gQ?: GQ;
    gT?: GT2;
    hK?: HK2;
    hN?: HN2;
    hR?: HR2;
    hU?: HU2;
    iD?: ID2;
    iE?: IE2;
    iL?: IL2;
    iQ?: IQ2;
    iT?: IT2;
    jM?: JM2;
    jP?: JP2;
    kE?: KE;
    kR?: KR2;
    lB?: LB2;
    lT?: LT2;
    lY?: LY;
    mD?: MD2;
    mK?: MK2;
    mU?: MU2;
    mX?: MX2;
    mY?: MY2;
    mZ?: MZ2;
    nE?: NE;
    nG?: NG;
    nL?: NL2;
    nO?: NO2;
    nZ?: NZ2;
    pA?: PA2;
    pE?: PE2;
    pH?: PH2;
    pL?: PL2;
    pS?: PS2;
    pT?: PT2;
    pY?: PY2;
    rO?: RO2;
    rS?: RS2;
    rU?: RU2;
    sA?: SA2;
    sC?: SC;
    sE?: SE2;
    sG?: SG2;
    sI?: SI2;
    sK?: SK2;
    sN?: SN;
    sV?: SV2;
    tH?: TH2;
    tR?: TR2;
    tT?: TT2;
    tW?: TW2;
    tZ?: TZ;
    uG?: UG2;
    uS?: US2;
    uY?: UY2;
    vE?: VE2;
    zA?: ZA2;
    zM?: ZM;

    [key: string]: any;
}

export class Results37 implements IResults37 {
    id?: number;
    episode_number?: number;
    rated?: Rated4;

    [key: string]: any;

    constructor(data?: IResults37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.episode_number = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.rated = _data["rated"] ? Rated4.fromJS(_data["rated"]) : undefined as any;
        }
    }

    static fromJS(data: any): Results37 {
        data = typeof data === 'object' ? data : {};
        let result = new Results37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["episode_number"] = this.episode_number;
        data["rated"] = this.rated ? this.rated.toJSON() : undefined as any;
        return data;
    }
}

export interface IResults37 {
    id?: number;
    episode_number?: number;
    rated?: Rated4;

    [key: string]: any;
}

export class Cast7 implements ICast7 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    roles?: Roles2[];
    total_episode_count?: number;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.total_episode_count = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(Roles2.fromJS(item));
            }
            this.total_episode_count = _data["total_episode_count"] !== undefined ? _data["total_episode_count"] : 0;
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast7 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item ? item.toJSON() : undefined as any);
        }
        data["total_episode_count"] = this.total_episode_count;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast7 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    roles?: Roles2[];
    total_episode_count?: number;
    order?: number;

    [key: string]: any;
}

export class Crew8 implements ICrew8 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: any;
    jobs?: Jobs2[];
    department?: string;
    total_episode_count?: number;

    [key: string]: any;

    constructor(data?: ICrew8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.total_episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(Jobs2.fromJS(item));
            }
            this.department = _data["department"];
            this.total_episode_count = _data["total_episode_count"] !== undefined ? _data["total_episode_count"] : 0;
        }
    }

    static fromJS(data: any): Crew8 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item ? item.toJSON() : undefined as any);
        }
        data["department"] = this.department;
        data["total_episode_count"] = this.total_episode_count;
        return data;
    }
}

export interface ICrew8 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: any;
    jobs?: Jobs2[];
    department?: string;
    total_episode_count?: number;

    [key: string]: any;
}

export class Changes4 implements IChanges4 {
    key?: string;
    items?: Items5[];

    [key: string]: any;

    constructor(data?: IChanges4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.key = _data["key"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Changes4 {
        data = typeof data === 'object' ? data : {};
        let result = new Changes4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["key"] = this.key;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IChanges4 {
    key?: string;
    items?: Items5[];

    [key: string]: any;
}

export class Cast8 implements ICast8 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast8 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast8 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;
}

export class Crew9 implements ICrew9 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: any;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;

    constructor(data?: ICrew9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.credit_id = _data["credit_id"];
            this.department = _data["department"];
            this.job = _data["job"];
        }
    }

    static fromJS(data: any): Crew9 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["credit_id"] = this.credit_id;
        data["department"] = this.department;
        data["job"] = this.job;
        return data;
    }
}

export interface ICrew9 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: any;
    credit_id?: string;
    department?: string;
    job?: string;

    [key: string]: any;
}

export class Translations4 implements ITranslations4 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data4;

    [key: string]: any;

    constructor(data?: ITranslations4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data4.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations4 {
        data = typeof data === 'object' ? data : {};
        let result = new Translations4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations4 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data4;

    [key: string]: any;
}

export class Results38 implements IResults38 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;

    constructor(data?: IResults38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.size = 0;
            this.official = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.site = _data["site"];
            this.size = _data["size"] !== undefined ? _data["size"] : 0;
            this.type = _data["type"];
            this.official = _data["official"] !== undefined ? _data["official"] : true;
            this.published_at = _data["published_at"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Results38 {
        data = typeof data === 'object' ? data : {};
        let result = new Results38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["key"] = this.key;
        data["site"] = this.site;
        data["size"] = this.size;
        data["type"] = this.type;
        data["official"] = this.official;
        data["published_at"] = this.published_at;
        data["id"] = this.id;
        return data;
    }
}

export interface IResults38 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;
}

export class Cast9 implements ICast9 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICast9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Cast9 {
        data = typeof data === 'object' ? data : {};
        let result = new Cast9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        return data;
    }
}

export interface ICast9 {
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;
    character?: string;
    credit_id?: string;
    order?: number;

    [key: string]: any;
}

export class Crew10 implements ICrew10 {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: ICrew10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.department = _data["department"];
            this.job = _data["job"];
            this.credit_id = _data["credit_id"];
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Crew10 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["department"] = this.department;
        data["job"] = this.job;
        data["credit_id"] = this.credit_id;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface ICrew10 {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Guest_stars2 implements IGuest_stars2 {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IGuest_stars2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Guest_stars2 {
        data = typeof data === 'object' ? data : {};
        let result = new Guest_stars2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IGuest_stars2 {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Translations5 implements ITranslations5 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data5;

    [key: string]: any;

    constructor(data?: ITranslations5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data5.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations5 {
        data = typeof data === 'object' ? data : {};
        let result = new Translations5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations5 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data5;

    [key: string]: any;
}

export class Results39 implements IResults39 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;

    constructor(data?: IResults39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.size = 0;
            this.official = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.key = _data["key"];
            this.site = _data["site"];
            this.size = _data["size"] !== undefined ? _data["size"] : 0;
            this.type = _data["type"];
            this.official = _data["official"] !== undefined ? _data["official"] : true;
            this.published_at = _data["published_at"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Results39 {
        data = typeof data === 'object' ? data : {};
        let result = new Results39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["key"] = this.key;
        data["site"] = this.site;
        data["size"] = this.size;
        data["type"] = this.type;
        data["official"] = this.official;
        data["published_at"] = this.published_at;
        data["id"] = this.id;
        return data;
    }
}

export interface IResults39 {
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    key?: string;
    site?: string;
    size?: number;
    type?: string;
    official?: boolean;
    published_at?: string;
    id?: string;

    [key: string]: any;
}

export class Avatar implements IAvatar {
    gravatar?: Gravatar;
    tmdb?: Tmdb;

    [key: string]: any;

    constructor(data?: IAvatar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.gravatar = _data["gravatar"] ? Gravatar.fromJS(_data["gravatar"]) : undefined as any;
            this.tmdb = _data["tmdb"] ? Tmdb.fromJS(_data["tmdb"]) : undefined as any;
        }
    }

    static fromJS(data: any): Avatar {
        data = typeof data === 'object' ? data : {};
        let result = new Avatar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["gravatar"] = this.gravatar ? this.gravatar.toJSON() : undefined as any;
        data["tmdb"] = this.tmdb ? this.tmdb.toJSON() : undefined as any;
        return data;
    }
}

export interface IAvatar {
    gravatar?: Gravatar;
    tmdb?: Tmdb;

    [key: string]: any;
}

export class Results40 implements IResults40 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    list_type?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;

    constructor(data?: IResults40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.favorite_count = 0;
            this.id = 0;
            this.item_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.favorite_count = _data["favorite_count"] !== undefined ? _data["favorite_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.item_count = _data["item_count"] !== undefined ? _data["item_count"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.list_type = _data["list_type"];
            this.name = _data["name"];
            this.poster_path = _data["poster_path"];
        }
    }

    static fromJS(data: any): Results40 {
        data = typeof data === 'object' ? data : {};
        let result = new Results40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["favorite_count"] = this.favorite_count;
        data["id"] = this.id;
        data["item_count"] = this.item_count;
        data["iso_639_1"] = this.iso_639_1;
        data["list_type"] = this.list_type;
        data["name"] = this.name;
        data["poster_path"] = this.poster_path;
        return data;
    }
}

export interface IResults40 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    list_type?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;
}

export class Results41 implements IResults41 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results41 {
        data = typeof data === 'object' ? data : {};
        let result = new Results41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults41 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results42 implements IResults42 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results42 {
        data = typeof data === 'object' ? data : {};
        let result = new Results42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults42 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results43 implements IResults43 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results43 {
        data = typeof data === 'object' ? data : {};
        let result = new Results43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults43 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results44 implements IResults44 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results44 {
        data = typeof data === 'object' ? data : {};
        let result = new Results44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults44 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results45 implements IResults45 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_number = 0;
            this.id = 0;
            this.runtime = 0;
            this.season_number = 0;
            this.show_id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results45 {
        data = typeof data === 'object' ? data : {};
        let result = new Results45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults45 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results46 implements IResults46 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results46 {
        data = typeof data === 'object' ? data : {};
        let result = new Results46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults46 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results47 implements IResults47 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results47 {
        data = typeof data === 'object' ? data : {};
        let result = new Results47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults47 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Certifications implements ICertifications {
    aU?: AU3[];
    bG?: BG3[];
    bR?: BR3[];
    cA?: CA3[];
    cAQC?: CAQC[];
    dE?: DE3[];
    dK?: DK3[];
    eS?: ES3[];
    fI?: FI3[];
    fR?: FR3[];
    gB?: GB3[];
    hU?: HU3[];
    iN?: IN2[];
    iT?: IT3[];
    lT?: LT3[];
    mY?: MY3[];
    nL?: NL3[];
    nO?: NO3[];
    nZ?: NZ3[];
    pH?: PH3[];
    pT?: PT3[];
    rU?: RU3[];
    sE?: SE3[];
    uS?: US3[];
    kR?: KR3[];
    sK?: SK3[];
    tH?: TH3[];
    mX?: MX3[];
    iD?: ID3[];
    tR?: TR3[];
    aR?: AR3[];
    gR?: GR2[];
    tW?: TW3[];
    zA?: ZA3[];
    sG?: SG3[];
    iE?: IE3[];
    pR?: PR[];
    jP?: JP3[];
    vI?: VI[];
    cH?: CH3[];
    iL?: IL3[];
    hK?: HK3[];
    mO?: MO[];
    lV?: LV2[];
    lU?: LU[];

    [key: string]: any;

    constructor(data?: ICertifications) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["AU"])) {
                this.aU = [] as any;
                for (let item of _data["AU"])
                    this.aU!.push(AU3.fromJS(item));
            }
            if (Array.isArray(_data["BG"])) {
                this.bG = [] as any;
                for (let item of _data["BG"])
                    this.bG!.push(BG3.fromJS(item));
            }
            if (Array.isArray(_data["BR"])) {
                this.bR = [] as any;
                for (let item of _data["BR"])
                    this.bR!.push(BR3.fromJS(item));
            }
            if (Array.isArray(_data["CA"])) {
                this.cA = [] as any;
                for (let item of _data["CA"])
                    this.cA!.push(CA3.fromJS(item));
            }
            if (Array.isArray(_data["CA-QC"])) {
                this.cAQC = [] as any;
                for (let item of _data["CA-QC"])
                    this.cAQC!.push(CAQC.fromJS(item));
            }
            if (Array.isArray(_data["DE"])) {
                this.dE = [] as any;
                for (let item of _data["DE"])
                    this.dE!.push(DE3.fromJS(item));
            }
            if (Array.isArray(_data["DK"])) {
                this.dK = [] as any;
                for (let item of _data["DK"])
                    this.dK!.push(DK3.fromJS(item));
            }
            if (Array.isArray(_data["ES"])) {
                this.eS = [] as any;
                for (let item of _data["ES"])
                    this.eS!.push(ES3.fromJS(item));
            }
            if (Array.isArray(_data["FI"])) {
                this.fI = [] as any;
                for (let item of _data["FI"])
                    this.fI!.push(FI3.fromJS(item));
            }
            if (Array.isArray(_data["FR"])) {
                this.fR = [] as any;
                for (let item of _data["FR"])
                    this.fR!.push(FR3.fromJS(item));
            }
            if (Array.isArray(_data["GB"])) {
                this.gB = [] as any;
                for (let item of _data["GB"])
                    this.gB!.push(GB3.fromJS(item));
            }
            if (Array.isArray(_data["HU"])) {
                this.hU = [] as any;
                for (let item of _data["HU"])
                    this.hU!.push(HU3.fromJS(item));
            }
            if (Array.isArray(_data["IN"])) {
                this.iN = [] as any;
                for (let item of _data["IN"])
                    this.iN!.push(IN2.fromJS(item));
            }
            if (Array.isArray(_data["IT"])) {
                this.iT = [] as any;
                for (let item of _data["IT"])
                    this.iT!.push(IT3.fromJS(item));
            }
            if (Array.isArray(_data["LT"])) {
                this.lT = [] as any;
                for (let item of _data["LT"])
                    this.lT!.push(LT3.fromJS(item));
            }
            if (Array.isArray(_data["MY"])) {
                this.mY = [] as any;
                for (let item of _data["MY"])
                    this.mY!.push(MY3.fromJS(item));
            }
            if (Array.isArray(_data["NL"])) {
                this.nL = [] as any;
                for (let item of _data["NL"])
                    this.nL!.push(NL3.fromJS(item));
            }
            if (Array.isArray(_data["NO"])) {
                this.nO = [] as any;
                for (let item of _data["NO"])
                    this.nO!.push(NO3.fromJS(item));
            }
            if (Array.isArray(_data["NZ"])) {
                this.nZ = [] as any;
                for (let item of _data["NZ"])
                    this.nZ!.push(NZ3.fromJS(item));
            }
            if (Array.isArray(_data["PH"])) {
                this.pH = [] as any;
                for (let item of _data["PH"])
                    this.pH!.push(PH3.fromJS(item));
            }
            if (Array.isArray(_data["PT"])) {
                this.pT = [] as any;
                for (let item of _data["PT"])
                    this.pT!.push(PT3.fromJS(item));
            }
            if (Array.isArray(_data["RU"])) {
                this.rU = [] as any;
                for (let item of _data["RU"])
                    this.rU!.push(RU3.fromJS(item));
            }
            if (Array.isArray(_data["SE"])) {
                this.sE = [] as any;
                for (let item of _data["SE"])
                    this.sE!.push(SE3.fromJS(item));
            }
            if (Array.isArray(_data["US"])) {
                this.uS = [] as any;
                for (let item of _data["US"])
                    this.uS!.push(US3.fromJS(item));
            }
            if (Array.isArray(_data["KR"])) {
                this.kR = [] as any;
                for (let item of _data["KR"])
                    this.kR!.push(KR3.fromJS(item));
            }
            if (Array.isArray(_data["SK"])) {
                this.sK = [] as any;
                for (let item of _data["SK"])
                    this.sK!.push(SK3.fromJS(item));
            }
            if (Array.isArray(_data["TH"])) {
                this.tH = [] as any;
                for (let item of _data["TH"])
                    this.tH!.push(TH3.fromJS(item));
            }
            if (Array.isArray(_data["MX"])) {
                this.mX = [] as any;
                for (let item of _data["MX"])
                    this.mX!.push(MX3.fromJS(item));
            }
            if (Array.isArray(_data["ID"])) {
                this.iD = [] as any;
                for (let item of _data["ID"])
                    this.iD!.push(ID3.fromJS(item));
            }
            if (Array.isArray(_data["TR"])) {
                this.tR = [] as any;
                for (let item of _data["TR"])
                    this.tR!.push(TR3.fromJS(item));
            }
            if (Array.isArray(_data["AR"])) {
                this.aR = [] as any;
                for (let item of _data["AR"])
                    this.aR!.push(AR3.fromJS(item));
            }
            if (Array.isArray(_data["GR"])) {
                this.gR = [] as any;
                for (let item of _data["GR"])
                    this.gR!.push(GR2.fromJS(item));
            }
            if (Array.isArray(_data["TW"])) {
                this.tW = [] as any;
                for (let item of _data["TW"])
                    this.tW!.push(TW3.fromJS(item));
            }
            if (Array.isArray(_data["ZA"])) {
                this.zA = [] as any;
                for (let item of _data["ZA"])
                    this.zA!.push(ZA3.fromJS(item));
            }
            if (Array.isArray(_data["SG"])) {
                this.sG = [] as any;
                for (let item of _data["SG"])
                    this.sG!.push(SG3.fromJS(item));
            }
            if (Array.isArray(_data["IE"])) {
                this.iE = [] as any;
                for (let item of _data["IE"])
                    this.iE!.push(IE3.fromJS(item));
            }
            if (Array.isArray(_data["PR"])) {
                this.pR = [] as any;
                for (let item of _data["PR"])
                    this.pR!.push(PR.fromJS(item));
            }
            if (Array.isArray(_data["JP"])) {
                this.jP = [] as any;
                for (let item of _data["JP"])
                    this.jP!.push(JP3.fromJS(item));
            }
            if (Array.isArray(_data["VI"])) {
                this.vI = [] as any;
                for (let item of _data["VI"])
                    this.vI!.push(VI.fromJS(item));
            }
            if (Array.isArray(_data["CH"])) {
                this.cH = [] as any;
                for (let item of _data["CH"])
                    this.cH!.push(CH3.fromJS(item));
            }
            if (Array.isArray(_data["IL"])) {
                this.iL = [] as any;
                for (let item of _data["IL"])
                    this.iL!.push(IL3.fromJS(item));
            }
            if (Array.isArray(_data["HK"])) {
                this.hK = [] as any;
                for (let item of _data["HK"])
                    this.hK!.push(HK3.fromJS(item));
            }
            if (Array.isArray(_data["MO"])) {
                this.mO = [] as any;
                for (let item of _data["MO"])
                    this.mO!.push(MO.fromJS(item));
            }
            if (Array.isArray(_data["LV"])) {
                this.lV = [] as any;
                for (let item of _data["LV"])
                    this.lV!.push(LV2.fromJS(item));
            }
            if (Array.isArray(_data["LU"])) {
                this.lU = [] as any;
                for (let item of _data["LU"])
                    this.lU!.push(LU.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Certifications {
        data = typeof data === 'object' ? data : {};
        let result = new Certifications();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.aU)) {
            data["AU"] = [];
            for (let item of this.aU)
                data["AU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.bG)) {
            data["BG"] = [];
            for (let item of this.bG)
                data["BG"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.bR)) {
            data["BR"] = [];
            for (let item of this.bR)
                data["BR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.cA)) {
            data["CA"] = [];
            for (let item of this.cA)
                data["CA"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.cAQC)) {
            data["CA-QC"] = [];
            for (let item of this.cAQC)
                data["CA-QC"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.dE)) {
            data["DE"] = [];
            for (let item of this.dE)
                data["DE"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.dK)) {
            data["DK"] = [];
            for (let item of this.dK)
                data["DK"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.eS)) {
            data["ES"] = [];
            for (let item of this.eS)
                data["ES"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.fI)) {
            data["FI"] = [];
            for (let item of this.fI)
                data["FI"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.fR)) {
            data["FR"] = [];
            for (let item of this.fR)
                data["FR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.gB)) {
            data["GB"] = [];
            for (let item of this.gB)
                data["GB"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.hU)) {
            data["HU"] = [];
            for (let item of this.hU)
                data["HU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iN)) {
            data["IN"] = [];
            for (let item of this.iN)
                data["IN"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iT)) {
            data["IT"] = [];
            for (let item of this.iT)
                data["IT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.lT)) {
            data["LT"] = [];
            for (let item of this.lT)
                data["LT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mY)) {
            data["MY"] = [];
            for (let item of this.mY)
                data["MY"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nL)) {
            data["NL"] = [];
            for (let item of this.nL)
                data["NL"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nO)) {
            data["NO"] = [];
            for (let item of this.nO)
                data["NO"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nZ)) {
            data["NZ"] = [];
            for (let item of this.nZ)
                data["NZ"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pH)) {
            data["PH"] = [];
            for (let item of this.pH)
                data["PH"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pT)) {
            data["PT"] = [];
            for (let item of this.pT)
                data["PT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rU)) {
            data["RU"] = [];
            for (let item of this.rU)
                data["RU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sE)) {
            data["SE"] = [];
            for (let item of this.sE)
                data["SE"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.uS)) {
            data["US"] = [];
            for (let item of this.uS)
                data["US"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.kR)) {
            data["KR"] = [];
            for (let item of this.kR)
                data["KR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sK)) {
            data["SK"] = [];
            for (let item of this.sK)
                data["SK"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tH)) {
            data["TH"] = [];
            for (let item of this.tH)
                data["TH"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mX)) {
            data["MX"] = [];
            for (let item of this.mX)
                data["MX"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iD)) {
            data["ID"] = [];
            for (let item of this.iD)
                data["ID"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tR)) {
            data["TR"] = [];
            for (let item of this.tR)
                data["TR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.aR)) {
            data["AR"] = [];
            for (let item of this.aR)
                data["AR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.gR)) {
            data["GR"] = [];
            for (let item of this.gR)
                data["GR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tW)) {
            data["TW"] = [];
            for (let item of this.tW)
                data["TW"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.zA)) {
            data["ZA"] = [];
            for (let item of this.zA)
                data["ZA"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sG)) {
            data["SG"] = [];
            for (let item of this.sG)
                data["SG"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iE)) {
            data["IE"] = [];
            for (let item of this.iE)
                data["IE"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pR)) {
            data["PR"] = [];
            for (let item of this.pR)
                data["PR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.jP)) {
            data["JP"] = [];
            for (let item of this.jP)
                data["JP"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.vI)) {
            data["VI"] = [];
            for (let item of this.vI)
                data["VI"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.cH)) {
            data["CH"] = [];
            for (let item of this.cH)
                data["CH"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iL)) {
            data["IL"] = [];
            for (let item of this.iL)
                data["IL"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.hK)) {
            data["HK"] = [];
            for (let item of this.hK)
                data["HK"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mO)) {
            data["MO"] = [];
            for (let item of this.mO)
                data["MO"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.lV)) {
            data["LV"] = [];
            for (let item of this.lV)
                data["LV"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.lU)) {
            data["LU"] = [];
            for (let item of this.lU)
                data["LU"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICertifications {
    aU?: AU3[];
    bG?: BG3[];
    bR?: BR3[];
    cA?: CA3[];
    cAQC?: CAQC[];
    dE?: DE3[];
    dK?: DK3[];
    eS?: ES3[];
    fI?: FI3[];
    fR?: FR3[];
    gB?: GB3[];
    hU?: HU3[];
    iN?: IN2[];
    iT?: IT3[];
    lT?: LT3[];
    mY?: MY3[];
    nL?: NL3[];
    nO?: NO3[];
    nZ?: NZ3[];
    pH?: PH3[];
    pT?: PT3[];
    rU?: RU3[];
    sE?: SE3[];
    uS?: US3[];
    kR?: KR3[];
    sK?: SK3[];
    tH?: TH3[];
    mX?: MX3[];
    iD?: ID3[];
    tR?: TR3[];
    aR?: AR3[];
    gR?: GR2[];
    tW?: TW3[];
    zA?: ZA3[];
    sG?: SG3[];
    iE?: IE3[];
    pR?: PR[];
    jP?: JP3[];
    vI?: VI[];
    cH?: CH3[];
    iL?: IL3[];
    hK?: HK3[];
    mO?: MO[];
    lV?: LV2[];
    lU?: LU[];

    [key: string]: any;
}

export class Certifications2 implements ICertifications2 {
    aU?: AU4[];
    bR?: BR4[];
    cA?: CA4[];
    cAQC?: CAQC2[];
    dE?: DE4[];
    eS?: ES4[];
    fR?: FR4[];
    gB?: GB4[];
    hU?: HU4[];
    kR?: KR4[];
    lT?: LT4[];
    nL?: NL4[];
    pH?: PH4[];
    pT?: PT4[];
    rU?: RU4[];
    sK?: SK4[];
    tH?: TH4[];
    uS?: US4[];
    iT?: IT4[];
    fI?: FI4[];
    mY?: MY4[];
    nZ?: NZ4[];
    nO?: NO4[];
    bG?: BG4[];
    mX?: MX4[];
    iN?: IN3[];
    dK?: DK4[];
    sE?: SE4[];
    iD?: ID4[];
    tR?: TR4[];
    aR?: AR4[];
    pL?: PL3[];
    mA?: MA[];
    gR?: GR3[];
    iL?: IL4[];
    tW?: TW4[];
    zA?: ZA4[];
    sG?: SG4[];
    pR?: PR2[];
    vI?: VI2[];

    [key: string]: any;

    constructor(data?: ICertifications2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["AU"])) {
                this.aU = [] as any;
                for (let item of _data["AU"])
                    this.aU!.push(AU4.fromJS(item));
            }
            if (Array.isArray(_data["BR"])) {
                this.bR = [] as any;
                for (let item of _data["BR"])
                    this.bR!.push(BR4.fromJS(item));
            }
            if (Array.isArray(_data["CA"])) {
                this.cA = [] as any;
                for (let item of _data["CA"])
                    this.cA!.push(CA4.fromJS(item));
            }
            if (Array.isArray(_data["CA-QC"])) {
                this.cAQC = [] as any;
                for (let item of _data["CA-QC"])
                    this.cAQC!.push(CAQC2.fromJS(item));
            }
            if (Array.isArray(_data["DE"])) {
                this.dE = [] as any;
                for (let item of _data["DE"])
                    this.dE!.push(DE4.fromJS(item));
            }
            if (Array.isArray(_data["ES"])) {
                this.eS = [] as any;
                for (let item of _data["ES"])
                    this.eS!.push(ES4.fromJS(item));
            }
            if (Array.isArray(_data["FR"])) {
                this.fR = [] as any;
                for (let item of _data["FR"])
                    this.fR!.push(FR4.fromJS(item));
            }
            if (Array.isArray(_data["GB"])) {
                this.gB = [] as any;
                for (let item of _data["GB"])
                    this.gB!.push(GB4.fromJS(item));
            }
            if (Array.isArray(_data["HU"])) {
                this.hU = [] as any;
                for (let item of _data["HU"])
                    this.hU!.push(HU4.fromJS(item));
            }
            if (Array.isArray(_data["KR"])) {
                this.kR = [] as any;
                for (let item of _data["KR"])
                    this.kR!.push(KR4.fromJS(item));
            }
            if (Array.isArray(_data["LT"])) {
                this.lT = [] as any;
                for (let item of _data["LT"])
                    this.lT!.push(LT4.fromJS(item));
            }
            if (Array.isArray(_data["NL"])) {
                this.nL = [] as any;
                for (let item of _data["NL"])
                    this.nL!.push(NL4.fromJS(item));
            }
            if (Array.isArray(_data["PH"])) {
                this.pH = [] as any;
                for (let item of _data["PH"])
                    this.pH!.push(PH4.fromJS(item));
            }
            if (Array.isArray(_data["PT"])) {
                this.pT = [] as any;
                for (let item of _data["PT"])
                    this.pT!.push(PT4.fromJS(item));
            }
            if (Array.isArray(_data["RU"])) {
                this.rU = [] as any;
                for (let item of _data["RU"])
                    this.rU!.push(RU4.fromJS(item));
            }
            if (Array.isArray(_data["SK"])) {
                this.sK = [] as any;
                for (let item of _data["SK"])
                    this.sK!.push(SK4.fromJS(item));
            }
            if (Array.isArray(_data["TH"])) {
                this.tH = [] as any;
                for (let item of _data["TH"])
                    this.tH!.push(TH4.fromJS(item));
            }
            if (Array.isArray(_data["US"])) {
                this.uS = [] as any;
                for (let item of _data["US"])
                    this.uS!.push(US4.fromJS(item));
            }
            if (Array.isArray(_data["IT"])) {
                this.iT = [] as any;
                for (let item of _data["IT"])
                    this.iT!.push(IT4.fromJS(item));
            }
            if (Array.isArray(_data["FI"])) {
                this.fI = [] as any;
                for (let item of _data["FI"])
                    this.fI!.push(FI4.fromJS(item));
            }
            if (Array.isArray(_data["MY"])) {
                this.mY = [] as any;
                for (let item of _data["MY"])
                    this.mY!.push(MY4.fromJS(item));
            }
            if (Array.isArray(_data["NZ"])) {
                this.nZ = [] as any;
                for (let item of _data["NZ"])
                    this.nZ!.push(NZ4.fromJS(item));
            }
            if (Array.isArray(_data["NO"])) {
                this.nO = [] as any;
                for (let item of _data["NO"])
                    this.nO!.push(NO4.fromJS(item));
            }
            if (Array.isArray(_data["BG"])) {
                this.bG = [] as any;
                for (let item of _data["BG"])
                    this.bG!.push(BG4.fromJS(item));
            }
            if (Array.isArray(_data["MX"])) {
                this.mX = [] as any;
                for (let item of _data["MX"])
                    this.mX!.push(MX4.fromJS(item));
            }
            if (Array.isArray(_data["IN"])) {
                this.iN = [] as any;
                for (let item of _data["IN"])
                    this.iN!.push(IN3.fromJS(item));
            }
            if (Array.isArray(_data["DK"])) {
                this.dK = [] as any;
                for (let item of _data["DK"])
                    this.dK!.push(DK4.fromJS(item));
            }
            if (Array.isArray(_data["SE"])) {
                this.sE = [] as any;
                for (let item of _data["SE"])
                    this.sE!.push(SE4.fromJS(item));
            }
            if (Array.isArray(_data["ID"])) {
                this.iD = [] as any;
                for (let item of _data["ID"])
                    this.iD!.push(ID4.fromJS(item));
            }
            if (Array.isArray(_data["TR"])) {
                this.tR = [] as any;
                for (let item of _data["TR"])
                    this.tR!.push(TR4.fromJS(item));
            }
            if (Array.isArray(_data["AR"])) {
                this.aR = [] as any;
                for (let item of _data["AR"])
                    this.aR!.push(AR4.fromJS(item));
            }
            if (Array.isArray(_data["PL"])) {
                this.pL = [] as any;
                for (let item of _data["PL"])
                    this.pL!.push(PL3.fromJS(item));
            }
            if (Array.isArray(_data["MA"])) {
                this.mA = [] as any;
                for (let item of _data["MA"])
                    this.mA!.push(MA.fromJS(item));
            }
            if (Array.isArray(_data["GR"])) {
                this.gR = [] as any;
                for (let item of _data["GR"])
                    this.gR!.push(GR3.fromJS(item));
            }
            if (Array.isArray(_data["IL"])) {
                this.iL = [] as any;
                for (let item of _data["IL"])
                    this.iL!.push(IL4.fromJS(item));
            }
            if (Array.isArray(_data["TW"])) {
                this.tW = [] as any;
                for (let item of _data["TW"])
                    this.tW!.push(TW4.fromJS(item));
            }
            if (Array.isArray(_data["ZA"])) {
                this.zA = [] as any;
                for (let item of _data["ZA"])
                    this.zA!.push(ZA4.fromJS(item));
            }
            if (Array.isArray(_data["SG"])) {
                this.sG = [] as any;
                for (let item of _data["SG"])
                    this.sG!.push(SG4.fromJS(item));
            }
            if (Array.isArray(_data["PR"])) {
                this.pR = [] as any;
                for (let item of _data["PR"])
                    this.pR!.push(PR2.fromJS(item));
            }
            if (Array.isArray(_data["VI"])) {
                this.vI = [] as any;
                for (let item of _data["VI"])
                    this.vI!.push(VI2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Certifications2 {
        data = typeof data === 'object' ? data : {};
        let result = new Certifications2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.aU)) {
            data["AU"] = [];
            for (let item of this.aU)
                data["AU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.bR)) {
            data["BR"] = [];
            for (let item of this.bR)
                data["BR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.cA)) {
            data["CA"] = [];
            for (let item of this.cA)
                data["CA"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.cAQC)) {
            data["CA-QC"] = [];
            for (let item of this.cAQC)
                data["CA-QC"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.dE)) {
            data["DE"] = [];
            for (let item of this.dE)
                data["DE"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.eS)) {
            data["ES"] = [];
            for (let item of this.eS)
                data["ES"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.fR)) {
            data["FR"] = [];
            for (let item of this.fR)
                data["FR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.gB)) {
            data["GB"] = [];
            for (let item of this.gB)
                data["GB"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.hU)) {
            data["HU"] = [];
            for (let item of this.hU)
                data["HU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.kR)) {
            data["KR"] = [];
            for (let item of this.kR)
                data["KR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.lT)) {
            data["LT"] = [];
            for (let item of this.lT)
                data["LT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nL)) {
            data["NL"] = [];
            for (let item of this.nL)
                data["NL"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pH)) {
            data["PH"] = [];
            for (let item of this.pH)
                data["PH"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pT)) {
            data["PT"] = [];
            for (let item of this.pT)
                data["PT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rU)) {
            data["RU"] = [];
            for (let item of this.rU)
                data["RU"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sK)) {
            data["SK"] = [];
            for (let item of this.sK)
                data["SK"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tH)) {
            data["TH"] = [];
            for (let item of this.tH)
                data["TH"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.uS)) {
            data["US"] = [];
            for (let item of this.uS)
                data["US"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iT)) {
            data["IT"] = [];
            for (let item of this.iT)
                data["IT"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.fI)) {
            data["FI"] = [];
            for (let item of this.fI)
                data["FI"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mY)) {
            data["MY"] = [];
            for (let item of this.mY)
                data["MY"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nZ)) {
            data["NZ"] = [];
            for (let item of this.nZ)
                data["NZ"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.nO)) {
            data["NO"] = [];
            for (let item of this.nO)
                data["NO"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.bG)) {
            data["BG"] = [];
            for (let item of this.bG)
                data["BG"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mX)) {
            data["MX"] = [];
            for (let item of this.mX)
                data["MX"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iN)) {
            data["IN"] = [];
            for (let item of this.iN)
                data["IN"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.dK)) {
            data["DK"] = [];
            for (let item of this.dK)
                data["DK"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sE)) {
            data["SE"] = [];
            for (let item of this.sE)
                data["SE"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iD)) {
            data["ID"] = [];
            for (let item of this.iD)
                data["ID"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tR)) {
            data["TR"] = [];
            for (let item of this.tR)
                data["TR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.aR)) {
            data["AR"] = [];
            for (let item of this.aR)
                data["AR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pL)) {
            data["PL"] = [];
            for (let item of this.pL)
                data["PL"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.mA)) {
            data["MA"] = [];
            for (let item of this.mA)
                data["MA"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.gR)) {
            data["GR"] = [];
            for (let item of this.gR)
                data["GR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.iL)) {
            data["IL"] = [];
            for (let item of this.iL)
                data["IL"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.tW)) {
            data["TW"] = [];
            for (let item of this.tW)
                data["TW"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.zA)) {
            data["ZA"] = [];
            for (let item of this.zA)
                data["ZA"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.sG)) {
            data["SG"] = [];
            for (let item of this.sG)
                data["SG"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.pR)) {
            data["PR"] = [];
            for (let item of this.pR)
                data["PR"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.vI)) {
            data["VI"] = [];
            for (let item of this.vI)
                data["VI"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICertifications2 {
    aU?: AU4[];
    bR?: BR4[];
    cA?: CA4[];
    cAQC?: CAQC2[];
    dE?: DE4[];
    eS?: ES4[];
    fR?: FR4[];
    gB?: GB4[];
    hU?: HU4[];
    kR?: KR4[];
    lT?: LT4[];
    nL?: NL4[];
    pH?: PH4[];
    pT?: PT4[];
    rU?: RU4[];
    sK?: SK4[];
    tH?: TH4[];
    uS?: US4[];
    iT?: IT4[];
    fI?: FI4[];
    mY?: MY4[];
    nZ?: NZ4[];
    nO?: NO4[];
    bG?: BG4[];
    mX?: MX4[];
    iN?: IN3[];
    dK?: DK4[];
    sE?: SE4[];
    iD?: ID4[];
    tR?: TR4[];
    aR?: AR4[];
    pL?: PL3[];
    mA?: MA[];
    gR?: GR3[];
    iL?: IL4[];
    tW?: TW4[];
    zA?: ZA4[];
    sG?: SG4[];
    pR?: PR2[];
    vI?: VI2[];

    [key: string]: any;
}

export class Results48 implements IResults48 {
    id?: number;
    adult?: boolean;

    [key: string]: any;

    constructor(data?: IResults48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.adult = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
        }
    }

    static fromJS(data: any): Results48 {
        data = typeof data === 'object' ? data : {};
        let result = new Results48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["adult"] = this.adult;
        return data;
    }
}

export interface IResults48 {
    id?: number;
    adult?: boolean;

    [key: string]: any;
}

export class Results49 implements IResults49 {
    id?: number;
    adult?: boolean;

    [key: string]: any;

    constructor(data?: IResults49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.adult = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
        }
    }

    static fromJS(data: any): Results49 {
        data = typeof data === 'object' ? data : {};
        let result = new Results49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["adult"] = this.adult;
        return data;
    }
}

export interface IResults49 {
    id?: number;
    adult?: boolean;

    [key: string]: any;
}

export class Results50 implements IResults50 {
    id?: number;
    adult?: boolean;

    [key: string]: any;

    constructor(data?: IResults50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
            this.adult = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
        }
    }

    static fromJS(data: any): Results50 {
        data = typeof data === 'object' ? data : {};
        let result = new Results50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["adult"] = this.adult;
        return data;
    }
}

export interface IResults50 {
    id?: number;
    adult?: boolean;

    [key: string]: any;
}

export class Parts implements IParts {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IParts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Parts {
        data = typeof data === 'object' ? data : {};
        let result = new Parts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IParts {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Backdrops3 implements IBackdrops3 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IBackdrops3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Backdrops3 {
        data = typeof data === 'object' ? data : {};
        let result = new Backdrops3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IBackdrops3 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: any;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Posters4 implements IPosters4 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: IPosters4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.file_path = _data["file_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Posters4 {
        data = typeof data === 'object' ? data : {};
        let result = new Posters4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["height"] = this.height;
        data["iso_639_1"] = this.iso_639_1;
        data["file_path"] = this.file_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface IPosters4 {
    aspect_ratio?: number;
    height?: number;
    iso_639_1?: string;
    file_path?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Translations6 implements ITranslations6 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data6;

    [key: string]: any;

    constructor(data?: ITranslations6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.iso_639_1 = _data["iso_639_1"];
            this.name = _data["name"];
            this.english_name = _data["english_name"];
            this.data = _data["data"] ? Data6.fromJS(_data["data"]) : undefined as any;
        }
    }

    static fromJS(data: any): Translations6 {
        data = typeof data === 'object' ? data : {};
        let result = new Translations6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["iso_639_1"] = this.iso_639_1;
        data["name"] = this.name;
        data["english_name"] = this.english_name;
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        return data;
    }
}

export interface ITranslations6 {
    iso_3166_1?: string;
    iso_639_1?: string;
    name?: string;
    english_name?: string;
    data?: Data6;

    [key: string]: any;
}

export class Results51 implements IResults51 {
    name?: string;
    type?: string;

    [key: string]: any;

    constructor(data?: IResults51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Results51 {
        data = typeof data === 'object' ? data : {};
        let result = new Results51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}

export interface IResults51 {
    name?: string;
    type?: string;

    [key: string]: any;
}

export class Logos3 implements ILogos3 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    file_type?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: ILogos3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.file_path = _data["file_path"];
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.id = _data["id"];
            this.file_type = _data["file_type"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Logos3 {
        data = typeof data === 'object' ? data : {};
        let result = new Logos3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["file_path"] = this.file_path;
        data["height"] = this.height;
        data["id"] = this.id;
        data["file_type"] = this.file_type;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface ILogos3 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    file_type?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Media implements IMedia {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];
    character?: string;
    episodes?: any[];
    seasons?: Seasons3[];

    [key: string]: any;

    constructor(data?: IMedia) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.first_air_date = _data["first_air_date"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.character = _data["character"];
            if (Array.isArray(_data["episodes"])) {
                this.episodes = [] as any;
                for (let item of _data["episodes"])
                    this.episodes!.push(item);
            }
            if (Array.isArray(_data["seasons"])) {
                this.seasons = [] as any;
                for (let item of _data["seasons"])
                    this.seasons!.push(Seasons3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Media {
        data = typeof data === 'object' ? data : {};
        let result = new Media();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["first_air_date"] = this.first_air_date;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["character"] = this.character;
        if (Array.isArray(this.episodes)) {
            data["episodes"] = [];
            for (let item of this.episodes)
                data["episodes"].push(item);
        }
        if (Array.isArray(this.seasons)) {
            data["seasons"] = [];
            for (let item of this.seasons)
                data["seasons"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMedia {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    first_air_date?: string;
    vote_average?: number;
    vote_count?: number;
    origin_country?: string[];
    character?: string;
    episodes?: any[];
    seasons?: Seasons3[];

    [key: string]: any;
}

export class Person implements IPerson {
    adult?: boolean;
    id?: number;
    name?: string;
    original_name?: string;
    media_type?: string;
    popularity?: number;
    gender?: number;
    known_for_department?: string;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.gender = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.media_type = _data["media_type"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["media_type"] = this.media_type;
        data["popularity"] = this.popularity;
        data["gender"] = this.gender;
        data["known_for_department"] = this.known_for_department;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IPerson {
    adult?: boolean;
    id?: number;
    name?: string;
    original_name?: string;
    media_type?: string;
    popularity?: number;
    gender?: number;
    known_for_department?: string;
    profile_path?: string;

    [key: string]: any;
}

export class Genres3 implements IGenres3 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IGenres3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Genres3 {
        data = typeof data === 'object' ? data : {};
        let result = new Genres3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenres3 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Genres4 implements IGenres4 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IGenres4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Genres4 {
        data = typeof data === 'object' ? data : {};
        let result = new Genres4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGenres4 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Results52 implements IResults52 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results52 {
        data = typeof data === 'object' ? data : {};
        let result = new Results52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults52 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results53 implements IResults53 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            if (Array.isArray(_data["origin_country"])) {
                this.origin_country = [] as any;
                for (let item of _data["origin_country"])
                    this.origin_country!.push(item);
            }
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.first_air_date = _data["first_air_date"];
            this.name = _data["name"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results53 {
        data = typeof data === 'object' ? data : {};
        let result = new Results53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        if (Array.isArray(this.origin_country)) {
            data["origin_country"] = [];
            for (let item of this.origin_country)
                data["origin_country"].push(item);
        }
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["first_air_date"] = this.first_air_date;
        data["name"] = this.name;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults53 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    origin_country?: string[];
    original_language?: string;
    original_name?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    first_air_date?: string;
    name?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results54 implements IResults54 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;

    constructor(data?: IResults54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_number = 0;
            this.id = 0;
            this.runtime = 0;
            this.season_number = 0;
            this.show_id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Results54 {
        data = typeof data === 'object' ? data : {};
        let result = new Results54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IResults54 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: number;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    rating?: number;

    [key: string]: any;
}

export class Results55 implements IResults55 {
    iso_3166_1?: string;
    english_name?: string;
    native_name?: string;

    [key: string]: any;

    constructor(data?: IResults55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.iso_3166_1 = _data["iso_3166_1"];
            this.english_name = _data["english_name"];
            this.native_name = _data["native_name"];
        }
    }

    static fromJS(data: any): Results55 {
        data = typeof data === 'object' ? data : {};
        let result = new Results55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["iso_3166_1"] = this.iso_3166_1;
        data["english_name"] = this.english_name;
        data["native_name"] = this.native_name;
        return data;
    }
}

export interface IResults55 {
    iso_3166_1?: string;
    english_name?: string;
    native_name?: string;

    [key: string]: any;
}

export class Results56 implements IResults56 {
    display_priorities?: Display_priorities;
    display_priority?: number;
    logo_path?: string;
    provider_name?: string;
    provider_id?: number;

    [key: string]: any;

    constructor(data?: IResults56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.display_priority = 0;
            this.provider_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.display_priorities = _data["display_priorities"] ? Display_priorities.fromJS(_data["display_priorities"]) : undefined as any;
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
            this.logo_path = _data["logo_path"];
            this.provider_name = _data["provider_name"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
        }
    }

    static fromJS(data: any): Results56 {
        data = typeof data === 'object' ? data : {};
        let result = new Results56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["display_priorities"] = this.display_priorities ? this.display_priorities.toJSON() : undefined as any;
        data["display_priority"] = this.display_priority;
        data["logo_path"] = this.logo_path;
        data["provider_name"] = this.provider_name;
        data["provider_id"] = this.provider_id;
        return data;
    }
}

export interface IResults56 {
    display_priorities?: Display_priorities;
    display_priority?: number;
    logo_path?: string;
    provider_name?: string;
    provider_id?: number;

    [key: string]: any;
}

export class Results57 implements IResults57 {
    display_priorities?: Display_priorities2;
    display_priority?: number;
    logo_path?: string;
    provider_name?: string;
    provider_id?: number;

    [key: string]: any;

    constructor(data?: IResults57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.display_priority = 0;
            this.provider_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.display_priorities = _data["display_priorities"] ? Display_priorities2.fromJS(_data["display_priorities"]) : undefined as any;
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
            this.logo_path = _data["logo_path"];
            this.provider_name = _data["provider_name"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
        }
    }

    static fromJS(data: any): Results57 {
        data = typeof data === 'object' ? data : {};
        let result = new Results57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["display_priorities"] = this.display_priorities ? this.display_priorities.toJSON() : undefined as any;
        data["display_priority"] = this.display_priority;
        data["logo_path"] = this.logo_path;
        data["provider_name"] = this.provider_name;
        data["provider_id"] = this.provider_id;
        return data;
    }
}

export interface IResults57 {
    display_priorities?: Display_priorities2;
    display_priority?: number;
    logo_path?: string;
    provider_name?: string;
    provider_id?: number;

    [key: string]: any;
}

export class Results58 implements IResults58 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IResults58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Results58 {
        data = typeof data === 'object' ? data : {};
        let result = new Results58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IResults58 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Items implements IItems {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    media_type?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.media_type = _data["media_type"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Items {
        data = typeof data === 'object' ? data : {};
        let result = new Items();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["media_type"] = this.media_type;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["popularity"] = this.popularity;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IItems {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    media_type?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    popularity?: number;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Results59 implements IResults59 {
    name?: string;
    type?: string;

    [key: string]: any;

    constructor(data?: IResults59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Results59 {
        data = typeof data === 'object' ? data : {};
        let result = new Results59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    }
}

export interface IResults59 {
    name?: string;
    type?: string;

    [key: string]: any;
}

export class Logos4 implements ILogos4 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    file_type?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;

    constructor(data?: ILogos4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.aspect_ratio = 0;
            this.height = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.width = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aspect_ratio = _data["aspect_ratio"] !== undefined ? _data["aspect_ratio"] : 0;
            this.file_path = _data["file_path"];
            this.height = _data["height"] !== undefined ? _data["height"] : 0;
            this.id = _data["id"];
            this.file_type = _data["file_type"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.width = _data["width"] !== undefined ? _data["width"] : 0;
        }
    }

    static fromJS(data: any): Logos4 {
        data = typeof data === 'object' ? data : {};
        let result = new Logos4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["aspect_ratio"] = this.aspect_ratio;
        data["file_path"] = this.file_path;
        data["height"] = this.height;
        data["id"] = this.id;
        data["file_type"] = this.file_type;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["width"] = this.width;
        return data;
    }
}

export interface ILogos4 {
    aspect_ratio?: number;
    file_path?: string;
    height?: number;
    id?: string;
    file_type?: string;
    vote_average?: number;
    vote_count?: number;
    width?: number;

    [key: string]: any;
}

export class Author_details implements IAuthor_details {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: number;

    [key: string]: any;

    constructor(data?: IAuthor_details) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.username = _data["username"];
            this.avatar_path = _data["avatar_path"];
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Author_details {
        data = typeof data === 'object' ? data : {};
        let result = new Author_details();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["username"] = this.username;
        data["avatar_path"] = this.avatar_path;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IAuthor_details {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: number;

    [key: string]: any;
}

export class Results60 implements IResults60 {
    aE?: AE3;
    aR?: AR5;
    aT?: AT3;
    aU?: AU5;
    bA?: BA3;
    bB?: BB3;
    bE?: BE3;
    bG?: BG5;
    bO?: BO3;
    bR?: BR5;
    bS?: BS3;
    cA?: CA5;
    cH?: CH4;
    cI?: CI2;
    cL?: CL3;
    cO?: CO3;
    cR?: CR3;
    cZ?: CZ3;
    dE?: DE5;
    dK?: DK5;
    dO?: DO3;
    dZ?: DZ2;
    eC?: EC3;
    eG?: EG3;
    eS?: ES5;
    fI?: FI5;
    fR?: FR5;
    gB?: GB5;
    gF?: GF3;
    gH?: GH2;
    gQ?: GQ2;
    gT?: GT3;
    hK?: HK4;
    hN?: HN3;
    hR?: HR3;
    hU?: HU5;
    iD?: ID5;
    iE?: IE4;
    iL?: IL5;
    iQ?: IQ3;
    iT?: IT5;
    jM?: JM3;
    jP?: JP4;
    kE?: KE2;
    kR?: KR5;
    lB?: LB3;
    lY?: LY2;
    mD?: MD3;
    mK?: MK3;
    mU?: MU3;
    mX?: MX5;
    mY?: MY5;
    mZ?: MZ3;
    nE?: NE2;
    nG?: NG2;
    nL?: NL5;
    nO?: NO5;
    nZ?: NZ5;
    pA?: PA3;
    pE?: PE3;
    pH?: PH5;
    pL?: PL4;
    pS?: PS3;
    pT?: PT5;
    pY?: PY3;
    rO?: RO3;
    rS?: RS3;
    rU?: RU5;
    sA?: SA3;
    sC?: SC2;
    sE?: SE5;
    sG?: SG5;
    sI?: SI3;
    sK?: SK5;
    sN?: SN2;
    sV?: SV3;
    tH?: TH5;
    tR?: TR5;
    tT?: TT3;
    tW?: TW5;
    tZ?: TZ2;
    uG?: UG3;
    uS?: US5;
    uY?: UY3;
    vE?: VE3;
    zA?: ZA5;
    zM?: ZM2;

    [key: string]: any;

    constructor(data?: IResults60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.aE = _data["AE"] ? AE3.fromJS(_data["AE"]) : undefined as any;
            this.aR = _data["AR"] ? AR5.fromJS(_data["AR"]) : undefined as any;
            this.aT = _data["AT"] ? AT3.fromJS(_data["AT"]) : undefined as any;
            this.aU = _data["AU"] ? AU5.fromJS(_data["AU"]) : undefined as any;
            this.bA = _data["BA"] ? BA3.fromJS(_data["BA"]) : undefined as any;
            this.bB = _data["BB"] ? BB3.fromJS(_data["BB"]) : undefined as any;
            this.bE = _data["BE"] ? BE3.fromJS(_data["BE"]) : undefined as any;
            this.bG = _data["BG"] ? BG5.fromJS(_data["BG"]) : undefined as any;
            this.bO = _data["BO"] ? BO3.fromJS(_data["BO"]) : undefined as any;
            this.bR = _data["BR"] ? BR5.fromJS(_data["BR"]) : undefined as any;
            this.bS = _data["BS"] ? BS3.fromJS(_data["BS"]) : undefined as any;
            this.cA = _data["CA"] ? CA5.fromJS(_data["CA"]) : undefined as any;
            this.cH = _data["CH"] ? CH4.fromJS(_data["CH"]) : undefined as any;
            this.cI = _data["CI"] ? CI2.fromJS(_data["CI"]) : undefined as any;
            this.cL = _data["CL"] ? CL3.fromJS(_data["CL"]) : undefined as any;
            this.cO = _data["CO"] ? CO3.fromJS(_data["CO"]) : undefined as any;
            this.cR = _data["CR"] ? CR3.fromJS(_data["CR"]) : undefined as any;
            this.cZ = _data["CZ"] ? CZ3.fromJS(_data["CZ"]) : undefined as any;
            this.dE = _data["DE"] ? DE5.fromJS(_data["DE"]) : undefined as any;
            this.dK = _data["DK"] ? DK5.fromJS(_data["DK"]) : undefined as any;
            this.dO = _data["DO"] ? DO3.fromJS(_data["DO"]) : undefined as any;
            this.dZ = _data["DZ"] ? DZ2.fromJS(_data["DZ"]) : undefined as any;
            this.eC = _data["EC"] ? EC3.fromJS(_data["EC"]) : undefined as any;
            this.eG = _data["EG"] ? EG3.fromJS(_data["EG"]) : undefined as any;
            this.eS = _data["ES"] ? ES5.fromJS(_data["ES"]) : undefined as any;
            this.fI = _data["FI"] ? FI5.fromJS(_data["FI"]) : undefined as any;
            this.fR = _data["FR"] ? FR5.fromJS(_data["FR"]) : undefined as any;
            this.gB = _data["GB"] ? GB5.fromJS(_data["GB"]) : undefined as any;
            this.gF = _data["GF"] ? GF3.fromJS(_data["GF"]) : undefined as any;
            this.gH = _data["GH"] ? GH2.fromJS(_data["GH"]) : undefined as any;
            this.gQ = _data["GQ"] ? GQ2.fromJS(_data["GQ"]) : undefined as any;
            this.gT = _data["GT"] ? GT3.fromJS(_data["GT"]) : undefined as any;
            this.hK = _data["HK"] ? HK4.fromJS(_data["HK"]) : undefined as any;
            this.hN = _data["HN"] ? HN3.fromJS(_data["HN"]) : undefined as any;
            this.hR = _data["HR"] ? HR3.fromJS(_data["HR"]) : undefined as any;
            this.hU = _data["HU"] ? HU5.fromJS(_data["HU"]) : undefined as any;
            this.iD = _data["ID"] ? ID5.fromJS(_data["ID"]) : undefined as any;
            this.iE = _data["IE"] ? IE4.fromJS(_data["IE"]) : undefined as any;
            this.iL = _data["IL"] ? IL5.fromJS(_data["IL"]) : undefined as any;
            this.iQ = _data["IQ"] ? IQ3.fromJS(_data["IQ"]) : undefined as any;
            this.iT = _data["IT"] ? IT5.fromJS(_data["IT"]) : undefined as any;
            this.jM = _data["JM"] ? JM3.fromJS(_data["JM"]) : undefined as any;
            this.jP = _data["JP"] ? JP4.fromJS(_data["JP"]) : undefined as any;
            this.kE = _data["KE"] ? KE2.fromJS(_data["KE"]) : undefined as any;
            this.kR = _data["KR"] ? KR5.fromJS(_data["KR"]) : undefined as any;
            this.lB = _data["LB"] ? LB3.fromJS(_data["LB"]) : undefined as any;
            this.lY = _data["LY"] ? LY2.fromJS(_data["LY"]) : undefined as any;
            this.mD = _data["MD"] ? MD3.fromJS(_data["MD"]) : undefined as any;
            this.mK = _data["MK"] ? MK3.fromJS(_data["MK"]) : undefined as any;
            this.mU = _data["MU"] ? MU3.fromJS(_data["MU"]) : undefined as any;
            this.mX = _data["MX"] ? MX5.fromJS(_data["MX"]) : undefined as any;
            this.mY = _data["MY"] ? MY5.fromJS(_data["MY"]) : undefined as any;
            this.mZ = _data["MZ"] ? MZ3.fromJS(_data["MZ"]) : undefined as any;
            this.nE = _data["NE"] ? NE2.fromJS(_data["NE"]) : undefined as any;
            this.nG = _data["NG"] ? NG2.fromJS(_data["NG"]) : undefined as any;
            this.nL = _data["NL"] ? NL5.fromJS(_data["NL"]) : undefined as any;
            this.nO = _data["NO"] ? NO5.fromJS(_data["NO"]) : undefined as any;
            this.nZ = _data["NZ"] ? NZ5.fromJS(_data["NZ"]) : undefined as any;
            this.pA = _data["PA"] ? PA3.fromJS(_data["PA"]) : undefined as any;
            this.pE = _data["PE"] ? PE3.fromJS(_data["PE"]) : undefined as any;
            this.pH = _data["PH"] ? PH5.fromJS(_data["PH"]) : undefined as any;
            this.pL = _data["PL"] ? PL4.fromJS(_data["PL"]) : undefined as any;
            this.pS = _data["PS"] ? PS3.fromJS(_data["PS"]) : undefined as any;
            this.pT = _data["PT"] ? PT5.fromJS(_data["PT"]) : undefined as any;
            this.pY = _data["PY"] ? PY3.fromJS(_data["PY"]) : undefined as any;
            this.rO = _data["RO"] ? RO3.fromJS(_data["RO"]) : undefined as any;
            this.rS = _data["RS"] ? RS3.fromJS(_data["RS"]) : undefined as any;
            this.rU = _data["RU"] ? RU5.fromJS(_data["RU"]) : undefined as any;
            this.sA = _data["SA"] ? SA3.fromJS(_data["SA"]) : undefined as any;
            this.sC = _data["SC"] ? SC2.fromJS(_data["SC"]) : undefined as any;
            this.sE = _data["SE"] ? SE5.fromJS(_data["SE"]) : undefined as any;
            this.sG = _data["SG"] ? SG5.fromJS(_data["SG"]) : undefined as any;
            this.sI = _data["SI"] ? SI3.fromJS(_data["SI"]) : undefined as any;
            this.sK = _data["SK"] ? SK5.fromJS(_data["SK"]) : undefined as any;
            this.sN = _data["SN"] ? SN2.fromJS(_data["SN"]) : undefined as any;
            this.sV = _data["SV"] ? SV3.fromJS(_data["SV"]) : undefined as any;
            this.tH = _data["TH"] ? TH5.fromJS(_data["TH"]) : undefined as any;
            this.tR = _data["TR"] ? TR5.fromJS(_data["TR"]) : undefined as any;
            this.tT = _data["TT"] ? TT3.fromJS(_data["TT"]) : undefined as any;
            this.tW = _data["TW"] ? TW5.fromJS(_data["TW"]) : undefined as any;
            this.tZ = _data["TZ"] ? TZ2.fromJS(_data["TZ"]) : undefined as any;
            this.uG = _data["UG"] ? UG3.fromJS(_data["UG"]) : undefined as any;
            this.uS = _data["US"] ? US5.fromJS(_data["US"]) : undefined as any;
            this.uY = _data["UY"] ? UY3.fromJS(_data["UY"]) : undefined as any;
            this.vE = _data["VE"] ? VE3.fromJS(_data["VE"]) : undefined as any;
            this.zA = _data["ZA"] ? ZA5.fromJS(_data["ZA"]) : undefined as any;
            this.zM = _data["ZM"] ? ZM2.fromJS(_data["ZM"]) : undefined as any;
        }
    }

    static fromJS(data: any): Results60 {
        data = typeof data === 'object' ? data : {};
        let result = new Results60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["AE"] = this.aE ? this.aE.toJSON() : undefined as any;
        data["AR"] = this.aR ? this.aR.toJSON() : undefined as any;
        data["AT"] = this.aT ? this.aT.toJSON() : undefined as any;
        data["AU"] = this.aU ? this.aU.toJSON() : undefined as any;
        data["BA"] = this.bA ? this.bA.toJSON() : undefined as any;
        data["BB"] = this.bB ? this.bB.toJSON() : undefined as any;
        data["BE"] = this.bE ? this.bE.toJSON() : undefined as any;
        data["BG"] = this.bG ? this.bG.toJSON() : undefined as any;
        data["BO"] = this.bO ? this.bO.toJSON() : undefined as any;
        data["BR"] = this.bR ? this.bR.toJSON() : undefined as any;
        data["BS"] = this.bS ? this.bS.toJSON() : undefined as any;
        data["CA"] = this.cA ? this.cA.toJSON() : undefined as any;
        data["CH"] = this.cH ? this.cH.toJSON() : undefined as any;
        data["CI"] = this.cI ? this.cI.toJSON() : undefined as any;
        data["CL"] = this.cL ? this.cL.toJSON() : undefined as any;
        data["CO"] = this.cO ? this.cO.toJSON() : undefined as any;
        data["CR"] = this.cR ? this.cR.toJSON() : undefined as any;
        data["CZ"] = this.cZ ? this.cZ.toJSON() : undefined as any;
        data["DE"] = this.dE ? this.dE.toJSON() : undefined as any;
        data["DK"] = this.dK ? this.dK.toJSON() : undefined as any;
        data["DO"] = this.dO ? this.dO.toJSON() : undefined as any;
        data["DZ"] = this.dZ ? this.dZ.toJSON() : undefined as any;
        data["EC"] = this.eC ? this.eC.toJSON() : undefined as any;
        data["EG"] = this.eG ? this.eG.toJSON() : undefined as any;
        data["ES"] = this.eS ? this.eS.toJSON() : undefined as any;
        data["FI"] = this.fI ? this.fI.toJSON() : undefined as any;
        data["FR"] = this.fR ? this.fR.toJSON() : undefined as any;
        data["GB"] = this.gB ? this.gB.toJSON() : undefined as any;
        data["GF"] = this.gF ? this.gF.toJSON() : undefined as any;
        data["GH"] = this.gH ? this.gH.toJSON() : undefined as any;
        data["GQ"] = this.gQ ? this.gQ.toJSON() : undefined as any;
        data["GT"] = this.gT ? this.gT.toJSON() : undefined as any;
        data["HK"] = this.hK ? this.hK.toJSON() : undefined as any;
        data["HN"] = this.hN ? this.hN.toJSON() : undefined as any;
        data["HR"] = this.hR ? this.hR.toJSON() : undefined as any;
        data["HU"] = this.hU ? this.hU.toJSON() : undefined as any;
        data["ID"] = this.iD ? this.iD.toJSON() : undefined as any;
        data["IE"] = this.iE ? this.iE.toJSON() : undefined as any;
        data["IL"] = this.iL ? this.iL.toJSON() : undefined as any;
        data["IQ"] = this.iQ ? this.iQ.toJSON() : undefined as any;
        data["IT"] = this.iT ? this.iT.toJSON() : undefined as any;
        data["JM"] = this.jM ? this.jM.toJSON() : undefined as any;
        data["JP"] = this.jP ? this.jP.toJSON() : undefined as any;
        data["KE"] = this.kE ? this.kE.toJSON() : undefined as any;
        data["KR"] = this.kR ? this.kR.toJSON() : undefined as any;
        data["LB"] = this.lB ? this.lB.toJSON() : undefined as any;
        data["LY"] = this.lY ? this.lY.toJSON() : undefined as any;
        data["MD"] = this.mD ? this.mD.toJSON() : undefined as any;
        data["MK"] = this.mK ? this.mK.toJSON() : undefined as any;
        data["MU"] = this.mU ? this.mU.toJSON() : undefined as any;
        data["MX"] = this.mX ? this.mX.toJSON() : undefined as any;
        data["MY"] = this.mY ? this.mY.toJSON() : undefined as any;
        data["MZ"] = this.mZ ? this.mZ.toJSON() : undefined as any;
        data["NE"] = this.nE ? this.nE.toJSON() : undefined as any;
        data["NG"] = this.nG ? this.nG.toJSON() : undefined as any;
        data["NL"] = this.nL ? this.nL.toJSON() : undefined as any;
        data["NO"] = this.nO ? this.nO.toJSON() : undefined as any;
        data["NZ"] = this.nZ ? this.nZ.toJSON() : undefined as any;
        data["PA"] = this.pA ? this.pA.toJSON() : undefined as any;
        data["PE"] = this.pE ? this.pE.toJSON() : undefined as any;
        data["PH"] = this.pH ? this.pH.toJSON() : undefined as any;
        data["PL"] = this.pL ? this.pL.toJSON() : undefined as any;
        data["PS"] = this.pS ? this.pS.toJSON() : undefined as any;
        data["PT"] = this.pT ? this.pT.toJSON() : undefined as any;
        data["PY"] = this.pY ? this.pY.toJSON() : undefined as any;
        data["RO"] = this.rO ? this.rO.toJSON() : undefined as any;
        data["RS"] = this.rS ? this.rS.toJSON() : undefined as any;
        data["RU"] = this.rU ? this.rU.toJSON() : undefined as any;
        data["SA"] = this.sA ? this.sA.toJSON() : undefined as any;
        data["SC"] = this.sC ? this.sC.toJSON() : undefined as any;
        data["SE"] = this.sE ? this.sE.toJSON() : undefined as any;
        data["SG"] = this.sG ? this.sG.toJSON() : undefined as any;
        data["SI"] = this.sI ? this.sI.toJSON() : undefined as any;
        data["SK"] = this.sK ? this.sK.toJSON() : undefined as any;
        data["SN"] = this.sN ? this.sN.toJSON() : undefined as any;
        data["SV"] = this.sV ? this.sV.toJSON() : undefined as any;
        data["TH"] = this.tH ? this.tH.toJSON() : undefined as any;
        data["TR"] = this.tR ? this.tR.toJSON() : undefined as any;
        data["TT"] = this.tT ? this.tT.toJSON() : undefined as any;
        data["TW"] = this.tW ? this.tW.toJSON() : undefined as any;
        data["TZ"] = this.tZ ? this.tZ.toJSON() : undefined as any;
        data["UG"] = this.uG ? this.uG.toJSON() : undefined as any;
        data["US"] = this.uS ? this.uS.toJSON() : undefined as any;
        data["UY"] = this.uY ? this.uY.toJSON() : undefined as any;
        data["VE"] = this.vE ? this.vE.toJSON() : undefined as any;
        data["ZA"] = this.zA ? this.zA.toJSON() : undefined as any;
        data["ZM"] = this.zM ? this.zM.toJSON() : undefined as any;
        return data;
    }
}

export interface IResults60 {
    aE?: AE3;
    aR?: AR5;
    aT?: AT3;
    aU?: AU5;
    bA?: BA3;
    bB?: BB3;
    bE?: BE3;
    bG?: BG5;
    bO?: BO3;
    bR?: BR5;
    bS?: BS3;
    cA?: CA5;
    cH?: CH4;
    cI?: CI2;
    cL?: CL3;
    cO?: CO3;
    cR?: CR3;
    cZ?: CZ3;
    dE?: DE5;
    dK?: DK5;
    dO?: DO3;
    dZ?: DZ2;
    eC?: EC3;
    eG?: EG3;
    eS?: ES5;
    fI?: FI5;
    fR?: FR5;
    gB?: GB5;
    gF?: GF3;
    gH?: GH2;
    gQ?: GQ2;
    gT?: GT3;
    hK?: HK4;
    hN?: HN3;
    hR?: HR3;
    hU?: HU5;
    iD?: ID5;
    iE?: IE4;
    iL?: IL5;
    iQ?: IQ3;
    iT?: IT5;
    jM?: JM3;
    jP?: JP4;
    kE?: KE2;
    kR?: KR5;
    lB?: LB3;
    lY?: LY2;
    mD?: MD3;
    mK?: MK3;
    mU?: MU3;
    mX?: MX5;
    mY?: MY5;
    mZ?: MZ3;
    nE?: NE2;
    nG?: NG2;
    nL?: NL5;
    nO?: NO5;
    nZ?: NZ5;
    pA?: PA3;
    pE?: PE3;
    pH?: PH5;
    pL?: PL4;
    pS?: PS3;
    pT?: PT5;
    pY?: PY3;
    rO?: RO3;
    rS?: RS3;
    rU?: RU5;
    sA?: SA3;
    sC?: SC2;
    sE?: SE5;
    sG?: SG5;
    sI?: SI3;
    sK?: SK5;
    sN?: SN2;
    sV?: SV3;
    tH?: TH5;
    tR?: TR5;
    tT?: TT3;
    tW?: TW5;
    tZ?: TZ2;
    uG?: UG3;
    uS?: US5;
    uY?: UY3;
    vE?: VE3;
    zA?: ZA5;
    zM?: ZM2;

    [key: string]: any;
}

export class Changes5 implements IChanges5 {
    key?: string;
    items?: Items6[];

    [key: string]: any;

    constructor(data?: IChanges5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.key = _data["key"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Items6.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Changes5 {
        data = typeof data === 'object' ? data : {};
        let result = new Changes5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["key"] = this.key;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IChanges5 {
    key?: string;
    items?: Items6[];

    [key: string]: any;
}

export class Groups implements IGroups {
    id?: string;
    name?: string;
    order?: number;
    episodes?: Episodes2[];
    locked?: boolean;

    [key: string]: any;

    constructor(data?: IGroups) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
            this.locked = true;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
            if (Array.isArray(_data["episodes"])) {
                this.episodes = [] as any;
                for (let item of _data["episodes"])
                    this.episodes!.push(Episodes2.fromJS(item));
            }
            this.locked = _data["locked"] !== undefined ? _data["locked"] : true;
        }
    }

    static fromJS(data: any): Groups {
        data = typeof data === 'object' ? data : {};
        let result = new Groups();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        data["order"] = this.order;
        if (Array.isArray(this.episodes)) {
            data["episodes"] = [];
            for (let item of this.episodes)
                data["episodes"].push(item ? item.toJSON() : undefined as any);
        }
        data["locked"] = this.locked;
        return data;
    }
}

export interface IGroups {
    id?: string;
    name?: string;
    order?: number;
    episodes?: Episodes2[];
    locked?: boolean;

    [key: string]: any;
}

export class Network implements INetwork {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: INetwork) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Network {
        data = typeof data === 'object' ? data : {};
        let result = new Network();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface INetwork {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Results61 implements IResults61 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: IResults61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Results61 {
        data = typeof data === 'object' ? data : {};
        let result = new Results61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface IResults61 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Results62 implements IResults62 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;

    [key: string]: any;

    constructor(data?: IResults62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.original_language = _data["original_language"];
            this.original_name = _data["original_name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
        }
    }

    static fromJS(data: any): Results62 {
        data = typeof data === 'object' ? data : {};
        let result = new Results62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["name"] = this.name;
        data["original_language"] = this.original_language;
        data["original_name"] = this.original_name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        return data;
    }
}

export interface IResults62 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    name?: string;
    original_language?: string;
    original_name?: string;
    overview?: string;
    poster_path?: string;

    [key: string]: any;
}

export class Results63 implements IResults63 {
    id?: number;
    name?: string;

    [key: string]: any;

    constructor(data?: IResults63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Results63 {
        data = typeof data === 'object' ? data : {};
        let result = new Results63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IResults63 {
    id?: number;
    name?: string;

    [key: string]: any;
}

export class Results64 implements IResults64 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;

    constructor(data?: IResults64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.favorite_count = 0;
            this.id = 0;
            this.item_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.favorite_count = _data["favorite_count"] !== undefined ? _data["favorite_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.item_count = _data["item_count"] !== undefined ? _data["item_count"] : 0;
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.name = _data["name"];
            this.poster_path = _data["poster_path"];
        }
    }

    static fromJS(data: any): Results64 {
        data = typeof data === 'object' ? data : {};
        let result = new Results64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["favorite_count"] = this.favorite_count;
        data["id"] = this.id;
        data["item_count"] = this.item_count;
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["name"] = this.name;
        data["poster_path"] = this.poster_path;
        return data;
    }
}

export interface IResults64 {
    description?: string;
    favorite_count?: number;
    id?: number;
    item_count?: number;
    iso_639_1?: string;
    iso_3166_1?: string;
    name?: string;
    poster_path?: any;

    [key: string]: any;
}

export class Known_for implements IKnown_for {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IKnown_for) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Known_for {
        data = typeof data === 'object' ? data : {};
        let result = new Known_for();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IKnown_for {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Crew11 implements ICrew11 {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: ICrew11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.department = _data["department"];
            this.job = _data["job"];
            this.credit_id = _data["credit_id"];
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Crew11 {
        data = typeof data === 'object' ? data : {};
        let result = new Crew11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["department"] = this.department;
        data["job"] = this.job;
        data["credit_id"] = this.credit_id;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface ICrew11 {
    department?: string;
    job?: string;
    credit_id?: string;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Guest_stars3 implements IGuest_stars3 {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;

    constructor(data?: IGuest_stars3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
            this.adult = true;
            this.gender = 0;
            this.id = 0;
            this.popularity = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.character = _data["character"];
            this.credit_id = _data["credit_id"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.known_for_department = _data["known_for_department"];
            this.name = _data["name"];
            this.original_name = _data["original_name"];
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.profile_path = _data["profile_path"];
        }
    }

    static fromJS(data: any): Guest_stars3 {
        data = typeof data === 'object' ? data : {};
        let result = new Guest_stars3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["character"] = this.character;
        data["credit_id"] = this.credit_id;
        data["order"] = this.order;
        data["adult"] = this.adult;
        data["gender"] = this.gender;
        data["id"] = this.id;
        data["known_for_department"] = this.known_for_department;
        data["name"] = this.name;
        data["original_name"] = this.original_name;
        data["popularity"] = this.popularity;
        data["profile_path"] = this.profile_path;
        return data;
    }
}

export interface IGuest_stars3 {
    character?: string;
    credit_id?: string;
    order?: number;
    adult?: boolean;
    gender?: number;
    id?: number;
    known_for_department?: string;
    name?: string;
    original_name?: string;
    popularity?: number;
    profile_path?: string;

    [key: string]: any;
}

export class Known_for2 implements IKnown_for2 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IKnown_for2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Known_for2 {
        data = typeof data === 'object' ? data : {};
        let result = new Known_for2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IKnown_for2 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Items2 implements IItems2 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: Value;

    [key: string]: any;

    constructor(data?: IItems2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.action = _data["action"];
            this.time = _data["time"];
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.value = _data["value"] ? Value.fromJS(_data["value"]) : undefined as any;
        }
    }

    static fromJS(data: any): Items2 {
        data = typeof data === 'object' ? data : {};
        let result = new Items2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["action"] = this.action;
        data["time"] = this.time;
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["value"] = this.value ? this.value.toJSON() : undefined as any;
        return data;
    }
}

export interface IItems2 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: Value;

    [key: string]: any;
}

export class Release_dates implements IRelease_dates {
    certification?: string;
    descriptors?: any[];
    iso_639_1?: string;
    note?: string;
    release_date?: string;
    type?: number;

    [key: string]: any;

    constructor(data?: IRelease_dates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.type = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            if (Array.isArray(_data["descriptors"])) {
                this.descriptors = [] as any;
                for (let item of _data["descriptors"])
                    this.descriptors!.push(item);
            }
            this.iso_639_1 = _data["iso_639_1"];
            this.note = _data["note"];
            this.release_date = _data["release_date"];
            this.type = _data["type"] !== undefined ? _data["type"] : 0;
        }
    }

    static fromJS(data: any): Release_dates {
        data = typeof data === 'object' ? data : {};
        let result = new Release_dates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        if (Array.isArray(this.descriptors)) {
            data["descriptors"] = [];
            for (let item of this.descriptors)
                data["descriptors"].push(item);
        }
        data["iso_639_1"] = this.iso_639_1;
        data["note"] = this.note;
        data["release_date"] = this.release_date;
        data["type"] = this.type;
        return data;
    }
}

export interface IRelease_dates {
    certification?: string;
    descriptors?: any[];
    iso_639_1?: string;
    note?: string;
    release_date?: string;
    type?: number;

    [key: string]: any;
}

export class Author_details2 implements IAuthor_details2 {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: any;

    [key: string]: any;

    constructor(data?: IAuthor_details2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.username = _data["username"];
            this.avatar_path = _data["avatar_path"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): Author_details2 {
        data = typeof data === 'object' ? data : {};
        let result = new Author_details2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["username"] = this.username;
        data["avatar_path"] = this.avatar_path;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IAuthor_details2 {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: any;

    [key: string]: any;
}

export class Data implements IData {
    homepage?: string;
    overview?: string;
    runtime?: number;
    tagline?: string;
    title?: string;

    [key: string]: any;

    constructor(data?: IData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.runtime = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.homepage = _data["homepage"];
            this.overview = _data["overview"];
            this.runtime = _data["runtime"] !== undefined ? _data["runtime"] : 0;
            this.tagline = _data["tagline"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): Data {
        data = typeof data === 'object' ? data : {};
        let result = new Data();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["homepage"] = this.homepage;
        data["overview"] = this.overview;
        data["runtime"] = this.runtime;
        data["tagline"] = this.tagline;
        data["title"] = this.title;
        return data;
    }
}

export interface IData {
    homepage?: string;
    overview?: string;
    runtime?: number;
    tagline?: string;
    title?: string;

    [key: string]: any;
}

export class AE implements IAE {
    link?: string;
    flatrate?: Flatrate[];
    rent?: Rent[];
    buy?: Buy[];

    [key: string]: any;

    constructor(data?: IAE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AE {
        data = typeof data === 'object' ? data : {};
        let result = new AE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAE {
    link?: string;
    flatrate?: Flatrate[];
    rent?: Rent[];
    buy?: Buy[];

    [key: string]: any;
}

export class AL implements IAL {
    link?: string;
    buy?: Buy2[];

    [key: string]: any;

    constructor(data?: IAL) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AL {
        data = typeof data === 'object' ? data : {};
        let result = new AL();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAL {
    link?: string;
    buy?: Buy2[];

    [key: string]: any;
}

export class AR implements IAR {
    link?: string;
    buy?: Buy3[];
    flatrate?: Flatrate2[];
    rent?: Rent2[];

    [key: string]: any;

    constructor(data?: IAR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy3.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate2.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent2.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AR {
        data = typeof data === 'object' ? data : {};
        let result = new AR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAR {
    link?: string;
    buy?: Buy3[];
    flatrate?: Flatrate2[];
    rent?: Rent2[];

    [key: string]: any;
}

export class AT implements IAT {
    link?: string;
    flatrate?: Flatrate3[];
    buy?: Buy4[];
    rent?: Rent3[];

    [key: string]: any;

    constructor(data?: IAT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate3.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy4.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AT {
        data = typeof data === 'object' ? data : {};
        let result = new AT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAT {
    link?: string;
    flatrate?: Flatrate3[];
    buy?: Buy4[];
    rent?: Rent3[];

    [key: string]: any;
}

export class AU implements IAU {
    link?: string;
    flatrate?: Flatrate4[];
    buy?: Buy5[];

    [key: string]: any;

    constructor(data?: IAU) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate4.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AU {
        data = typeof data === 'object' ? data : {};
        let result = new AU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAU {
    link?: string;
    flatrate?: Flatrate4[];
    buy?: Buy5[];

    [key: string]: any;
}

export class BA implements IBA {
    link?: string;
    buy?: Buy6[];
    flatrate?: Flatrate5[];

    [key: string]: any;

    constructor(data?: IBA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy6.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate5.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BA {
        data = typeof data === 'object' ? data : {};
        let result = new BA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBA {
    link?: string;
    buy?: Buy6[];
    flatrate?: Flatrate5[];

    [key: string]: any;
}

export class BB implements IBB {
    link?: string;
    flatrate?: Flatrate6[];

    [key: string]: any;

    constructor(data?: IBB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate6.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BB {
        data = typeof data === 'object' ? data : {};
        let result = new BB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBB {
    link?: string;
    flatrate?: Flatrate6[];

    [key: string]: any;
}

export class BE implements IBE {
    link?: string;
    rent?: Rent4[];
    flatrate?: Flatrate7[];
    buy?: Buy7[];

    [key: string]: any;

    constructor(data?: IBE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent4.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate7.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy7.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BE {
        data = typeof data === 'object' ? data : {};
        let result = new BE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBE {
    link?: string;
    rent?: Rent4[];
    flatrate?: Flatrate7[];
    buy?: Buy7[];

    [key: string]: any;
}

export class BG implements IBG {
    link?: string;
    rent?: Rent5[];
    buy?: Buy8[];
    flatrate?: Flatrate8[];

    [key: string]: any;

    constructor(data?: IBG) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent5.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy8.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate8.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BG {
        data = typeof data === 'object' ? data : {};
        let result = new BG();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBG {
    link?: string;
    rent?: Rent5[];
    buy?: Buy8[];
    flatrate?: Flatrate8[];

    [key: string]: any;
}

export class BH implements IBH {
    link?: string;
    buy?: Buy9[];

    [key: string]: any;

    constructor(data?: IBH) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy9.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BH {
        data = typeof data === 'object' ? data : {};
        let result = new BH();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBH {
    link?: string;
    buy?: Buy9[];

    [key: string]: any;
}

export class BO implements IBO {
    link?: string;
    flatrate?: Flatrate9[];

    [key: string]: any;

    constructor(data?: IBO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate9.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BO {
        data = typeof data === 'object' ? data : {};
        let result = new BO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBO {
    link?: string;
    flatrate?: Flatrate9[];

    [key: string]: any;
}

export class BR implements IBR {
    link?: string;
    flatrate?: Flatrate10[];

    [key: string]: any;

    constructor(data?: IBR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate10.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BR {
        data = typeof data === 'object' ? data : {};
        let result = new BR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBR {
    link?: string;
    flatrate?: Flatrate10[];

    [key: string]: any;
}

export class BS implements IBS {
    link?: string;
    flatrate?: Flatrate11[];

    [key: string]: any;

    constructor(data?: IBS) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate11.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BS {
        data = typeof data === 'object' ? data : {};
        let result = new BS();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBS {
    link?: string;
    flatrate?: Flatrate11[];

    [key: string]: any;
}

export class CA implements ICA {
    link?: string;
    rent?: Rent6[];
    buy?: Buy10[];
    flatrate?: Flatrate12[];

    [key: string]: any;

    constructor(data?: ICA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent6.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy10.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate12.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CA {
        data = typeof data === 'object' ? data : {};
        let result = new CA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICA {
    link?: string;
    rent?: Rent6[];
    buy?: Buy10[];
    flatrate?: Flatrate12[];

    [key: string]: any;
}

export class CH implements ICH {
    link?: string;
    flatrate?: Flatrate13[];
    buy?: Buy11[];
    rent?: Rent7[];

    [key: string]: any;

    constructor(data?: ICH) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate13.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy11.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent7.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CH {
        data = typeof data === 'object' ? data : {};
        let result = new CH();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICH {
    link?: string;
    flatrate?: Flatrate13[];
    buy?: Buy11[];
    rent?: Rent7[];

    [key: string]: any;
}

export class CL implements ICL {
    link?: string;
    buy?: Buy12[];
    flatrate?: Flatrate14[];
    rent?: Rent8[];

    [key: string]: any;

    constructor(data?: ICL) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy12.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate14.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent8.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CL {
        data = typeof data === 'object' ? data : {};
        let result = new CL();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICL {
    link?: string;
    buy?: Buy12[];
    flatrate?: Flatrate14[];
    rent?: Rent8[];

    [key: string]: any;
}

export class CO implements ICO {
    link?: string;
    buy?: Buy13[];
    flatrate?: Flatrate15[];
    rent?: Rent9[];

    [key: string]: any;

    constructor(data?: ICO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy13.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate15.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent9.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CO {
        data = typeof data === 'object' ? data : {};
        let result = new CO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICO {
    link?: string;
    buy?: Buy13[];
    flatrate?: Flatrate15[];
    rent?: Rent9[];

    [key: string]: any;
}

export class CR implements ICR {
    link?: string;
    flatrate?: Flatrate16[];

    [key: string]: any;

    constructor(data?: ICR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate16.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CR {
        data = typeof data === 'object' ? data : {};
        let result = new CR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICR {
    link?: string;
    flatrate?: Flatrate16[];

    [key: string]: any;
}

export class CV implements ICV {
    link?: string;
    buy?: Buy14[];
    rent?: Rent10[];

    [key: string]: any;

    constructor(data?: ICV) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy14.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent10.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CV {
        data = typeof data === 'object' ? data : {};
        let result = new CV();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICV {
    link?: string;
    buy?: Buy14[];
    rent?: Rent10[];

    [key: string]: any;
}

export class CZ implements ICZ {
    link?: string;
    flatrate?: Flatrate17[];
    rent?: Rent11[];
    buy?: Buy15[];

    [key: string]: any;

    constructor(data?: ICZ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate17.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent11.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy15.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CZ {
        data = typeof data === 'object' ? data : {};
        let result = new CZ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICZ {
    link?: string;
    flatrate?: Flatrate17[];
    rent?: Rent11[];
    buy?: Buy15[];

    [key: string]: any;
}

export class DE implements IDE {
    link?: string;
    flatrate?: Flatrate18[];
    buy?: Buy16[];
    rent?: Rent12[];

    [key: string]: any;

    constructor(data?: IDE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate18.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy16.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent12.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DE {
        data = typeof data === 'object' ? data : {};
        let result = new DE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDE {
    link?: string;
    flatrate?: Flatrate18[];
    buy?: Buy16[];
    rent?: Rent12[];

    [key: string]: any;
}

export class DK implements IDK {
    link?: string;
    rent?: Rent13[];
    flatrate?: Flatrate19[];
    buy?: Buy17[];

    [key: string]: any;

    constructor(data?: IDK) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent13.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate19.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy17.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DK {
        data = typeof data === 'object' ? data : {};
        let result = new DK();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDK {
    link?: string;
    rent?: Rent13[];
    flatrate?: Flatrate19[];
    buy?: Buy17[];

    [key: string]: any;
}

export class DO implements IDO {
    link?: string;
    flatrate?: Flatrate20[];

    [key: string]: any;

    constructor(data?: IDO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate20.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DO {
        data = typeof data === 'object' ? data : {};
        let result = new DO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDO {
    link?: string;
    flatrate?: Flatrate20[];

    [key: string]: any;
}

export class EC implements IEC {
    link?: string;
    buy?: Buy18[];
    flatrate?: Flatrate21[];
    rent?: Rent14[];

    [key: string]: any;

    constructor(data?: IEC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy18.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate21.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent14.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EC {
        data = typeof data === 'object' ? data : {};
        let result = new EC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEC {
    link?: string;
    buy?: Buy18[];
    flatrate?: Flatrate21[];
    rent?: Rent14[];

    [key: string]: any;
}

export class EE implements IEE {
    link?: string;
    buy?: Buy19[];
    flatrate?: Flatrate22[];
    rent?: Rent15[];

    [key: string]: any;

    constructor(data?: IEE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy19.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate22.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent15.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EE {
        data = typeof data === 'object' ? data : {};
        let result = new EE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEE {
    link?: string;
    buy?: Buy19[];
    flatrate?: Flatrate22[];
    rent?: Rent15[];

    [key: string]: any;
}

export class EG implements IEG {
    link?: string;
    rent?: Rent16[];
    buy?: Buy20[];

    [key: string]: any;

    constructor(data?: IEG) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent16.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy20.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EG {
        data = typeof data === 'object' ? data : {};
        let result = new EG();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEG {
    link?: string;
    rent?: Rent16[];
    buy?: Buy20[];

    [key: string]: any;
}

export class ES implements IES {
    link?: string;
    rent?: Rent17[];
    ads?: Ads[];
    flatrate?: Flatrate23[];
    buy?: Buy21[];

    [key: string]: any;

    constructor(data?: IES) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent17.fromJS(item));
            }
            if (Array.isArray(_data["ads"])) {
                this.ads = [] as any;
                for (let item of _data["ads"])
                    this.ads!.push(Ads.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate23.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy21.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ES {
        data = typeof data === 'object' ? data : {};
        let result = new ES();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.ads)) {
            data["ads"] = [];
            for (let item of this.ads)
                data["ads"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IES {
    link?: string;
    rent?: Rent17[];
    ads?: Ads[];
    flatrate?: Flatrate23[];
    buy?: Buy21[];

    [key: string]: any;
}

export class FI implements IFI {
    link?: string;
    flatrate?: Flatrate24[];
    buy?: Buy22[];
    rent?: Rent18[];

    [key: string]: any;

    constructor(data?: IFI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate24.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy22.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent18.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FI {
        data = typeof data === 'object' ? data : {};
        let result = new FI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFI {
    link?: string;
    flatrate?: Flatrate24[];
    buy?: Buy22[];
    rent?: Rent18[];

    [key: string]: any;
}

export class FJ implements IFJ {
    link?: string;
    buy?: Buy23[];

    [key: string]: any;

    constructor(data?: IFJ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy23.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FJ {
        data = typeof data === 'object' ? data : {};
        let result = new FJ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFJ {
    link?: string;
    buy?: Buy23[];

    [key: string]: any;
}

export class FR implements IFR {
    link?: string;
    rent?: Rent19[];
    buy?: Buy24[];
    flatrate?: Flatrate25[];

    [key: string]: any;

    constructor(data?: IFR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent19.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy24.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate25.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FR {
        data = typeof data === 'object' ? data : {};
        let result = new FR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFR {
    link?: string;
    rent?: Rent19[];
    buy?: Buy24[];
    flatrate?: Flatrate25[];

    [key: string]: any;
}

export class GB implements IGB {
    link?: string;
    flatrate?: Flatrate26[];
    buy?: Buy25[];
    rent?: Rent20[];

    [key: string]: any;

    constructor(data?: IGB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate26.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy25.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent20.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GB {
        data = typeof data === 'object' ? data : {};
        let result = new GB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGB {
    link?: string;
    flatrate?: Flatrate26[];
    buy?: Buy25[];
    rent?: Rent20[];

    [key: string]: any;
}

export class GF implements IGF {
    link?: string;
    flatrate?: Flatrate27[];

    [key: string]: any;

    constructor(data?: IGF) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate27.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GF {
        data = typeof data === 'object' ? data : {};
        let result = new GF();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGF {
    link?: string;
    flatrate?: Flatrate27[];

    [key: string]: any;
}

export class GI implements IGI {
    link?: string;
    flatrate?: Flatrate28[];

    [key: string]: any;

    constructor(data?: IGI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate28.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GI {
        data = typeof data === 'object' ? data : {};
        let result = new GI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGI {
    link?: string;
    flatrate?: Flatrate28[];

    [key: string]: any;
}

export class GR implements IGR {
    link?: string;
    flatrate?: Flatrate29[];
    rent?: Rent21[];
    buy?: Buy26[];

    [key: string]: any;

    constructor(data?: IGR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate29.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent21.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy26.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GR {
        data = typeof data === 'object' ? data : {};
        let result = new GR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGR {
    link?: string;
    flatrate?: Flatrate29[];
    rent?: Rent21[];
    buy?: Buy26[];

    [key: string]: any;
}

export class GT implements IGT {
    link?: string;
    flatrate?: Flatrate30[];

    [key: string]: any;

    constructor(data?: IGT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate30.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GT {
        data = typeof data === 'object' ? data : {};
        let result = new GT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGT {
    link?: string;
    flatrate?: Flatrate30[];

    [key: string]: any;
}

export class HK implements IHK {
    link?: string;
    flatrate?: Flatrate31[];

    [key: string]: any;

    constructor(data?: IHK) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate31.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HK {
        data = typeof data === 'object' ? data : {};
        let result = new HK();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHK {
    link?: string;
    flatrate?: Flatrate31[];

    [key: string]: any;
}

export class HN implements IHN {
    link?: string;
    flatrate?: Flatrate32[];

    [key: string]: any;

    constructor(data?: IHN) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate32.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HN {
        data = typeof data === 'object' ? data : {};
        let result = new HN();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHN {
    link?: string;
    flatrate?: Flatrate32[];

    [key: string]: any;
}

export class HR implements IHR {
    link?: string;
    buy?: Buy27[];
    ads?: Ads2[];
    flatrate?: Flatrate33[];

    [key: string]: any;

    constructor(data?: IHR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy27.fromJS(item));
            }
            if (Array.isArray(_data["ads"])) {
                this.ads = [] as any;
                for (let item of _data["ads"])
                    this.ads!.push(Ads2.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate33.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HR {
        data = typeof data === 'object' ? data : {};
        let result = new HR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.ads)) {
            data["ads"] = [];
            for (let item of this.ads)
                data["ads"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHR {
    link?: string;
    buy?: Buy27[];
    ads?: Ads2[];
    flatrate?: Flatrate33[];

    [key: string]: any;
}

export class HU implements IHU {
    link?: string;
    flatrate?: Flatrate34[];
    buy?: Buy28[];
    rent?: Rent22[];

    [key: string]: any;

    constructor(data?: IHU) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate34.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy28.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent22.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HU {
        data = typeof data === 'object' ? data : {};
        let result = new HU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHU {
    link?: string;
    flatrate?: Flatrate34[];
    buy?: Buy28[];
    rent?: Rent22[];

    [key: string]: any;
}

export class ID implements IID {
    link?: string;
    flatrate?: Flatrate35[];

    [key: string]: any;

    constructor(data?: IID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate35.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ID {
        data = typeof data === 'object' ? data : {};
        let result = new ID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IID {
    link?: string;
    flatrate?: Flatrate35[];

    [key: string]: any;
}

export class IE implements IIE {
    link?: string;
    rent?: Rent23[];
    flatrate?: Flatrate36[];
    buy?: Buy29[];

    [key: string]: any;

    constructor(data?: IIE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent23.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate36.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy29.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IE {
        data = typeof data === 'object' ? data : {};
        let result = new IE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIE {
    link?: string;
    rent?: Rent23[];
    flatrate?: Flatrate36[];
    buy?: Buy29[];

    [key: string]: any;
}

export class IL implements IIL {
    link?: string;
    buy?: Buy30[];
    flatrate?: Flatrate37[];

    [key: string]: any;

    constructor(data?: IIL) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy30.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate37.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IL {
        data = typeof data === 'object' ? data : {};
        let result = new IL();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIL {
    link?: string;
    buy?: Buy30[];
    flatrate?: Flatrate37[];

    [key: string]: any;
}

export class IN implements IIN {
    link?: string;
    flatrate?: Flatrate38[];
    rent?: Rent24[];
    buy?: Buy31[];

    [key: string]: any;

    constructor(data?: IIN) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate38.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent24.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy31.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IN {
        data = typeof data === 'object' ? data : {};
        let result = new IN();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIN {
    link?: string;
    flatrate?: Flatrate38[];
    rent?: Rent24[];
    buy?: Buy31[];

    [key: string]: any;
}

export class IQ implements IIQ {
    link?: string;
    flatrate?: Flatrate39[];

    [key: string]: any;

    constructor(data?: IIQ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate39.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IQ {
        data = typeof data === 'object' ? data : {};
        let result = new IQ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIQ {
    link?: string;
    flatrate?: Flatrate39[];

    [key: string]: any;
}

export class IS implements IIS {
    link?: string;
    buy?: Buy32[];
    flatrate?: Flatrate40[];

    [key: string]: any;

    constructor(data?: IIS) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy32.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate40.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IS {
        data = typeof data === 'object' ? data : {};
        let result = new IS();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIS {
    link?: string;
    buy?: Buy32[];
    flatrate?: Flatrate40[];

    [key: string]: any;
}

export class IT implements IIT {
    link?: string;
    buy?: Buy33[];
    rent?: Rent25[];
    flatrate?: Flatrate41[];

    [key: string]: any;

    constructor(data?: IIT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy33.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent25.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate41.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IT {
        data = typeof data === 'object' ? data : {};
        let result = new IT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIT {
    link?: string;
    buy?: Buy33[];
    rent?: Rent25[];
    flatrate?: Flatrate41[];

    [key: string]: any;
}

export class JM implements IJM {
    link?: string;
    flatrate?: Flatrate42[];

    [key: string]: any;

    constructor(data?: IJM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate42.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JM {
        data = typeof data === 'object' ? data : {};
        let result = new JM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJM {
    link?: string;
    flatrate?: Flatrate42[];

    [key: string]: any;
}

export class JO implements IJO {
    link?: string;
    flatrate?: Flatrate43[];
    buy?: Buy34[];

    [key: string]: any;

    constructor(data?: IJO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate43.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy34.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JO {
        data = typeof data === 'object' ? data : {};
        let result = new JO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJO {
    link?: string;
    flatrate?: Flatrate43[];
    buy?: Buy34[];

    [key: string]: any;
}

export class JP implements IJP {
    link?: string;
    flatrate?: Flatrate44[];
    rent?: Rent26[];
    buy?: Buy35[];

    [key: string]: any;

    constructor(data?: IJP) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate44.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent26.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy35.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JP {
        data = typeof data === 'object' ? data : {};
        let result = new JP();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJP {
    link?: string;
    flatrate?: Flatrate44[];
    rent?: Rent26[];
    buy?: Buy35[];

    [key: string]: any;
}

export class KR implements IKR {
    link?: string;
    flatrate?: Flatrate45[];
    buy?: Buy36[];

    [key: string]: any;

    constructor(data?: IKR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate45.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy36.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KR {
        data = typeof data === 'object' ? data : {};
        let result = new KR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKR {
    link?: string;
    flatrate?: Flatrate45[];
    buy?: Buy36[];

    [key: string]: any;
}

export class KW implements IKW {
    link?: string;
    buy?: Buy37[];
    flatrate?: Flatrate46[];

    [key: string]: any;

    constructor(data?: IKW) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy37.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate46.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KW {
        data = typeof data === 'object' ? data : {};
        let result = new KW();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKW {
    link?: string;
    buy?: Buy37[];
    flatrate?: Flatrate46[];

    [key: string]: any;
}

export class LB implements ILB {
    link?: string;
    flatrate?: Flatrate47[];
    buy?: Buy38[];

    [key: string]: any;

    constructor(data?: ILB) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate47.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy38.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LB {
        data = typeof data === 'object' ? data : {};
        let result = new LB();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILB {
    link?: string;
    flatrate?: Flatrate47[];
    buy?: Buy38[];

    [key: string]: any;
}

export class LI implements ILI {
    link?: string;
    flatrate?: Flatrate48[];

    [key: string]: any;

    constructor(data?: ILI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate48.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LI {
        data = typeof data === 'object' ? data : {};
        let result = new LI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILI {
    link?: string;
    flatrate?: Flatrate48[];

    [key: string]: any;
}

export class LT implements ILT {
    link?: string;
    rent?: Rent27[];
    buy?: Buy39[];
    flatrate?: Flatrate49[];

    [key: string]: any;

    constructor(data?: ILT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent27.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy39.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate49.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LT {
        data = typeof data === 'object' ? data : {};
        let result = new LT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILT {
    link?: string;
    rent?: Rent27[];
    buy?: Buy39[];
    flatrate?: Flatrate49[];

    [key: string]: any;
}

export class LV implements ILV {
    link?: string;
    flatrate?: Flatrate50[];
    buy?: Buy40[];

    [key: string]: any;

    constructor(data?: ILV) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate50.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy40.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LV {
        data = typeof data === 'object' ? data : {};
        let result = new LV();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILV {
    link?: string;
    flatrate?: Flatrate50[];
    buy?: Buy40[];

    [key: string]: any;
}

export class MD implements IMD {
    link?: string;
    buy?: Buy41[];
    flatrate?: Flatrate51[];

    [key: string]: any;

    constructor(data?: IMD) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy41.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate51.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MD {
        data = typeof data === 'object' ? data : {};
        let result = new MD();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMD {
    link?: string;
    buy?: Buy41[];
    flatrate?: Flatrate51[];

    [key: string]: any;
}

export class MK implements IMK {
    link?: string;
    flatrate?: Flatrate52[];
    buy?: Buy42[];

    [key: string]: any;

    constructor(data?: IMK) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate52.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy42.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MK {
        data = typeof data === 'object' ? data : {};
        let result = new MK();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMK {
    link?: string;
    flatrate?: Flatrate52[];
    buy?: Buy42[];

    [key: string]: any;
}

export class MT implements IMT {
    link?: string;
    flatrate?: Flatrate53[];
    buy?: Buy43[];
    rent?: Rent28[];

    [key: string]: any;

    constructor(data?: IMT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate53.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy43.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent28.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MT {
        data = typeof data === 'object' ? data : {};
        let result = new MT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMT {
    link?: string;
    flatrate?: Flatrate53[];
    buy?: Buy43[];
    rent?: Rent28[];

    [key: string]: any;
}

export class MU implements IMU {
    link?: string;
    buy?: Buy44[];
    rent?: Rent29[];

    [key: string]: any;

    constructor(data?: IMU) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy44.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent29.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MU {
        data = typeof data === 'object' ? data : {};
        let result = new MU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMU {
    link?: string;
    buy?: Buy44[];
    rent?: Rent29[];

    [key: string]: any;
}

export class MX implements IMX {
    link?: string;
    flatrate?: Flatrate54[];

    [key: string]: any;

    constructor(data?: IMX) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate54.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MX {
        data = typeof data === 'object' ? data : {};
        let result = new MX();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMX {
    link?: string;
    flatrate?: Flatrate54[];

    [key: string]: any;
}

export class MY implements IMY {
    link?: string;
    flatrate?: Flatrate55[];

    [key: string]: any;

    constructor(data?: IMY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate55.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MY {
        data = typeof data === 'object' ? data : {};
        let result = new MY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMY {
    link?: string;
    flatrate?: Flatrate55[];

    [key: string]: any;
}

export class MZ implements IMZ {
    link?: string;
    rent?: Rent30[];
    buy?: Buy45[];

    [key: string]: any;

    constructor(data?: IMZ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent30.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy45.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MZ {
        data = typeof data === 'object' ? data : {};
        let result = new MZ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMZ {
    link?: string;
    rent?: Rent30[];
    buy?: Buy45[];

    [key: string]: any;
}

export class NL implements INL {
    link?: string;
    buy?: Buy46[];
    rent?: Rent31[];
    flatrate?: Flatrate56[];

    [key: string]: any;

    constructor(data?: INL) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy46.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent31.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate56.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NL {
        data = typeof data === 'object' ? data : {};
        let result = new NL();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INL {
    link?: string;
    buy?: Buy46[];
    rent?: Rent31[];
    flatrate?: Flatrate56[];

    [key: string]: any;
}

export class NO implements INO {
    link?: string;
    rent?: Rent32[];
    buy?: Buy47[];
    flatrate?: Flatrate57[];

    [key: string]: any;

    constructor(data?: INO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent32.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy47.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate57.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NO {
        data = typeof data === 'object' ? data : {};
        let result = new NO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INO {
    link?: string;
    rent?: Rent32[];
    buy?: Buy47[];
    flatrate?: Flatrate57[];

    [key: string]: any;
}

export class NZ implements INZ {
    link?: string;
    flatrate?: Flatrate58[];
    buy?: Buy48[];

    [key: string]: any;

    constructor(data?: INZ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate58.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy48.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NZ {
        data = typeof data === 'object' ? data : {};
        let result = new NZ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INZ {
    link?: string;
    flatrate?: Flatrate58[];
    buy?: Buy48[];

    [key: string]: any;
}

export class OM implements IOM {
    link?: string;
    buy?: Buy49[];
    rent?: Rent33[];
    flatrate?: Flatrate59[];

    [key: string]: any;

    constructor(data?: IOM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy49.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent33.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate59.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OM {
        data = typeof data === 'object' ? data : {};
        let result = new OM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IOM {
    link?: string;
    buy?: Buy49[];
    rent?: Rent33[];
    flatrate?: Flatrate59[];

    [key: string]: any;
}

export class PA implements IPA {
    link?: string;
    flatrate?: Flatrate60[];

    [key: string]: any;

    constructor(data?: IPA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate60.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PA {
        data = typeof data === 'object' ? data : {};
        let result = new PA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPA {
    link?: string;
    flatrate?: Flatrate60[];

    [key: string]: any;
}

export class PE implements IPE {
    link?: string;
    rent?: Rent34[];
    buy?: Buy50[];
    flatrate?: Flatrate61[];

    [key: string]: any;

    constructor(data?: IPE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent34.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy50.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate61.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PE {
        data = typeof data === 'object' ? data : {};
        let result = new PE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPE {
    link?: string;
    rent?: Rent34[];
    buy?: Buy50[];
    flatrate?: Flatrate61[];

    [key: string]: any;
}

export class PH implements IPH {
    link?: string;
    flatrate?: Flatrate62[];

    [key: string]: any;

    constructor(data?: IPH) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate62.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PH {
        data = typeof data === 'object' ? data : {};
        let result = new PH();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPH {
    link?: string;
    flatrate?: Flatrate62[];

    [key: string]: any;
}

export class PK implements IPK {
    link?: string;
    flatrate?: Flatrate63[];

    [key: string]: any;

    constructor(data?: IPK) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate63.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PK {
        data = typeof data === 'object' ? data : {};
        let result = new PK();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPK {
    link?: string;
    flatrate?: Flatrate63[];

    [key: string]: any;
}

export class PL implements IPL {
    link?: string;
    buy?: Buy51[];
    flatrate?: Flatrate64[];
    rent?: Rent35[];

    [key: string]: any;

    constructor(data?: IPL) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy51.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate64.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent35.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PL {
        data = typeof data === 'object' ? data : {};
        let result = new PL();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPL {
    link?: string;
    buy?: Buy51[];
    flatrate?: Flatrate64[];
    rent?: Rent35[];

    [key: string]: any;
}

export class PS implements IPS {
    link?: string;
    flatrate?: Flatrate65[];

    [key: string]: any;

    constructor(data?: IPS) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate65.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PS {
        data = typeof data === 'object' ? data : {};
        let result = new PS();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPS {
    link?: string;
    flatrate?: Flatrate65[];

    [key: string]: any;
}

export class PT implements IPT {
    link?: string;
    buy?: Buy52[];
    rent?: Rent36[];
    flatrate?: Flatrate66[];

    [key: string]: any;

    constructor(data?: IPT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy52.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent36.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate66.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PT {
        data = typeof data === 'object' ? data : {};
        let result = new PT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPT {
    link?: string;
    buy?: Buy52[];
    rent?: Rent36[];
    flatrate?: Flatrate66[];

    [key: string]: any;
}

export class PY implements IPY {
    link?: string;
    flatrate?: Flatrate67[];

    [key: string]: any;

    constructor(data?: IPY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate67.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PY {
        data = typeof data === 'object' ? data : {};
        let result = new PY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPY {
    link?: string;
    flatrate?: Flatrate67[];

    [key: string]: any;
}

export class QA implements IQA {
    link?: string;
    flatrate?: Flatrate68[];
    buy?: Buy53[];

    [key: string]: any;

    constructor(data?: IQA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate68.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy53.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QA {
        data = typeof data === 'object' ? data : {};
        let result = new QA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IQA {
    link?: string;
    flatrate?: Flatrate68[];
    buy?: Buy53[];

    [key: string]: any;
}

export class RO implements IRO {
    link?: string;
    flatrate?: Flatrate69[];

    [key: string]: any;

    constructor(data?: IRO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate69.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RO {
        data = typeof data === 'object' ? data : {};
        let result = new RO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRO {
    link?: string;
    flatrate?: Flatrate69[];

    [key: string]: any;
}

export class RS implements IRS {
    link?: string;
    flatrate?: Flatrate70[];
    buy?: Buy54[];

    [key: string]: any;

    constructor(data?: IRS) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate70.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy54.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RS {
        data = typeof data === 'object' ? data : {};
        let result = new RS();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRS {
    link?: string;
    flatrate?: Flatrate70[];
    buy?: Buy54[];

    [key: string]: any;
}

export class RU implements IRU {
    link?: string;
    rent?: Rent37[];
    buy?: Buy55[];
    flatrate?: Flatrate71[];

    [key: string]: any;

    constructor(data?: IRU) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent37.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy55.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate71.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RU {
        data = typeof data === 'object' ? data : {};
        let result = new RU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRU {
    link?: string;
    rent?: Rent37[];
    buy?: Buy55[];
    flatrate?: Flatrate71[];

    [key: string]: any;
}

export class SA implements ISA {
    link?: string;
    flatrate?: Flatrate72[];
    rent?: Rent38[];
    buy?: Buy56[];

    [key: string]: any;

    constructor(data?: ISA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate72.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent38.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy56.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SA {
        data = typeof data === 'object' ? data : {};
        let result = new SA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISA {
    link?: string;
    flatrate?: Flatrate72[];
    rent?: Rent38[];
    buy?: Buy56[];

    [key: string]: any;
}

export class SE implements ISE {
    link?: string;
    buy?: Buy57[];
    rent?: Rent39[];
    flatrate?: Flatrate73[];

    [key: string]: any;

    constructor(data?: ISE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy57.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent39.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate73.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SE {
        data = typeof data === 'object' ? data : {};
        let result = new SE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISE {
    link?: string;
    buy?: Buy57[];
    rent?: Rent39[];
    flatrate?: Flatrate73[];

    [key: string]: any;
}

export class SG implements ISG {
    link?: string;
    flatrate?: Flatrate74[];

    [key: string]: any;

    constructor(data?: ISG) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate74.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SG {
        data = typeof data === 'object' ? data : {};
        let result = new SG();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISG {
    link?: string;
    flatrate?: Flatrate74[];

    [key: string]: any;
}

export class SI implements ISI {
    link?: string;
    buy?: Buy58[];
    flatrate?: Flatrate75[];

    [key: string]: any;

    constructor(data?: ISI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy58.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate75.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SI {
        data = typeof data === 'object' ? data : {};
        let result = new SI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISI {
    link?: string;
    buy?: Buy58[];
    flatrate?: Flatrate75[];

    [key: string]: any;
}

export class SK implements ISK {
    link?: string;
    buy?: Buy59[];
    flatrate?: Flatrate76[];
    rent?: Rent40[];

    [key: string]: any;

    constructor(data?: ISK) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy59.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate76.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent40.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SK {
        data = typeof data === 'object' ? data : {};
        let result = new SK();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISK {
    link?: string;
    buy?: Buy59[];
    flatrate?: Flatrate76[];
    rent?: Rent40[];

    [key: string]: any;
}

export class SM implements ISM {
    link?: string;
    flatrate?: Flatrate77[];

    [key: string]: any;

    constructor(data?: ISM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate77.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SM {
        data = typeof data === 'object' ? data : {};
        let result = new SM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISM {
    link?: string;
    flatrate?: Flatrate77[];

    [key: string]: any;
}

export class SV implements ISV {
    link?: string;
    flatrate?: Flatrate78[];

    [key: string]: any;

    constructor(data?: ISV) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate78.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SV {
        data = typeof data === 'object' ? data : {};
        let result = new SV();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISV {
    link?: string;
    flatrate?: Flatrate78[];

    [key: string]: any;
}

export class TH implements ITH {
    link?: string;
    flatrate?: Flatrate79[];

    [key: string]: any;

    constructor(data?: ITH) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate79.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TH {
        data = typeof data === 'object' ? data : {};
        let result = new TH();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITH {
    link?: string;
    flatrate?: Flatrate79[];

    [key: string]: any;
}

export class TR implements ITR {
    link?: string;
    rent?: Rent41[];
    flatrate?: Flatrate80[];
    buy?: Buy60[];

    [key: string]: any;

    constructor(data?: ITR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent41.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate80.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy60.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TR {
        data = typeof data === 'object' ? data : {};
        let result = new TR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITR {
    link?: string;
    rent?: Rent41[];
    flatrate?: Flatrate80[];
    buy?: Buy60[];

    [key: string]: any;
}

export class TT implements ITT {
    link?: string;
    flatrate?: Flatrate81[];

    [key: string]: any;

    constructor(data?: ITT) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate81.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TT {
        data = typeof data === 'object' ? data : {};
        let result = new TT();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITT {
    link?: string;
    flatrate?: Flatrate81[];

    [key: string]: any;
}

export class TW implements ITW {
    link?: string;
    flatrate?: Flatrate82[];

    [key: string]: any;

    constructor(data?: ITW) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate82.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TW {
        data = typeof data === 'object' ? data : {};
        let result = new TW();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITW {
    link?: string;
    flatrate?: Flatrate82[];

    [key: string]: any;
}

export class UG implements IUG {
    link?: string;
    rent?: Rent42[];
    buy?: Buy61[];

    [key: string]: any;

    constructor(data?: IUG) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent42.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy61.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UG {
        data = typeof data === 'object' ? data : {};
        let result = new UG();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUG {
    link?: string;
    rent?: Rent42[];
    buy?: Buy61[];

    [key: string]: any;
}

export class US implements IUS {
    link?: string;
    rent?: Rent43[];
    flatrate?: Flatrate83[];
    buy?: Buy62[];

    [key: string]: any;

    constructor(data?: IUS) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent43.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate83.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy62.fromJS(item));
            }
        }
    }

    static fromJS(data: any): US {
        data = typeof data === 'object' ? data : {};
        let result = new US();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUS {
    link?: string;
    rent?: Rent43[];
    flatrate?: Flatrate83[];
    buy?: Buy62[];

    [key: string]: any;
}

export class UY implements IUY {
    link?: string;
    flatrate?: Flatrate84[];

    [key: string]: any;

    constructor(data?: IUY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate84.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UY {
        data = typeof data === 'object' ? data : {};
        let result = new UY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUY {
    link?: string;
    flatrate?: Flatrate84[];

    [key: string]: any;
}

export class VE implements IVE {
    link?: string;
    rent?: Rent44[];
    flatrate?: Flatrate85[];
    buy?: Buy63[];

    [key: string]: any;

    constructor(data?: IVE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent44.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate85.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy63.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VE {
        data = typeof data === 'object' ? data : {};
        let result = new VE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IVE {
    link?: string;
    rent?: Rent44[];
    flatrate?: Flatrate85[];
    buy?: Buy63[];

    [key: string]: any;
}

export class YE implements IYE {
    link?: string;
    flatrate?: Flatrate86[];

    [key: string]: any;

    constructor(data?: IYE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate86.fromJS(item));
            }
        }
    }

    static fromJS(data: any): YE {
        data = typeof data === 'object' ? data : {};
        let result = new YE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IYE {
    link?: string;
    flatrate?: Flatrate86[];

    [key: string]: any;
}

export class ZA implements IZA {
    link?: string;
    flatrate?: Flatrate87[];
    rent?: Rent45[];
    buy?: Buy64[];

    [key: string]: any;

    constructor(data?: IZA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate87.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent45.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy64.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ZA {
        data = typeof data === 'object' ? data : {};
        let result = new ZA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IZA {
    link?: string;
    flatrate?: Flatrate87[];
    rent?: Rent45[];
    buy?: Buy64[];

    [key: string]: any;
}

export class Items3 implements IItems3 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: string;

    [key: string]: any;

    constructor(data?: IItems3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.action = _data["action"];
            this.time = _data["time"];
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Items3 {
        data = typeof data === 'object' ? data : {};
        let result = new Items3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["action"] = this.action;
        data["time"] = this.time;
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["value"] = this.value;
        return data;
    }
}

export interface IItems3 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: string;

    [key: string]: any;
}

export class Items4 implements IItems4 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: Value2;
    original_value?: Original_value;

    [key: string]: any;

    constructor(data?: IItems4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.action = _data["action"];
            this.time = _data["time"];
            this.iso_639_1 = _data["iso_639_1"];
            this.iso_3166_1 = _data["iso_3166_1"];
            this.value = _data["value"] ? Value2.fromJS(_data["value"]) : undefined as any;
            this.original_value = _data["original_value"] ? Original_value.fromJS(_data["original_value"]) : undefined as any;
        }
    }

    static fromJS(data: any): Items4 {
        data = typeof data === 'object' ? data : {};
        let result = new Items4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["action"] = this.action;
        data["time"] = this.time;
        data["iso_639_1"] = this.iso_639_1;
        data["iso_3166_1"] = this.iso_3166_1;
        data["value"] = this.value ? this.value.toJSON() : undefined as any;
        data["original_value"] = this.original_value ? this.original_value.toJSON() : undefined as any;
        return data;
    }
}

export interface IItems4 {
    id?: string;
    action?: string;
    time?: string;
    iso_639_1?: string;
    iso_3166_1?: string;
    value?: Value2;
    original_value?: Original_value;

    [key: string]: any;
}

export class Media2 implements IMedia2 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IMedia2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.popularity = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.title = _data["title"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.media_type = _data["media_type"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.popularity = _data["popularity"] !== undefined ? _data["popularity"] : 0;
            this.release_date = _data["release_date"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Media2 {
        data = typeof data === 'object' ? data : {};
        let result = new Media2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        data["id"] = this.id;
        data["title"] = this.title;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["media_type"] = this.media_type;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["popularity"] = this.popularity;
        data["release_date"] = this.release_date;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IMedia2 {
    adult?: boolean;
    backdrop_path?: string;
    id?: number;
    title?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    media_type?: string;
    genre_ids?: number[];
    popularity?: number;
    release_date?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Data2 implements IData2 {
    biography?: string;
    name?: string;

    [key: string]: any;

    constructor(data?: IData2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.biography = _data["biography"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Data2 {
        data = typeof data === 'object' ? data : {};
        let result = new Data2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["biography"] = this.biography;
        data["name"] = this.name;
        return data;
    }
}

export interface IData2 {
    biography?: string;
    name?: string;

    [key: string]: any;
}

export class Known_for3 implements IKnown_for3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    media_type?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;

    constructor(data?: IKnown_for3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.adult = true;
            this.id = 0;
            this.video = true;
            this.vote_average = 0;
            this.vote_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.adult = _data["adult"] !== undefined ? _data["adult"] : true;
            this.backdrop_path = _data["backdrop_path"];
            if (Array.isArray(_data["genre_ids"])) {
                this.genre_ids = [] as any;
                for (let item of _data["genre_ids"])
                    this.genre_ids!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.media_type = _data["media_type"];
            this.original_language = _data["original_language"];
            this.original_title = _data["original_title"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.release_date = _data["release_date"];
            this.title = _data["title"];
            this.video = _data["video"] !== undefined ? _data["video"] : true;
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
        }
    }

    static fromJS(data: any): Known_for3 {
        data = typeof data === 'object' ? data : {};
        let result = new Known_for3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["adult"] = this.adult;
        data["backdrop_path"] = this.backdrop_path;
        if (Array.isArray(this.genre_ids)) {
            data["genre_ids"] = [];
            for (let item of this.genre_ids)
                data["genre_ids"].push(item);
        }
        data["id"] = this.id;
        data["media_type"] = this.media_type;
        data["original_language"] = this.original_language;
        data["original_title"] = this.original_title;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["release_date"] = this.release_date;
        data["title"] = this.title;
        data["video"] = this.video;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        return data;
    }
}

export interface IKnown_for3 {
    adult?: boolean;
    backdrop_path?: string;
    genre_ids?: number[];
    id?: number;
    media_type?: string;
    original_language?: string;
    original_title?: string;
    overview?: string;
    poster_path?: string;
    release_date?: string;
    title?: string;
    video?: boolean;
    vote_average?: number;
    vote_count?: number;

    [key: string]: any;
}

export class Roles implements IRoles {
    credit_id?: string;
    character?: string;
    episode_count?: number;

    [key: string]: any;

    constructor(data?: IRoles) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.credit_id = _data["credit_id"];
            this.character = _data["character"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
        }
    }

    static fromJS(data: any): Roles {
        data = typeof data === 'object' ? data : {};
        let result = new Roles();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["credit_id"] = this.credit_id;
        data["character"] = this.character;
        data["episode_count"] = this.episode_count;
        return data;
    }
}

export interface IRoles {
    credit_id?: string;
    character?: string;
    episode_count?: number;

    [key: string]: any;
}

export class Jobs implements IJobs {
    credit_id?: string;
    job?: string;
    episode_count?: number;

    [key: string]: any;

    constructor(data?: IJobs) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.credit_id = _data["credit_id"];
            this.job = _data["job"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
        }
    }

    static fromJS(data: any): Jobs {
        data = typeof data === 'object' ? data : {};
        let result = new Jobs();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["credit_id"] = this.credit_id;
        data["job"] = this.job;
        data["episode_count"] = this.episode_count;
        return data;
    }
}

export interface IJobs {
    credit_id?: string;
    job?: string;
    episode_count?: number;

    [key: string]: any;
}

export class Network2 implements INetwork2 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;

    constructor(data?: INetwork2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.logo_path = _data["logo_path"];
            this.name = _data["name"];
            this.origin_country = _data["origin_country"];
        }
    }

    static fromJS(data: any): Network2 {
        data = typeof data === 'object' ? data : {};
        let result = new Network2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["logo_path"] = this.logo_path;
        data["name"] = this.name;
        data["origin_country"] = this.origin_country;
        return data;
    }
}

export interface INetwork2 {
    id?: number;
    logo_path?: string;
    name?: string;
    origin_country?: string;

    [key: string]: any;
}

export class Author_details3 implements IAuthor_details3 {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: number;

    [key: string]: any;

    constructor(data?: IAuthor_details3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.rating = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.username = _data["username"];
            this.avatar_path = _data["avatar_path"];
            this.rating = _data["rating"] !== undefined ? _data["rating"] : 0;
        }
    }

    static fromJS(data: any): Author_details3 {
        data = typeof data === 'object' ? data : {};
        let result = new Author_details3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["username"] = this.username;
        data["avatar_path"] = this.avatar_path;
        data["rating"] = this.rating;
        return data;
    }
}

export interface IAuthor_details3 {
    name?: string;
    username?: string;
    avatar_path?: string;
    rating?: number;

    [key: string]: any;
}

export class Data3 implements IData3 {
    name?: string;
    overview?: string;
    homepage?: string;
    tagline?: string;

    [key: string]: any;

    constructor(data?: IData3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.homepage = _data["homepage"];
            this.tagline = _data["tagline"];
        }
    }

    static fromJS(data: any): Data3 {
        data = typeof data === 'object' ? data : {};
        let result = new Data3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["homepage"] = this.homepage;
        data["tagline"] = this.tagline;
        return data;
    }
}

export interface IData3 {
    name?: string;
    overview?: string;
    homepage?: string;
    tagline?: string;

    [key: string]: any;
}

export class AE2 implements IAE2 {
    link?: string;
    flatrate?: Flatrate88[];

    [key: string]: any;

    constructor(data?: IAE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate88.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AE2 {
        data = typeof data === 'object' ? data : {};
        let result = new AE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAE2 {
    link?: string;
    flatrate?: Flatrate88[];

    [key: string]: any;
}

export class AR2 implements IAR2 {
    link?: string;
    flatrate?: Flatrate89[];

    [key: string]: any;

    constructor(data?: IAR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate89.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AR2 {
        data = typeof data === 'object' ? data : {};
        let result = new AR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAR2 {
    link?: string;
    flatrate?: Flatrate89[];

    [key: string]: any;
}

export class AT2 implements IAT2 {
    link?: string;
    buy?: Buy65[];
    flatrate?: Flatrate90[];

    [key: string]: any;

    constructor(data?: IAT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy65.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate90.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AT2 {
        data = typeof data === 'object' ? data : {};
        let result = new AT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAT2 {
    link?: string;
    buy?: Buy65[];
    flatrate?: Flatrate90[];

    [key: string]: any;
}

export class AU2 implements IAU2 {
    link?: string;
    flatrate?: Flatrate91[];
    buy?: Buy66[];

    [key: string]: any;

    constructor(data?: IAU2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate91.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy66.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AU2 {
        data = typeof data === 'object' ? data : {};
        let result = new AU2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAU2 {
    link?: string;
    flatrate?: Flatrate91[];
    buy?: Buy66[];

    [key: string]: any;
}

export class BA2 implements IBA2 {
    link?: string;
    flatrate?: Flatrate92[];

    [key: string]: any;

    constructor(data?: IBA2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate92.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BA2 {
        data = typeof data === 'object' ? data : {};
        let result = new BA2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBA2 {
    link?: string;
    flatrate?: Flatrate92[];

    [key: string]: any;
}

export class BB2 implements IBB2 {
    link?: string;
    flatrate?: Flatrate93[];

    [key: string]: any;

    constructor(data?: IBB2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate93.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BB2 {
        data = typeof data === 'object' ? data : {};
        let result = new BB2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBB2 {
    link?: string;
    flatrate?: Flatrate93[];

    [key: string]: any;
}

export class BE2 implements IBE2 {
    link?: string;
    flatrate?: Flatrate94[];

    [key: string]: any;

    constructor(data?: IBE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate94.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BE2 {
        data = typeof data === 'object' ? data : {};
        let result = new BE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBE2 {
    link?: string;
    flatrate?: Flatrate94[];

    [key: string]: any;
}

export class BG2 implements IBG2 {
    link?: string;
    flatrate?: Flatrate95[];

    [key: string]: any;

    constructor(data?: IBG2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate95.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BG2 {
        data = typeof data === 'object' ? data : {};
        let result = new BG2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBG2 {
    link?: string;
    flatrate?: Flatrate95[];

    [key: string]: any;
}

export class BO2 implements IBO2 {
    link?: string;
    flatrate?: Flatrate96[];

    [key: string]: any;

    constructor(data?: IBO2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate96.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BO2 {
        data = typeof data === 'object' ? data : {};
        let result = new BO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBO2 {
    link?: string;
    flatrate?: Flatrate96[];

    [key: string]: any;
}

export class BR2 implements IBR2 {
    link?: string;
    flatrate?: Flatrate97[];

    [key: string]: any;

    constructor(data?: IBR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate97.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BR2 {
        data = typeof data === 'object' ? data : {};
        let result = new BR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBR2 {
    link?: string;
    flatrate?: Flatrate97[];

    [key: string]: any;
}

export class BS2 implements IBS2 {
    link?: string;
    flatrate?: Flatrate98[];

    [key: string]: any;

    constructor(data?: IBS2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate98.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BS2 {
        data = typeof data === 'object' ? data : {};
        let result = new BS2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBS2 {
    link?: string;
    flatrate?: Flatrate98[];

    [key: string]: any;
}

export class CA2 implements ICA2 {
    link?: string;
    buy?: Buy67[];
    flatrate?: Flatrate99[];

    [key: string]: any;

    constructor(data?: ICA2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy67.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate99.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CA2 {
        data = typeof data === 'object' ? data : {};
        let result = new CA2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICA2 {
    link?: string;
    buy?: Buy67[];
    flatrate?: Flatrate99[];

    [key: string]: any;
}

export class CH2 implements ICH2 {
    link?: string;
    flatrate?: Flatrate100[];
    buy?: Buy68[];

    [key: string]: any;

    constructor(data?: ICH2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate100.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy68.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CH2 {
        data = typeof data === 'object' ? data : {};
        let result = new CH2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICH2 {
    link?: string;
    flatrate?: Flatrate100[];
    buy?: Buy68[];

    [key: string]: any;
}

export class CI implements ICI {
    link?: string;
    flatrate?: Flatrate101[];

    [key: string]: any;

    constructor(data?: ICI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate101.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CI {
        data = typeof data === 'object' ? data : {};
        let result = new CI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICI {
    link?: string;
    flatrate?: Flatrate101[];

    [key: string]: any;
}

export class CL2 implements ICL2 {
    link?: string;
    flatrate?: Flatrate102[];

    [key: string]: any;

    constructor(data?: ICL2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate102.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CL2 {
        data = typeof data === 'object' ? data : {};
        let result = new CL2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICL2 {
    link?: string;
    flatrate?: Flatrate102[];

    [key: string]: any;
}

export class CO2 implements ICO2 {
    link?: string;
    flatrate?: Flatrate103[];

    [key: string]: any;

    constructor(data?: ICO2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate103.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CO2 {
        data = typeof data === 'object' ? data : {};
        let result = new CO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICO2 {
    link?: string;
    flatrate?: Flatrate103[];

    [key: string]: any;
}

export class CR2 implements ICR2 {
    link?: string;
    flatrate?: Flatrate104[];

    [key: string]: any;

    constructor(data?: ICR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate104.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CR2 {
        data = typeof data === 'object' ? data : {};
        let result = new CR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICR2 {
    link?: string;
    flatrate?: Flatrate104[];

    [key: string]: any;
}

export class CZ2 implements ICZ2 {
    link?: string;
    flatrate?: Flatrate105[];

    [key: string]: any;

    constructor(data?: ICZ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate105.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CZ2 {
        data = typeof data === 'object' ? data : {};
        let result = new CZ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICZ2 {
    link?: string;
    flatrate?: Flatrate105[];

    [key: string]: any;
}

export class DE2 implements IDE2 {
    link?: string;
    buy?: Buy69[];
    flatrate?: Flatrate106[];

    [key: string]: any;

    constructor(data?: IDE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy69.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate106.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DE2 {
        data = typeof data === 'object' ? data : {};
        let result = new DE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDE2 {
    link?: string;
    buy?: Buy69[];
    flatrate?: Flatrate106[];

    [key: string]: any;
}

export class DK2 implements IDK2 {
    link?: string;
    flatrate?: Flatrate107[];

    [key: string]: any;

    constructor(data?: IDK2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate107.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DK2 {
        data = typeof data === 'object' ? data : {};
        let result = new DK2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDK2 {
    link?: string;
    flatrate?: Flatrate107[];

    [key: string]: any;
}

export class DO2 implements IDO2 {
    link?: string;
    flatrate?: Flatrate108[];

    [key: string]: any;

    constructor(data?: IDO2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate108.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DO2 {
        data = typeof data === 'object' ? data : {};
        let result = new DO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDO2 {
    link?: string;
    flatrate?: Flatrate108[];

    [key: string]: any;
}

export class DZ implements IDZ {
    link?: string;
    flatrate?: Flatrate109[];

    [key: string]: any;

    constructor(data?: IDZ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate109.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DZ {
        data = typeof data === 'object' ? data : {};
        let result = new DZ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDZ {
    link?: string;
    flatrate?: Flatrate109[];

    [key: string]: any;
}

export class EC2 implements IEC2 {
    link?: string;
    flatrate?: Flatrate110[];

    [key: string]: any;

    constructor(data?: IEC2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate110.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EC2 {
        data = typeof data === 'object' ? data : {};
        let result = new EC2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEC2 {
    link?: string;
    flatrate?: Flatrate110[];

    [key: string]: any;
}

export class EG2 implements IEG2 {
    link?: string;
    flatrate?: Flatrate111[];

    [key: string]: any;

    constructor(data?: IEG2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate111.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EG2 {
        data = typeof data === 'object' ? data : {};
        let result = new EG2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEG2 {
    link?: string;
    flatrate?: Flatrate111[];

    [key: string]: any;
}

export class ES2 implements IES2 {
    link?: string;
    flatrate?: Flatrate112[];

    [key: string]: any;

    constructor(data?: IES2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate112.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ES2 {
        data = typeof data === 'object' ? data : {};
        let result = new ES2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IES2 {
    link?: string;
    flatrate?: Flatrate112[];

    [key: string]: any;
}

export class FI2 implements IFI2 {
    link?: string;
    buy?: Buy70[];
    flatrate?: Flatrate113[];

    [key: string]: any;

    constructor(data?: IFI2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy70.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate113.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FI2 {
        data = typeof data === 'object' ? data : {};
        let result = new FI2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFI2 {
    link?: string;
    buy?: Buy70[];
    flatrate?: Flatrate113[];

    [key: string]: any;
}

export class FR2 implements IFR2 {
    link?: string;
    buy?: Buy71[];
    flatrate?: Flatrate114[];

    [key: string]: any;

    constructor(data?: IFR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy71.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate114.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FR2 {
        data = typeof data === 'object' ? data : {};
        let result = new FR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFR2 {
    link?: string;
    buy?: Buy71[];
    flatrate?: Flatrate114[];

    [key: string]: any;
}

export class GB2 implements IGB2 {
    link?: string;
    flatrate?: Flatrate115[];
    buy?: Buy72[];

    [key: string]: any;

    constructor(data?: IGB2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate115.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy72.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GB2 {
        data = typeof data === 'object' ? data : {};
        let result = new GB2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGB2 {
    link?: string;
    flatrate?: Flatrate115[];
    buy?: Buy72[];

    [key: string]: any;
}

export class GF2 implements IGF2 {
    link?: string;
    flatrate?: Flatrate116[];

    [key: string]: any;

    constructor(data?: IGF2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate116.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GF2 {
        data = typeof data === 'object' ? data : {};
        let result = new GF2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGF2 {
    link?: string;
    flatrate?: Flatrate116[];

    [key: string]: any;
}

export class GH implements IGH {
    link?: string;
    flatrate?: Flatrate117[];

    [key: string]: any;

    constructor(data?: IGH) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate117.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GH {
        data = typeof data === 'object' ? data : {};
        let result = new GH();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGH {
    link?: string;
    flatrate?: Flatrate117[];

    [key: string]: any;
}

export class GQ implements IGQ {
    link?: string;
    flatrate?: Flatrate118[];

    [key: string]: any;

    constructor(data?: IGQ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate118.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GQ {
        data = typeof data === 'object' ? data : {};
        let result = new GQ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGQ {
    link?: string;
    flatrate?: Flatrate118[];

    [key: string]: any;
}

export class GT2 implements IGT2 {
    link?: string;
    flatrate?: Flatrate119[];

    [key: string]: any;

    constructor(data?: IGT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate119.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GT2 {
        data = typeof data === 'object' ? data : {};
        let result = new GT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGT2 {
    link?: string;
    flatrate?: Flatrate119[];

    [key: string]: any;
}

export class HK2 implements IHK2 {
    link?: string;
    flatrate?: Flatrate120[];

    [key: string]: any;

    constructor(data?: IHK2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate120.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HK2 {
        data = typeof data === 'object' ? data : {};
        let result = new HK2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHK2 {
    link?: string;
    flatrate?: Flatrate120[];

    [key: string]: any;
}

export class HN2 implements IHN2 {
    link?: string;
    flatrate?: Flatrate121[];

    [key: string]: any;

    constructor(data?: IHN2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate121.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HN2 {
        data = typeof data === 'object' ? data : {};
        let result = new HN2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHN2 {
    link?: string;
    flatrate?: Flatrate121[];

    [key: string]: any;
}

export class HR2 implements IHR2 {
    link?: string;
    flatrate?: Flatrate122[];

    [key: string]: any;

    constructor(data?: IHR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate122.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HR2 {
        data = typeof data === 'object' ? data : {};
        let result = new HR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHR2 {
    link?: string;
    flatrate?: Flatrate122[];

    [key: string]: any;
}

export class HU2 implements IHU2 {
    link?: string;
    flatrate?: Flatrate123[];

    [key: string]: any;

    constructor(data?: IHU2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate123.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HU2 {
        data = typeof data === 'object' ? data : {};
        let result = new HU2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHU2 {
    link?: string;
    flatrate?: Flatrate123[];

    [key: string]: any;
}

export class ID2 implements IID2 {
    link?: string;
    flatrate?: Flatrate124[];

    [key: string]: any;

    constructor(data?: IID2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate124.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ID2 {
        data = typeof data === 'object' ? data : {};
        let result = new ID2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IID2 {
    link?: string;
    flatrate?: Flatrate124[];

    [key: string]: any;
}

export class IE2 implements IIE2 {
    link?: string;
    flatrate?: Flatrate125[];
    buy?: Buy73[];

    [key: string]: any;

    constructor(data?: IIE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate125.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy73.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IE2 {
        data = typeof data === 'object' ? data : {};
        let result = new IE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIE2 {
    link?: string;
    flatrate?: Flatrate125[];
    buy?: Buy73[];

    [key: string]: any;
}

export class IL2 implements IIL2 {
    link?: string;
    flatrate?: Flatrate126[];

    [key: string]: any;

    constructor(data?: IIL2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate126.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IL2 {
        data = typeof data === 'object' ? data : {};
        let result = new IL2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIL2 {
    link?: string;
    flatrate?: Flatrate126[];

    [key: string]: any;
}

export class IQ2 implements IIQ2 {
    link?: string;
    flatrate?: Flatrate127[];

    [key: string]: any;

    constructor(data?: IIQ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate127.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IQ2 {
        data = typeof data === 'object' ? data : {};
        let result = new IQ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIQ2 {
    link?: string;
    flatrate?: Flatrate127[];

    [key: string]: any;
}

export class IT2 implements IIT2 {
    link?: string;
    buy?: Buy74[];
    flatrate?: Flatrate128[];

    [key: string]: any;

    constructor(data?: IIT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy74.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate128.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IT2 {
        data = typeof data === 'object' ? data : {};
        let result = new IT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIT2 {
    link?: string;
    buy?: Buy74[];
    flatrate?: Flatrate128[];

    [key: string]: any;
}

export class JM2 implements IJM2 {
    link?: string;
    flatrate?: Flatrate129[];

    [key: string]: any;

    constructor(data?: IJM2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate129.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JM2 {
        data = typeof data === 'object' ? data : {};
        let result = new JM2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJM2 {
    link?: string;
    flatrate?: Flatrate129[];

    [key: string]: any;
}

export class JP2 implements IJP2 {
    link?: string;
    flatrate?: Flatrate130[];
    buy?: Buy75[];
    rent?: Rent46[];

    [key: string]: any;

    constructor(data?: IJP2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate130.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy75.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent46.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JP2 {
        data = typeof data === 'object' ? data : {};
        let result = new JP2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJP2 {
    link?: string;
    flatrate?: Flatrate130[];
    buy?: Buy75[];
    rent?: Rent46[];

    [key: string]: any;
}

export class KE implements IKE {
    link?: string;
    flatrate?: Flatrate131[];

    [key: string]: any;

    constructor(data?: IKE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate131.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KE {
        data = typeof data === 'object' ? data : {};
        let result = new KE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKE {
    link?: string;
    flatrate?: Flatrate131[];

    [key: string]: any;
}

export class KR2 implements IKR2 {
    link?: string;
    flatrate?: Flatrate132[];

    [key: string]: any;

    constructor(data?: IKR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate132.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KR2 {
        data = typeof data === 'object' ? data : {};
        let result = new KR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKR2 {
    link?: string;
    flatrate?: Flatrate132[];

    [key: string]: any;
}

export class LB2 implements ILB2 {
    link?: string;
    flatrate?: Flatrate133[];

    [key: string]: any;

    constructor(data?: ILB2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate133.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LB2 {
        data = typeof data === 'object' ? data : {};
        let result = new LB2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILB2 {
    link?: string;
    flatrate?: Flatrate133[];

    [key: string]: any;
}

export class LT2 implements ILT2 {
    link?: string;
    flatrate?: Flatrate134[];

    [key: string]: any;

    constructor(data?: ILT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate134.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LT2 {
        data = typeof data === 'object' ? data : {};
        let result = new LT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILT2 {
    link?: string;
    flatrate?: Flatrate134[];

    [key: string]: any;
}

export class LY implements ILY {
    link?: string;
    flatrate?: Flatrate135[];

    [key: string]: any;

    constructor(data?: ILY) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate135.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LY {
        data = typeof data === 'object' ? data : {};
        let result = new LY();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILY {
    link?: string;
    flatrate?: Flatrate135[];

    [key: string]: any;
}

export class MD2 implements IMD2 {
    link?: string;
    flatrate?: Flatrate136[];

    [key: string]: any;

    constructor(data?: IMD2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate136.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MD2 {
        data = typeof data === 'object' ? data : {};
        let result = new MD2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMD2 {
    link?: string;
    flatrate?: Flatrate136[];

    [key: string]: any;
}

export class MK2 implements IMK2 {
    link?: string;
    flatrate?: Flatrate137[];

    [key: string]: any;

    constructor(data?: IMK2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate137.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MK2 {
        data = typeof data === 'object' ? data : {};
        let result = new MK2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMK2 {
    link?: string;
    flatrate?: Flatrate137[];

    [key: string]: any;
}

export class MU2 implements IMU2 {
    link?: string;
    flatrate?: Flatrate138[];

    [key: string]: any;

    constructor(data?: IMU2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate138.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MU2 {
        data = typeof data === 'object' ? data : {};
        let result = new MU2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMU2 {
    link?: string;
    flatrate?: Flatrate138[];

    [key: string]: any;
}

export class MX2 implements IMX2 {
    link?: string;
    flatrate?: Flatrate139[];

    [key: string]: any;

    constructor(data?: IMX2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate139.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MX2 {
        data = typeof data === 'object' ? data : {};
        let result = new MX2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMX2 {
    link?: string;
    flatrate?: Flatrate139[];

    [key: string]: any;
}

export class MY2 implements IMY2 {
    link?: string;
    flatrate?: Flatrate140[];

    [key: string]: any;

    constructor(data?: IMY2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate140.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MY2 {
        data = typeof data === 'object' ? data : {};
        let result = new MY2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMY2 {
    link?: string;
    flatrate?: Flatrate140[];

    [key: string]: any;
}

export class MZ2 implements IMZ2 {
    link?: string;
    flatrate?: Flatrate141[];

    [key: string]: any;

    constructor(data?: IMZ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate141.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MZ2 {
        data = typeof data === 'object' ? data : {};
        let result = new MZ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMZ2 {
    link?: string;
    flatrate?: Flatrate141[];

    [key: string]: any;
}

export class NE implements INE {
    link?: string;
    flatrate?: Flatrate142[];

    [key: string]: any;

    constructor(data?: INE) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate142.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NE {
        data = typeof data === 'object' ? data : {};
        let result = new NE();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INE {
    link?: string;
    flatrate?: Flatrate142[];

    [key: string]: any;
}

export class NG implements ING {
    link?: string;
    flatrate?: Flatrate143[];

    [key: string]: any;

    constructor(data?: ING) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate143.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NG {
        data = typeof data === 'object' ? data : {};
        let result = new NG();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ING {
    link?: string;
    flatrate?: Flatrate143[];

    [key: string]: any;
}

export class NL2 implements INL2 {
    link?: string;
    flatrate?: Flatrate144[];
    buy?: Buy76[];

    [key: string]: any;

    constructor(data?: INL2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate144.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy76.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NL2 {
        data = typeof data === 'object' ? data : {};
        let result = new NL2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INL2 {
    link?: string;
    flatrate?: Flatrate144[];
    buy?: Buy76[];

    [key: string]: any;
}

export class NO2 implements INO2 {
    link?: string;
    flatrate?: Flatrate145[];
    buy?: Buy77[];

    [key: string]: any;

    constructor(data?: INO2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate145.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy77.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NO2 {
        data = typeof data === 'object' ? data : {};
        let result = new NO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INO2 {
    link?: string;
    flatrate?: Flatrate145[];
    buy?: Buy77[];

    [key: string]: any;
}

export class NZ2 implements INZ2 {
    link?: string;
    flatrate?: Flatrate146[];

    [key: string]: any;

    constructor(data?: INZ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate146.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NZ2 {
        data = typeof data === 'object' ? data : {};
        let result = new NZ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INZ2 {
    link?: string;
    flatrate?: Flatrate146[];

    [key: string]: any;
}

export class PA2 implements IPA2 {
    link?: string;
    flatrate?: Flatrate147[];

    [key: string]: any;

    constructor(data?: IPA2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate147.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PA2 {
        data = typeof data === 'object' ? data : {};
        let result = new PA2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPA2 {
    link?: string;
    flatrate?: Flatrate147[];

    [key: string]: any;
}

export class PE2 implements IPE2 {
    link?: string;
    flatrate?: Flatrate148[];

    [key: string]: any;

    constructor(data?: IPE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate148.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PE2 {
        data = typeof data === 'object' ? data : {};
        let result = new PE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPE2 {
    link?: string;
    flatrate?: Flatrate148[];

    [key: string]: any;
}

export class PH2 implements IPH2 {
    link?: string;
    flatrate?: Flatrate149[];

    [key: string]: any;

    constructor(data?: IPH2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate149.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PH2 {
        data = typeof data === 'object' ? data : {};
        let result = new PH2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPH2 {
    link?: string;
    flatrate?: Flatrate149[];

    [key: string]: any;
}

export class PL2 implements IPL2 {
    link?: string;
    flatrate?: Flatrate150[];
    rent?: Rent47[];

    [key: string]: any;

    constructor(data?: IPL2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate150.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent47.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PL2 {
        data = typeof data === 'object' ? data : {};
        let result = new PL2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPL2 {
    link?: string;
    flatrate?: Flatrate150[];
    rent?: Rent47[];

    [key: string]: any;
}

export class PS2 implements IPS2 {
    link?: string;
    flatrate?: Flatrate151[];

    [key: string]: any;

    constructor(data?: IPS2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate151.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PS2 {
        data = typeof data === 'object' ? data : {};
        let result = new PS2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPS2 {
    link?: string;
    flatrate?: Flatrate151[];

    [key: string]: any;
}

export class PT2 implements IPT2 {
    link?: string;
    flatrate?: Flatrate152[];

    [key: string]: any;

    constructor(data?: IPT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate152.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PT2 {
        data = typeof data === 'object' ? data : {};
        let result = new PT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPT2 {
    link?: string;
    flatrate?: Flatrate152[];

    [key: string]: any;
}

export class PY2 implements IPY2 {
    link?: string;
    flatrate?: Flatrate153[];

    [key: string]: any;

    constructor(data?: IPY2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate153.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PY2 {
        data = typeof data === 'object' ? data : {};
        let result = new PY2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPY2 {
    link?: string;
    flatrate?: Flatrate153[];

    [key: string]: any;
}

export class RO2 implements IRO2 {
    link?: string;
    flatrate?: Flatrate154[];

    [key: string]: any;

    constructor(data?: IRO2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate154.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RO2 {
        data = typeof data === 'object' ? data : {};
        let result = new RO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRO2 {
    link?: string;
    flatrate?: Flatrate154[];

    [key: string]: any;
}

export class RS2 implements IRS2 {
    link?: string;
    flatrate?: Flatrate155[];

    [key: string]: any;

    constructor(data?: IRS2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate155.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RS2 {
        data = typeof data === 'object' ? data : {};
        let result = new RS2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRS2 {
    link?: string;
    flatrate?: Flatrate155[];

    [key: string]: any;
}

export class RU2 implements IRU2 {
    link?: string;
    flatrate?: Flatrate156[];
    ads?: Ads3[];

    [key: string]: any;

    constructor(data?: IRU2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate156.fromJS(item));
            }
            if (Array.isArray(_data["ads"])) {
                this.ads = [] as any;
                for (let item of _data["ads"])
                    this.ads!.push(Ads3.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RU2 {
        data = typeof data === 'object' ? data : {};
        let result = new RU2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.ads)) {
            data["ads"] = [];
            for (let item of this.ads)
                data["ads"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRU2 {
    link?: string;
    flatrate?: Flatrate156[];
    ads?: Ads3[];

    [key: string]: any;
}

export class SA2 implements ISA2 {
    link?: string;
    flatrate?: Flatrate157[];

    [key: string]: any;

    constructor(data?: ISA2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate157.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SA2 {
        data = typeof data === 'object' ? data : {};
        let result = new SA2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISA2 {
    link?: string;
    flatrate?: Flatrate157[];

    [key: string]: any;
}

export class SC implements ISC {
    link?: string;
    flatrate?: Flatrate158[];

    [key: string]: any;

    constructor(data?: ISC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate158.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SC {
        data = typeof data === 'object' ? data : {};
        let result = new SC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISC {
    link?: string;
    flatrate?: Flatrate158[];

    [key: string]: any;
}

export class SE2 implements ISE2 {
    link?: string;
    flatrate?: Flatrate159[];
    buy?: Buy78[];

    [key: string]: any;

    constructor(data?: ISE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate159.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy78.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SE2 {
        data = typeof data === 'object' ? data : {};
        let result = new SE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISE2 {
    link?: string;
    flatrate?: Flatrate159[];
    buy?: Buy78[];

    [key: string]: any;
}

export class SG2 implements ISG2 {
    link?: string;
    flatrate?: Flatrate160[];

    [key: string]: any;

    constructor(data?: ISG2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate160.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SG2 {
        data = typeof data === 'object' ? data : {};
        let result = new SG2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISG2 {
    link?: string;
    flatrate?: Flatrate160[];

    [key: string]: any;
}

export class SI2 implements ISI2 {
    link?: string;
    flatrate?: Flatrate161[];

    [key: string]: any;

    constructor(data?: ISI2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate161.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SI2 {
        data = typeof data === 'object' ? data : {};
        let result = new SI2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISI2 {
    link?: string;
    flatrate?: Flatrate161[];

    [key: string]: any;
}

export class SK2 implements ISK2 {
    link?: string;
    flatrate?: Flatrate162[];

    [key: string]: any;

    constructor(data?: ISK2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate162.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SK2 {
        data = typeof data === 'object' ? data : {};
        let result = new SK2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISK2 {
    link?: string;
    flatrate?: Flatrate162[];

    [key: string]: any;
}

export class SN implements ISN {
    link?: string;
    flatrate?: Flatrate163[];

    [key: string]: any;

    constructor(data?: ISN) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate163.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SN {
        data = typeof data === 'object' ? data : {};
        let result = new SN();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISN {
    link?: string;
    flatrate?: Flatrate163[];

    [key: string]: any;
}

export class SV2 implements ISV2 {
    link?: string;
    flatrate?: Flatrate164[];

    [key: string]: any;

    constructor(data?: ISV2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate164.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SV2 {
        data = typeof data === 'object' ? data : {};
        let result = new SV2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISV2 {
    link?: string;
    flatrate?: Flatrate164[];

    [key: string]: any;
}

export class TH2 implements ITH2 {
    link?: string;
    flatrate?: Flatrate165[];

    [key: string]: any;

    constructor(data?: ITH2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate165.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TH2 {
        data = typeof data === 'object' ? data : {};
        let result = new TH2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITH2 {
    link?: string;
    flatrate?: Flatrate165[];

    [key: string]: any;
}

export class TR2 implements ITR2 {
    link?: string;
    flatrate?: Flatrate166[];

    [key: string]: any;

    constructor(data?: ITR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate166.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TR2 {
        data = typeof data === 'object' ? data : {};
        let result = new TR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITR2 {
    link?: string;
    flatrate?: Flatrate166[];

    [key: string]: any;
}

export class TT2 implements ITT2 {
    link?: string;
    flatrate?: Flatrate167[];

    [key: string]: any;

    constructor(data?: ITT2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate167.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TT2 {
        data = typeof data === 'object' ? data : {};
        let result = new TT2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITT2 {
    link?: string;
    flatrate?: Flatrate167[];

    [key: string]: any;
}

export class TW2 implements ITW2 {
    link?: string;
    flatrate?: Flatrate168[];

    [key: string]: any;

    constructor(data?: ITW2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate168.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TW2 {
        data = typeof data === 'object' ? data : {};
        let result = new TW2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITW2 {
    link?: string;
    flatrate?: Flatrate168[];

    [key: string]: any;
}

export class TZ implements ITZ {
    link?: string;
    flatrate?: Flatrate169[];

    [key: string]: any;

    constructor(data?: ITZ) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate169.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TZ {
        data = typeof data === 'object' ? data : {};
        let result = new TZ();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITZ {
    link?: string;
    flatrate?: Flatrate169[];

    [key: string]: any;
}

export class UG2 implements IUG2 {
    link?: string;
    flatrate?: Flatrate170[];

    [key: string]: any;

    constructor(data?: IUG2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate170.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UG2 {
        data = typeof data === 'object' ? data : {};
        let result = new UG2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUG2 {
    link?: string;
    flatrate?: Flatrate170[];

    [key: string]: any;
}

export class US2 implements IUS2 {
    link?: string;
    free?: Free[];
    buy?: Buy79[];
    flatrate?: Flatrate171[];

    [key: string]: any;

    constructor(data?: IUS2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["free"])) {
                this.free = [] as any;
                for (let item of _data["free"])
                    this.free!.push(Free.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy79.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate171.fromJS(item));
            }
        }
    }

    static fromJS(data: any): US2 {
        data = typeof data === 'object' ? data : {};
        let result = new US2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.free)) {
            data["free"] = [];
            for (let item of this.free)
                data["free"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUS2 {
    link?: string;
    free?: Free[];
    buy?: Buy79[];
    flatrate?: Flatrate171[];

    [key: string]: any;
}

export class UY2 implements IUY2 {
    link?: string;
    flatrate?: Flatrate172[];

    [key: string]: any;

    constructor(data?: IUY2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate172.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UY2 {
        data = typeof data === 'object' ? data : {};
        let result = new UY2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUY2 {
    link?: string;
    flatrate?: Flatrate172[];

    [key: string]: any;
}

export class VE2 implements IVE2 {
    link?: string;
    flatrate?: Flatrate173[];

    [key: string]: any;

    constructor(data?: IVE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate173.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VE2 {
        data = typeof data === 'object' ? data : {};
        let result = new VE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IVE2 {
    link?: string;
    flatrate?: Flatrate173[];

    [key: string]: any;
}

export class ZA2 implements IZA2 {
    link?: string;
    flatrate?: Flatrate174[];

    [key: string]: any;

    constructor(data?: IZA2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate174.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ZA2 {
        data = typeof data === 'object' ? data : {};
        let result = new ZA2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IZA2 {
    link?: string;
    flatrate?: Flatrate174[];

    [key: string]: any;
}

export class ZM implements IZM {
    link?: string;
    flatrate?: Flatrate175[];

    [key: string]: any;

    constructor(data?: IZM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate175.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ZM {
        data = typeof data === 'object' ? data : {};
        let result = new ZM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IZM {
    link?: string;
    flatrate?: Flatrate175[];

    [key: string]: any;
}

export class Rated4 implements IRated4 {
    value?: number;

    [key: string]: any;

    constructor(data?: IRated4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.value = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"] !== undefined ? _data["value"] : 0;
        }
    }

    static fromJS(data: any): Rated4 {
        data = typeof data === 'object' ? data : {};
        let result = new Rated4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        return data;
    }
}

export interface IRated4 {
    value?: number;

    [key: string]: any;
}

export class Roles2 implements IRoles2 {
    credit_id?: string;
    character?: string;
    episode_count?: number;

    [key: string]: any;

    constructor(data?: IRoles2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.credit_id = _data["credit_id"];
            this.character = _data["character"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
        }
    }

    static fromJS(data: any): Roles2 {
        data = typeof data === 'object' ? data : {};
        let result = new Roles2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["credit_id"] = this.credit_id;
        data["character"] = this.character;
        data["episode_count"] = this.episode_count;
        return data;
    }
}

export interface IRoles2 {
    credit_id?: string;
    character?: string;
    episode_count?: number;

    [key: string]: any;
}

export class Jobs2 implements IJobs2 {
    credit_id?: string;
    job?: string;
    episode_count?: number;

    [key: string]: any;

    constructor(data?: IJobs2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.credit_id = _data["credit_id"];
            this.job = _data["job"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
        }
    }

    static fromJS(data: any): Jobs2 {
        data = typeof data === 'object' ? data : {};
        let result = new Jobs2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["credit_id"] = this.credit_id;
        data["job"] = this.job;
        data["episode_count"] = this.episode_count;
        return data;
    }
}

export interface IJobs2 {
    credit_id?: string;
    job?: string;
    episode_count?: number;

    [key: string]: any;
}

export class Items5 implements IItems5 {
    id?: string;
    action?: string;
    time?: string;
    value?: Value3;

    [key: string]: any;

    constructor(data?: IItems5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.action = _data["action"];
            this.time = _data["time"];
            this.value = _data["value"] ? Value3.fromJS(_data["value"]) : undefined as any;
        }
    }

    static fromJS(data: any): Items5 {
        data = typeof data === 'object' ? data : {};
        let result = new Items5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["action"] = this.action;
        data["time"] = this.time;
        data["value"] = this.value ? this.value.toJSON() : undefined as any;
        return data;
    }
}

export interface IItems5 {
    id?: string;
    action?: string;
    time?: string;
    value?: Value3;

    [key: string]: any;
}

export class Data4 implements IData4 {
    name?: string;
    overview?: string;

    [key: string]: any;

    constructor(data?: IData4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.overview = _data["overview"];
        }
    }

    static fromJS(data: any): Data4 {
        data = typeof data === 'object' ? data : {};
        let result = new Data4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["overview"] = this.overview;
        return data;
    }
}

export interface IData4 {
    name?: string;
    overview?: string;

    [key: string]: any;
}

export class Data5 implements IData5 {
    name?: string;
    overview?: string;

    [key: string]: any;

    constructor(data?: IData5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.overview = _data["overview"];
        }
    }

    static fromJS(data: any): Data5 {
        data = typeof data === 'object' ? data : {};
        let result = new Data5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["overview"] = this.overview;
        return data;
    }
}

export interface IData5 {
    name?: string;
    overview?: string;

    [key: string]: any;
}

export class Gravatar implements IGravatar {
    hash?: string;

    [key: string]: any;

    constructor(data?: IGravatar) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.hash = _data["hash"];
        }
    }

    static fromJS(data: any): Gravatar {
        data = typeof data === 'object' ? data : {};
        let result = new Gravatar();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["hash"] = this.hash;
        return data;
    }
}

export interface IGravatar {
    hash?: string;

    [key: string]: any;
}

export class Tmdb implements ITmdb {
    avatar_path?: string;

    [key: string]: any;

    constructor(data?: ITmdb) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.avatar_path = _data["avatar_path"];
        }
    }

    static fromJS(data: any): Tmdb {
        data = typeof data === 'object' ? data : {};
        let result = new Tmdb();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["avatar_path"] = this.avatar_path;
        return data;
    }
}

export interface ITmdb {
    avatar_path?: string;

    [key: string]: any;
}

export class AU3 implements IAU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IAU3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): AU3 {
        data = typeof data === 'object' ? data : {};
        let result = new AU3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IAU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class BG3 implements IBG3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IBG3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): BG3 {
        data = typeof data === 'object' ? data : {};
        let result = new BG3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IBG3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class BR3 implements IBR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IBR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): BR3 {
        data = typeof data === 'object' ? data : {};
        let result = new BR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IBR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class CA3 implements ICA3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICA3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): CA3 {
        data = typeof data === 'object' ? data : {};
        let result = new CA3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ICA3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class CAQC implements ICAQC {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICAQC) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): CAQC {
        data = typeof data === 'object' ? data : {};
        let result = new CAQC();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ICAQC {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class DE3 implements IDE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IDE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): DE3 {
        data = typeof data === 'object' ? data : {};
        let result = new DE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IDE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class DK3 implements IDK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IDK3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): DK3 {
        data = typeof data === 'object' ? data : {};
        let result = new DK3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IDK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ES3 implements IES3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IES3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ES3 {
        data = typeof data === 'object' ? data : {};
        let result = new ES3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IES3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class FI3 implements IFI3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IFI3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): FI3 {
        data = typeof data === 'object' ? data : {};
        let result = new FI3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IFI3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class FR3 implements IFR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IFR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): FR3 {
        data = typeof data === 'object' ? data : {};
        let result = new FR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IFR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class GB3 implements IGB3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IGB3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): GB3 {
        data = typeof data === 'object' ? data : {};
        let result = new GB3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IGB3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class HU3 implements IHU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IHU3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): HU3 {
        data = typeof data === 'object' ? data : {};
        let result = new HU3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IHU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IN2 implements IIN2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIN2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IN2 {
        data = typeof data === 'object' ? data : {};
        let result = new IN2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIN2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IT3 implements IIT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IT3 {
        data = typeof data === 'object' ? data : {};
        let result = new IT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class LT3 implements ILT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ILT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): LT3 {
        data = typeof data === 'object' ? data : {};
        let result = new LT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ILT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MY3 implements IMY3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMY3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MY3 {
        data = typeof data === 'object' ? data : {};
        let result = new MY3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMY3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NL3 implements INL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INL3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NL3 {
        data = typeof data === 'object' ? data : {};
        let result = new NL3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NO3 implements INO3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INO3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NO3 {
        data = typeof data === 'object' ? data : {};
        let result = new NO3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INO3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NZ3 implements INZ3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INZ3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NZ3 {
        data = typeof data === 'object' ? data : {};
        let result = new NZ3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INZ3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PH3 implements IPH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPH3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PH3 {
        data = typeof data === 'object' ? data : {};
        let result = new PH3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PT3 implements IPT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PT3 {
        data = typeof data === 'object' ? data : {};
        let result = new PT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPT3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class RU3 implements IRU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IRU3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): RU3 {
        data = typeof data === 'object' ? data : {};
        let result = new RU3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IRU3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SE3 implements ISE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SE3 {
        data = typeof data === 'object' ? data : {};
        let result = new SE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class US3 implements IUS3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IUS3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): US3 {
        data = typeof data === 'object' ? data : {};
        let result = new US3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IUS3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class KR3 implements IKR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IKR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): KR3 {
        data = typeof data === 'object' ? data : {};
        let result = new KR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IKR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SK3 implements ISK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISK3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SK3 {
        data = typeof data === 'object' ? data : {};
        let result = new SK3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TH3 implements ITH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITH3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TH3 {
        data = typeof data === 'object' ? data : {};
        let result = new TH3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MX3 implements IMX3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMX3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MX3 {
        data = typeof data === 'object' ? data : {};
        let result = new MX3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMX3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ID3 implements IID3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IID3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ID3 {
        data = typeof data === 'object' ? data : {};
        let result = new ID3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IID3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TR3 implements ITR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TR3 {
        data = typeof data === 'object' ? data : {};
        let result = new TR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class AR3 implements IAR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IAR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): AR3 {
        data = typeof data === 'object' ? data : {};
        let result = new AR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IAR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class GR2 implements IGR2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IGR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): GR2 {
        data = typeof data === 'object' ? data : {};
        let result = new GR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IGR2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TW3 implements ITW3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITW3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TW3 {
        data = typeof data === 'object' ? data : {};
        let result = new TW3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITW3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ZA3 implements IZA3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IZA3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ZA3 {
        data = typeof data === 'object' ? data : {};
        let result = new ZA3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IZA3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SG3 implements ISG3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISG3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SG3 {
        data = typeof data === 'object' ? data : {};
        let result = new SG3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISG3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IE3 implements IIE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IE3 {
        data = typeof data === 'object' ? data : {};
        let result = new IE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIE3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PR implements IPR {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPR) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PR {
        data = typeof data === 'object' ? data : {};
        let result = new PR();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPR {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class JP3 implements IJP3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IJP3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): JP3 {
        data = typeof data === 'object' ? data : {};
        let result = new JP3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IJP3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class VI implements IVI {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IVI) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): VI {
        data = typeof data === 'object' ? data : {};
        let result = new VI();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IVI {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class CH3 implements ICH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICH3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): CH3 {
        data = typeof data === 'object' ? data : {};
        let result = new CH3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ICH3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IL3 implements IIL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIL3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IL3 {
        data = typeof data === 'object' ? data : {};
        let result = new IL3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class HK3 implements IHK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IHK3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): HK3 {
        data = typeof data === 'object' ? data : {};
        let result = new HK3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IHK3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MO implements IMO {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MO {
        data = typeof data === 'object' ? data : {};
        let result = new MO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMO {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class LV2 implements ILV2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ILV2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): LV2 {
        data = typeof data === 'object' ? data : {};
        let result = new LV2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ILV2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class LU implements ILU {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ILU) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): LU {
        data = typeof data === 'object' ? data : {};
        let result = new LU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ILU {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class AU4 implements IAU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IAU4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): AU4 {
        data = typeof data === 'object' ? data : {};
        let result = new AU4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IAU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class BR4 implements IBR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IBR4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): BR4 {
        data = typeof data === 'object' ? data : {};
        let result = new BR4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IBR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class CA4 implements ICA4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICA4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): CA4 {
        data = typeof data === 'object' ? data : {};
        let result = new CA4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ICA4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class CAQC2 implements ICAQC2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ICAQC2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): CAQC2 {
        data = typeof data === 'object' ? data : {};
        let result = new CAQC2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ICAQC2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class DE4 implements IDE4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IDE4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): DE4 {
        data = typeof data === 'object' ? data : {};
        let result = new DE4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IDE4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ES4 implements IES4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IES4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ES4 {
        data = typeof data === 'object' ? data : {};
        let result = new ES4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IES4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class FR4 implements IFR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IFR4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): FR4 {
        data = typeof data === 'object' ? data : {};
        let result = new FR4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IFR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class GB4 implements IGB4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IGB4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): GB4 {
        data = typeof data === 'object' ? data : {};
        let result = new GB4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IGB4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class HU4 implements IHU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IHU4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): HU4 {
        data = typeof data === 'object' ? data : {};
        let result = new HU4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IHU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class KR4 implements IKR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IKR4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): KR4 {
        data = typeof data === 'object' ? data : {};
        let result = new KR4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IKR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class LT4 implements ILT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ILT4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): LT4 {
        data = typeof data === 'object' ? data : {};
        let result = new LT4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ILT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NL4 implements INL4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INL4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NL4 {
        data = typeof data === 'object' ? data : {};
        let result = new NL4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INL4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PH4 implements IPH4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPH4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PH4 {
        data = typeof data === 'object' ? data : {};
        let result = new PH4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPH4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PT4 implements IPT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPT4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PT4 {
        data = typeof data === 'object' ? data : {};
        let result = new PT4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class RU4 implements IRU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IRU4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): RU4 {
        data = typeof data === 'object' ? data : {};
        let result = new RU4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IRU4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SK4 implements ISK4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISK4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SK4 {
        data = typeof data === 'object' ? data : {};
        let result = new SK4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISK4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TH4 implements ITH4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITH4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TH4 {
        data = typeof data === 'object' ? data : {};
        let result = new TH4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITH4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class US4 implements IUS4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IUS4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): US4 {
        data = typeof data === 'object' ? data : {};
        let result = new US4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IUS4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IT4 implements IIT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIT4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IT4 {
        data = typeof data === 'object' ? data : {};
        let result = new IT4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIT4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class FI4 implements IFI4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IFI4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): FI4 {
        data = typeof data === 'object' ? data : {};
        let result = new FI4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IFI4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MY4 implements IMY4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMY4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MY4 {
        data = typeof data === 'object' ? data : {};
        let result = new MY4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMY4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NZ4 implements INZ4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INZ4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NZ4 {
        data = typeof data === 'object' ? data : {};
        let result = new NZ4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INZ4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class NO4 implements INO4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: INO4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): NO4 {
        data = typeof data === 'object' ? data : {};
        let result = new NO4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface INO4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class BG4 implements IBG4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IBG4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): BG4 {
        data = typeof data === 'object' ? data : {};
        let result = new BG4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IBG4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MX4 implements IMX4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMX4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MX4 {
        data = typeof data === 'object' ? data : {};
        let result = new MX4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMX4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IN3 implements IIN3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIN3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IN3 {
        data = typeof data === 'object' ? data : {};
        let result = new IN3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIN3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class DK4 implements IDK4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IDK4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): DK4 {
        data = typeof data === 'object' ? data : {};
        let result = new DK4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IDK4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SE4 implements ISE4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISE4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SE4 {
        data = typeof data === 'object' ? data : {};
        let result = new SE4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISE4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ID4 implements IID4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IID4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ID4 {
        data = typeof data === 'object' ? data : {};
        let result = new ID4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IID4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TR4 implements ITR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITR4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TR4 {
        data = typeof data === 'object' ? data : {};
        let result = new TR4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class AR4 implements IAR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IAR4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): AR4 {
        data = typeof data === 'object' ? data : {};
        let result = new AR4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IAR4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PL3 implements IPL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPL3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PL3 {
        data = typeof data === 'object' ? data : {};
        let result = new PL3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPL3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class MA implements IMA {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IMA) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): MA {
        data = typeof data === 'object' ? data : {};
        let result = new MA();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IMA {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class GR3 implements IGR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IGR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): GR3 {
        data = typeof data === 'object' ? data : {};
        let result = new GR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IGR3 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class IL4 implements IIL4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IIL4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): IL4 {
        data = typeof data === 'object' ? data : {};
        let result = new IL4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IIL4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class TW4 implements ITW4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ITW4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): TW4 {
        data = typeof data === 'object' ? data : {};
        let result = new TW4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ITW4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class ZA4 implements IZA4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IZA4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): ZA4 {
        data = typeof data === 'object' ? data : {};
        let result = new ZA4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IZA4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class SG4 implements ISG4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: ISG4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): SG4 {
        data = typeof data === 'object' ? data : {};
        let result = new SG4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface ISG4 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class PR2 implements IPR2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IPR2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): PR2 {
        data = typeof data === 'object' ? data : {};
        let result = new PR2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IPR2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class VI2 implements IVI2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;

    constructor(data?: IVI2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.certification = _data["certification"];
            this.meaning = _data["meaning"];
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): VI2 {
        data = typeof data === 'object' ? data : {};
        let result = new VI2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["certification"] = this.certification;
        data["meaning"] = this.meaning;
        data["order"] = this.order;
        return data;
    }
}

export interface IVI2 {
    certification?: string;
    meaning?: string;
    order?: number;

    [key: string]: any;
}

export class Data6 implements IData6 {
    title?: string;
    overview?: string;
    homepage?: string;

    [key: string]: any;

    constructor(data?: IData6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.title = _data["title"];
            this.overview = _data["overview"];
            this.homepage = _data["homepage"];
        }
    }

    static fromJS(data: any): Data6 {
        data = typeof data === 'object' ? data : {};
        let result = new Data6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["title"] = this.title;
        data["overview"] = this.overview;
        data["homepage"] = this.homepage;
        return data;
    }
}

export interface IData6 {
    title?: string;
    overview?: string;
    homepage?: string;

    [key: string]: any;
}

export class Seasons3 implements ISeasons3 {
    air_date?: string;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    season_number?: number;
    show_id?: number;

    [key: string]: any;

    constructor(data?: ISeasons3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_count = 0;
            this.id = 0;
            this.season_number = 0;
            this.show_id = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_count = _data["episode_count"] !== undefined ? _data["episode_count"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.poster_path = _data["poster_path"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
        }
    }

    static fromJS(data: any): Seasons3 {
        data = typeof data === 'object' ? data : {};
        let result = new Seasons3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_count"] = this.episode_count;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["poster_path"] = this.poster_path;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        return data;
    }
}

export interface ISeasons3 {
    air_date?: string;
    episode_count?: number;
    id?: number;
    name?: string;
    overview?: string;
    poster_path?: string;
    season_number?: number;
    show_id?: number;

    [key: string]: any;
}

export class Display_priorities implements IDisplay_priorities {
    cA?: number;
    aE?: number;
    aR?: number;
    aT?: number;
    aU?: number;
    bE?: number;
    bO?: number;
    bR?: number;
    bG?: number;
    cH?: number;
    cL?: number;
    cO?: number;
    cR?: number;
    cZ?: number;
    dE?: number;
    dK?: number;
    eC?: number;
    eE?: number;
    eG?: number;
    eS?: number;
    fI?: number;
    fR?: number;
    gB?: number;
    gR?: number;
    gT?: number;
    hK?: number;
    hN?: number;
    hU?: number;
    iD?: number;
    iE?: number;
    iN?: number;
    iT?: number;
    jP?: number;
    lT?: number;
    lV?: number;
    mX?: number;
    mY?: number;
    nL?: number;
    nO?: number;
    nZ?: number;
    pE?: number;
    pH?: number;
    pL?: number;
    pT?: number;
    pY?: number;
    rU?: number;
    sA?: number;
    sE?: number;
    sG?: number;
    sK?: number;
    tH?: number;
    tR?: number;
    tW?: number;
    uS?: number;
    vE?: number;
    zA?: number;
    sI?: number;
    cV?: number;
    gH?: number;
    mU?: number;
    mZ?: number;
    uG?: number;
    iL?: number;

    [key: string]: any;

    constructor(data?: IDisplay_priorities) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.cA = 0;
            this.aE = 0;
            this.aR = 0;
            this.aT = 0;
            this.aU = 0;
            this.bE = 0;
            this.bO = 0;
            this.bR = 0;
            this.bG = 0;
            this.cH = 0;
            this.cL = 0;
            this.cO = 0;
            this.cR = 0;
            this.cZ = 0;
            this.dE = 0;
            this.dK = 0;
            this.eC = 0;
            this.eE = 0;
            this.eG = 0;
            this.eS = 0;
            this.fI = 0;
            this.fR = 0;
            this.gB = 0;
            this.gR = 0;
            this.gT = 0;
            this.hK = 0;
            this.hN = 0;
            this.hU = 0;
            this.iD = 0;
            this.iE = 0;
            this.iN = 0;
            this.iT = 0;
            this.jP = 0;
            this.lT = 0;
            this.lV = 0;
            this.mX = 0;
            this.mY = 0;
            this.nL = 0;
            this.nO = 0;
            this.nZ = 0;
            this.pE = 0;
            this.pH = 0;
            this.pL = 0;
            this.pT = 0;
            this.pY = 0;
            this.rU = 0;
            this.sA = 0;
            this.sE = 0;
            this.sG = 0;
            this.sK = 0;
            this.tH = 0;
            this.tR = 0;
            this.tW = 0;
            this.uS = 0;
            this.vE = 0;
            this.zA = 0;
            this.sI = 0;
            this.cV = 0;
            this.gH = 0;
            this.mU = 0;
            this.mZ = 0;
            this.uG = 0;
            this.iL = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.cA = _data["CA"] !== undefined ? _data["CA"] : 0;
            this.aE = _data["AE"] !== undefined ? _data["AE"] : 0;
            this.aR = _data["AR"] !== undefined ? _data["AR"] : 0;
            this.aT = _data["AT"] !== undefined ? _data["AT"] : 0;
            this.aU = _data["AU"] !== undefined ? _data["AU"] : 0;
            this.bE = _data["BE"] !== undefined ? _data["BE"] : 0;
            this.bO = _data["BO"] !== undefined ? _data["BO"] : 0;
            this.bR = _data["BR"] !== undefined ? _data["BR"] : 0;
            this.bG = _data["BG"] !== undefined ? _data["BG"] : 0;
            this.cH = _data["CH"] !== undefined ? _data["CH"] : 0;
            this.cL = _data["CL"] !== undefined ? _data["CL"] : 0;
            this.cO = _data["CO"] !== undefined ? _data["CO"] : 0;
            this.cR = _data["CR"] !== undefined ? _data["CR"] : 0;
            this.cZ = _data["CZ"] !== undefined ? _data["CZ"] : 0;
            this.dE = _data["DE"] !== undefined ? _data["DE"] : 0;
            this.dK = _data["DK"] !== undefined ? _data["DK"] : 0;
            this.eC = _data["EC"] !== undefined ? _data["EC"] : 0;
            this.eE = _data["EE"] !== undefined ? _data["EE"] : 0;
            this.eG = _data["EG"] !== undefined ? _data["EG"] : 0;
            this.eS = _data["ES"] !== undefined ? _data["ES"] : 0;
            this.fI = _data["FI"] !== undefined ? _data["FI"] : 0;
            this.fR = _data["FR"] !== undefined ? _data["FR"] : 0;
            this.gB = _data["GB"] !== undefined ? _data["GB"] : 0;
            this.gR = _data["GR"] !== undefined ? _data["GR"] : 0;
            this.gT = _data["GT"] !== undefined ? _data["GT"] : 0;
            this.hK = _data["HK"] !== undefined ? _data["HK"] : 0;
            this.hN = _data["HN"] !== undefined ? _data["HN"] : 0;
            this.hU = _data["HU"] !== undefined ? _data["HU"] : 0;
            this.iD = _data["ID"] !== undefined ? _data["ID"] : 0;
            this.iE = _data["IE"] !== undefined ? _data["IE"] : 0;
            this.iN = _data["IN"] !== undefined ? _data["IN"] : 0;
            this.iT = _data["IT"] !== undefined ? _data["IT"] : 0;
            this.jP = _data["JP"] !== undefined ? _data["JP"] : 0;
            this.lT = _data["LT"] !== undefined ? _data["LT"] : 0;
            this.lV = _data["LV"] !== undefined ? _data["LV"] : 0;
            this.mX = _data["MX"] !== undefined ? _data["MX"] : 0;
            this.mY = _data["MY"] !== undefined ? _data["MY"] : 0;
            this.nL = _data["NL"] !== undefined ? _data["NL"] : 0;
            this.nO = _data["NO"] !== undefined ? _data["NO"] : 0;
            this.nZ = _data["NZ"] !== undefined ? _data["NZ"] : 0;
            this.pE = _data["PE"] !== undefined ? _data["PE"] : 0;
            this.pH = _data["PH"] !== undefined ? _data["PH"] : 0;
            this.pL = _data["PL"] !== undefined ? _data["PL"] : 0;
            this.pT = _data["PT"] !== undefined ? _data["PT"] : 0;
            this.pY = _data["PY"] !== undefined ? _data["PY"] : 0;
            this.rU = _data["RU"] !== undefined ? _data["RU"] : 0;
            this.sA = _data["SA"] !== undefined ? _data["SA"] : 0;
            this.sE = _data["SE"] !== undefined ? _data["SE"] : 0;
            this.sG = _data["SG"] !== undefined ? _data["SG"] : 0;
            this.sK = _data["SK"] !== undefined ? _data["SK"] : 0;
            this.tH = _data["TH"] !== undefined ? _data["TH"] : 0;
            this.tR = _data["TR"] !== undefined ? _data["TR"] : 0;
            this.tW = _data["TW"] !== undefined ? _data["TW"] : 0;
            this.uS = _data["US"] !== undefined ? _data["US"] : 0;
            this.vE = _data["VE"] !== undefined ? _data["VE"] : 0;
            this.zA = _data["ZA"] !== undefined ? _data["ZA"] : 0;
            this.sI = _data["SI"] !== undefined ? _data["SI"] : 0;
            this.cV = _data["CV"] !== undefined ? _data["CV"] : 0;
            this.gH = _data["GH"] !== undefined ? _data["GH"] : 0;
            this.mU = _data["MU"] !== undefined ? _data["MU"] : 0;
            this.mZ = _data["MZ"] !== undefined ? _data["MZ"] : 0;
            this.uG = _data["UG"] !== undefined ? _data["UG"] : 0;
            this.iL = _data["IL"] !== undefined ? _data["IL"] : 0;
        }
    }

    static fromJS(data: any): Display_priorities {
        data = typeof data === 'object' ? data : {};
        let result = new Display_priorities();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["CA"] = this.cA;
        data["AE"] = this.aE;
        data["AR"] = this.aR;
        data["AT"] = this.aT;
        data["AU"] = this.aU;
        data["BE"] = this.bE;
        data["BO"] = this.bO;
        data["BR"] = this.bR;
        data["BG"] = this.bG;
        data["CH"] = this.cH;
        data["CL"] = this.cL;
        data["CO"] = this.cO;
        data["CR"] = this.cR;
        data["CZ"] = this.cZ;
        data["DE"] = this.dE;
        data["DK"] = this.dK;
        data["EC"] = this.eC;
        data["EE"] = this.eE;
        data["EG"] = this.eG;
        data["ES"] = this.eS;
        data["FI"] = this.fI;
        data["FR"] = this.fR;
        data["GB"] = this.gB;
        data["GR"] = this.gR;
        data["GT"] = this.gT;
        data["HK"] = this.hK;
        data["HN"] = this.hN;
        data["HU"] = this.hU;
        data["ID"] = this.iD;
        data["IE"] = this.iE;
        data["IN"] = this.iN;
        data["IT"] = this.iT;
        data["JP"] = this.jP;
        data["LT"] = this.lT;
        data["LV"] = this.lV;
        data["MX"] = this.mX;
        data["MY"] = this.mY;
        data["NL"] = this.nL;
        data["NO"] = this.nO;
        data["NZ"] = this.nZ;
        data["PE"] = this.pE;
        data["PH"] = this.pH;
        data["PL"] = this.pL;
        data["PT"] = this.pT;
        data["PY"] = this.pY;
        data["RU"] = this.rU;
        data["SA"] = this.sA;
        data["SE"] = this.sE;
        data["SG"] = this.sG;
        data["SK"] = this.sK;
        data["TH"] = this.tH;
        data["TR"] = this.tR;
        data["TW"] = this.tW;
        data["US"] = this.uS;
        data["VE"] = this.vE;
        data["ZA"] = this.zA;
        data["SI"] = this.sI;
        data["CV"] = this.cV;
        data["GH"] = this.gH;
        data["MU"] = this.mU;
        data["MZ"] = this.mZ;
        data["UG"] = this.uG;
        data["IL"] = this.iL;
        return data;
    }
}

export interface IDisplay_priorities {
    cA?: number;
    aE?: number;
    aR?: number;
    aT?: number;
    aU?: number;
    bE?: number;
    bO?: number;
    bR?: number;
    bG?: number;
    cH?: number;
    cL?: number;
    cO?: number;
    cR?: number;
    cZ?: number;
    dE?: number;
    dK?: number;
    eC?: number;
    eE?: number;
    eG?: number;
    eS?: number;
    fI?: number;
    fR?: number;
    gB?: number;
    gR?: number;
    gT?: number;
    hK?: number;
    hN?: number;
    hU?: number;
    iD?: number;
    iE?: number;
    iN?: number;
    iT?: number;
    jP?: number;
    lT?: number;
    lV?: number;
    mX?: number;
    mY?: number;
    nL?: number;
    nO?: number;
    nZ?: number;
    pE?: number;
    pH?: number;
    pL?: number;
    pT?: number;
    pY?: number;
    rU?: number;
    sA?: number;
    sE?: number;
    sG?: number;
    sK?: number;
    tH?: number;
    tR?: number;
    tW?: number;
    uS?: number;
    vE?: number;
    zA?: number;
    sI?: number;
    cV?: number;
    gH?: number;
    mU?: number;
    mZ?: number;
    uG?: number;
    iL?: number;

    [key: string]: any;
}

export class Display_priorities2 implements IDisplay_priorities2 {
    cA?: number;
    aE?: number;
    aR?: number;
    aT?: number;
    aU?: number;
    bE?: number;
    bO?: number;
    bR?: number;
    bG?: number;
    cH?: number;
    cL?: number;
    cO?: number;
    cR?: number;
    cZ?: number;
    dE?: number;
    dK?: number;
    eC?: number;
    eE?: number;
    eG?: number;
    eS?: number;
    fI?: number;
    fR?: number;
    gB?: number;
    gR?: number;
    gT?: number;
    hK?: number;
    hN?: number;
    hU?: number;
    iD?: number;
    iE?: number;
    iN?: number;
    iT?: number;
    jP?: number;
    lT?: number;
    lV?: number;
    mX?: number;
    mY?: number;
    nL?: number;
    nO?: number;
    nZ?: number;
    pE?: number;
    pH?: number;
    pL?: number;
    pT?: number;
    pY?: number;
    rU?: number;
    sA?: number;
    sE?: number;
    sG?: number;
    sK?: number;
    tH?: number;
    tR?: number;
    tW?: number;
    uS?: number;
    vE?: number;
    zA?: number;
    sI?: number;
    cV?: number;
    gH?: number;
    mU?: number;
    mZ?: number;
    uG?: number;
    iL?: number;

    [key: string]: any;

    constructor(data?: IDisplay_priorities2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.cA = 0;
            this.aE = 0;
            this.aR = 0;
            this.aT = 0;
            this.aU = 0;
            this.bE = 0;
            this.bO = 0;
            this.bR = 0;
            this.bG = 0;
            this.cH = 0;
            this.cL = 0;
            this.cO = 0;
            this.cR = 0;
            this.cZ = 0;
            this.dE = 0;
            this.dK = 0;
            this.eC = 0;
            this.eE = 0;
            this.eG = 0;
            this.eS = 0;
            this.fI = 0;
            this.fR = 0;
            this.gB = 0;
            this.gR = 0;
            this.gT = 0;
            this.hK = 0;
            this.hN = 0;
            this.hU = 0;
            this.iD = 0;
            this.iE = 0;
            this.iN = 0;
            this.iT = 0;
            this.jP = 0;
            this.lT = 0;
            this.lV = 0;
            this.mX = 0;
            this.mY = 0;
            this.nL = 0;
            this.nO = 0;
            this.nZ = 0;
            this.pE = 0;
            this.pH = 0;
            this.pL = 0;
            this.pT = 0;
            this.pY = 0;
            this.rU = 0;
            this.sA = 0;
            this.sE = 0;
            this.sG = 0;
            this.sK = 0;
            this.tH = 0;
            this.tR = 0;
            this.tW = 0;
            this.uS = 0;
            this.vE = 0;
            this.zA = 0;
            this.sI = 0;
            this.cV = 0;
            this.gH = 0;
            this.mU = 0;
            this.mZ = 0;
            this.uG = 0;
            this.iL = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.cA = _data["CA"] !== undefined ? _data["CA"] : 0;
            this.aE = _data["AE"] !== undefined ? _data["AE"] : 0;
            this.aR = _data["AR"] !== undefined ? _data["AR"] : 0;
            this.aT = _data["AT"] !== undefined ? _data["AT"] : 0;
            this.aU = _data["AU"] !== undefined ? _data["AU"] : 0;
            this.bE = _data["BE"] !== undefined ? _data["BE"] : 0;
            this.bO = _data["BO"] !== undefined ? _data["BO"] : 0;
            this.bR = _data["BR"] !== undefined ? _data["BR"] : 0;
            this.bG = _data["BG"] !== undefined ? _data["BG"] : 0;
            this.cH = _data["CH"] !== undefined ? _data["CH"] : 0;
            this.cL = _data["CL"] !== undefined ? _data["CL"] : 0;
            this.cO = _data["CO"] !== undefined ? _data["CO"] : 0;
            this.cR = _data["CR"] !== undefined ? _data["CR"] : 0;
            this.cZ = _data["CZ"] !== undefined ? _data["CZ"] : 0;
            this.dE = _data["DE"] !== undefined ? _data["DE"] : 0;
            this.dK = _data["DK"] !== undefined ? _data["DK"] : 0;
            this.eC = _data["EC"] !== undefined ? _data["EC"] : 0;
            this.eE = _data["EE"] !== undefined ? _data["EE"] : 0;
            this.eG = _data["EG"] !== undefined ? _data["EG"] : 0;
            this.eS = _data["ES"] !== undefined ? _data["ES"] : 0;
            this.fI = _data["FI"] !== undefined ? _data["FI"] : 0;
            this.fR = _data["FR"] !== undefined ? _data["FR"] : 0;
            this.gB = _data["GB"] !== undefined ? _data["GB"] : 0;
            this.gR = _data["GR"] !== undefined ? _data["GR"] : 0;
            this.gT = _data["GT"] !== undefined ? _data["GT"] : 0;
            this.hK = _data["HK"] !== undefined ? _data["HK"] : 0;
            this.hN = _data["HN"] !== undefined ? _data["HN"] : 0;
            this.hU = _data["HU"] !== undefined ? _data["HU"] : 0;
            this.iD = _data["ID"] !== undefined ? _data["ID"] : 0;
            this.iE = _data["IE"] !== undefined ? _data["IE"] : 0;
            this.iN = _data["IN"] !== undefined ? _data["IN"] : 0;
            this.iT = _data["IT"] !== undefined ? _data["IT"] : 0;
            this.jP = _data["JP"] !== undefined ? _data["JP"] : 0;
            this.lT = _data["LT"] !== undefined ? _data["LT"] : 0;
            this.lV = _data["LV"] !== undefined ? _data["LV"] : 0;
            this.mX = _data["MX"] !== undefined ? _data["MX"] : 0;
            this.mY = _data["MY"] !== undefined ? _data["MY"] : 0;
            this.nL = _data["NL"] !== undefined ? _data["NL"] : 0;
            this.nO = _data["NO"] !== undefined ? _data["NO"] : 0;
            this.nZ = _data["NZ"] !== undefined ? _data["NZ"] : 0;
            this.pE = _data["PE"] !== undefined ? _data["PE"] : 0;
            this.pH = _data["PH"] !== undefined ? _data["PH"] : 0;
            this.pL = _data["PL"] !== undefined ? _data["PL"] : 0;
            this.pT = _data["PT"] !== undefined ? _data["PT"] : 0;
            this.pY = _data["PY"] !== undefined ? _data["PY"] : 0;
            this.rU = _data["RU"] !== undefined ? _data["RU"] : 0;
            this.sA = _data["SA"] !== undefined ? _data["SA"] : 0;
            this.sE = _data["SE"] !== undefined ? _data["SE"] : 0;
            this.sG = _data["SG"] !== undefined ? _data["SG"] : 0;
            this.sK = _data["SK"] !== undefined ? _data["SK"] : 0;
            this.tH = _data["TH"] !== undefined ? _data["TH"] : 0;
            this.tR = _data["TR"] !== undefined ? _data["TR"] : 0;
            this.tW = _data["TW"] !== undefined ? _data["TW"] : 0;
            this.uS = _data["US"] !== undefined ? _data["US"] : 0;
            this.vE = _data["VE"] !== undefined ? _data["VE"] : 0;
            this.zA = _data["ZA"] !== undefined ? _data["ZA"] : 0;
            this.sI = _data["SI"] !== undefined ? _data["SI"] : 0;
            this.cV = _data["CV"] !== undefined ? _data["CV"] : 0;
            this.gH = _data["GH"] !== undefined ? _data["GH"] : 0;
            this.mU = _data["MU"] !== undefined ? _data["MU"] : 0;
            this.mZ = _data["MZ"] !== undefined ? _data["MZ"] : 0;
            this.uG = _data["UG"] !== undefined ? _data["UG"] : 0;
            this.iL = _data["IL"] !== undefined ? _data["IL"] : 0;
        }
    }

    static fromJS(data: any): Display_priorities2 {
        data = typeof data === 'object' ? data : {};
        let result = new Display_priorities2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["CA"] = this.cA;
        data["AE"] = this.aE;
        data["AR"] = this.aR;
        data["AT"] = this.aT;
        data["AU"] = this.aU;
        data["BE"] = this.bE;
        data["BO"] = this.bO;
        data["BR"] = this.bR;
        data["BG"] = this.bG;
        data["CH"] = this.cH;
        data["CL"] = this.cL;
        data["CO"] = this.cO;
        data["CR"] = this.cR;
        data["CZ"] = this.cZ;
        data["DE"] = this.dE;
        data["DK"] = this.dK;
        data["EC"] = this.eC;
        data["EE"] = this.eE;
        data["EG"] = this.eG;
        data["ES"] = this.eS;
        data["FI"] = this.fI;
        data["FR"] = this.fR;
        data["GB"] = this.gB;
        data["GR"] = this.gR;
        data["GT"] = this.gT;
        data["HK"] = this.hK;
        data["HN"] = this.hN;
        data["HU"] = this.hU;
        data["ID"] = this.iD;
        data["IE"] = this.iE;
        data["IN"] = this.iN;
        data["IT"] = this.iT;
        data["JP"] = this.jP;
        data["LT"] = this.lT;
        data["LV"] = this.lV;
        data["MX"] = this.mX;
        data["MY"] = this.mY;
        data["NL"] = this.nL;
        data["NO"] = this.nO;
        data["NZ"] = this.nZ;
        data["PE"] = this.pE;
        data["PH"] = this.pH;
        data["PL"] = this.pL;
        data["PT"] = this.pT;
        data["PY"] = this.pY;
        data["RU"] = this.rU;
        data["SA"] = this.sA;
        data["SE"] = this.sE;
        data["SG"] = this.sG;
        data["SK"] = this.sK;
        data["TH"] = this.tH;
        data["TR"] = this.tR;
        data["TW"] = this.tW;
        data["US"] = this.uS;
        data["VE"] = this.vE;
        data["ZA"] = this.zA;
        data["SI"] = this.sI;
        data["CV"] = this.cV;
        data["GH"] = this.gH;
        data["MU"] = this.mU;
        data["MZ"] = this.mZ;
        data["UG"] = this.uG;
        data["IL"] = this.iL;
        return data;
    }
}

export interface IDisplay_priorities2 {
    cA?: number;
    aE?: number;
    aR?: number;
    aT?: number;
    aU?: number;
    bE?: number;
    bO?: number;
    bR?: number;
    bG?: number;
    cH?: number;
    cL?: number;
    cO?: number;
    cR?: number;
    cZ?: number;
    dE?: number;
    dK?: number;
    eC?: number;
    eE?: number;
    eG?: number;
    eS?: number;
    fI?: number;
    fR?: number;
    gB?: number;
    gR?: number;
    gT?: number;
    hK?: number;
    hN?: number;
    hU?: number;
    iD?: number;
    iE?: number;
    iN?: number;
    iT?: number;
    jP?: number;
    lT?: number;
    lV?: number;
    mX?: number;
    mY?: number;
    nL?: number;
    nO?: number;
    nZ?: number;
    pE?: number;
    pH?: number;
    pL?: number;
    pT?: number;
    pY?: number;
    rU?: number;
    sA?: number;
    sE?: number;
    sG?: number;
    sK?: number;
    tH?: number;
    tR?: number;
    tW?: number;
    uS?: number;
    vE?: number;
    zA?: number;
    sI?: number;
    cV?: number;
    gH?: number;
    mU?: number;
    mZ?: number;
    uG?: number;
    iL?: number;

    [key: string]: any;
}

export class AE3 implements IAE3 {
    link?: string;
    flatrate?: Flatrate176[];

    [key: string]: any;

    constructor(data?: IAE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate176.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AE3 {
        data = typeof data === 'object' ? data : {};
        let result = new AE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAE3 {
    link?: string;
    flatrate?: Flatrate176[];

    [key: string]: any;
}

export class AR5 implements IAR5 {
    link?: string;
    flatrate?: Flatrate177[];

    [key: string]: any;

    constructor(data?: IAR5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate177.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AR5 {
        data = typeof data === 'object' ? data : {};
        let result = new AR5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAR5 {
    link?: string;
    flatrate?: Flatrate177[];

    [key: string]: any;
}

export class AT3 implements IAT3 {
    link?: string;
    flatrate?: Flatrate178[];
    buy?: Buy80[];

    [key: string]: any;

    constructor(data?: IAT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate178.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy80.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AT3 {
        data = typeof data === 'object' ? data : {};
        let result = new AT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAT3 {
    link?: string;
    flatrate?: Flatrate178[];
    buy?: Buy80[];

    [key: string]: any;
}

export class AU5 implements IAU5 {
    link?: string;
    buy?: Buy81[];
    flatrate?: Flatrate179[];

    [key: string]: any;

    constructor(data?: IAU5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy81.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate179.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AU5 {
        data = typeof data === 'object' ? data : {};
        let result = new AU5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IAU5 {
    link?: string;
    buy?: Buy81[];
    flatrate?: Flatrate179[];

    [key: string]: any;
}

export class BA3 implements IBA3 {
    link?: string;
    flatrate?: Flatrate180[];

    [key: string]: any;

    constructor(data?: IBA3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate180.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BA3 {
        data = typeof data === 'object' ? data : {};
        let result = new BA3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBA3 {
    link?: string;
    flatrate?: Flatrate180[];

    [key: string]: any;
}

export class BB3 implements IBB3 {
    link?: string;
    flatrate?: Flatrate181[];

    [key: string]: any;

    constructor(data?: IBB3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate181.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BB3 {
        data = typeof data === 'object' ? data : {};
        let result = new BB3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBB3 {
    link?: string;
    flatrate?: Flatrate181[];

    [key: string]: any;
}

export class BE3 implements IBE3 {
    link?: string;
    flatrate?: Flatrate182[];

    [key: string]: any;

    constructor(data?: IBE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate182.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BE3 {
        data = typeof data === 'object' ? data : {};
        let result = new BE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBE3 {
    link?: string;
    flatrate?: Flatrate182[];

    [key: string]: any;
}

export class BG5 implements IBG5 {
    link?: string;
    flatrate?: Flatrate183[];

    [key: string]: any;

    constructor(data?: IBG5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate183.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BG5 {
        data = typeof data === 'object' ? data : {};
        let result = new BG5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBG5 {
    link?: string;
    flatrate?: Flatrate183[];

    [key: string]: any;
}

export class BO3 implements IBO3 {
    link?: string;
    flatrate?: Flatrate184[];

    [key: string]: any;

    constructor(data?: IBO3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate184.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BO3 {
        data = typeof data === 'object' ? data : {};
        let result = new BO3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBO3 {
    link?: string;
    flatrate?: Flatrate184[];

    [key: string]: any;
}

export class BR5 implements IBR5 {
    link?: string;
    flatrate?: Flatrate185[];

    [key: string]: any;

    constructor(data?: IBR5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate185.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BR5 {
        data = typeof data === 'object' ? data : {};
        let result = new BR5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBR5 {
    link?: string;
    flatrate?: Flatrate185[];

    [key: string]: any;
}

export class BS3 implements IBS3 {
    link?: string;
    flatrate?: Flatrate186[];

    [key: string]: any;

    constructor(data?: IBS3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate186.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BS3 {
        data = typeof data === 'object' ? data : {};
        let result = new BS3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IBS3 {
    link?: string;
    flatrate?: Flatrate186[];

    [key: string]: any;
}

export class CA5 implements ICA5 {
    link?: string;
    buy?: Buy82[];
    flatrate?: Flatrate187[];

    [key: string]: any;

    constructor(data?: ICA5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy82.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate187.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CA5 {
        data = typeof data === 'object' ? data : {};
        let result = new CA5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICA5 {
    link?: string;
    buy?: Buy82[];
    flatrate?: Flatrate187[];

    [key: string]: any;
}

export class CH4 implements ICH4 {
    link?: string;
    buy?: Buy83[];
    flatrate?: Flatrate188[];

    [key: string]: any;

    constructor(data?: ICH4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy83.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate188.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CH4 {
        data = typeof data === 'object' ? data : {};
        let result = new CH4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICH4 {
    link?: string;
    buy?: Buy83[];
    flatrate?: Flatrate188[];

    [key: string]: any;
}

export class CI2 implements ICI2 {
    link?: string;
    flatrate?: Flatrate189[];

    [key: string]: any;

    constructor(data?: ICI2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate189.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CI2 {
        data = typeof data === 'object' ? data : {};
        let result = new CI2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICI2 {
    link?: string;
    flatrate?: Flatrate189[];

    [key: string]: any;
}

export class CL3 implements ICL3 {
    link?: string;
    flatrate?: Flatrate190[];

    [key: string]: any;

    constructor(data?: ICL3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate190.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CL3 {
        data = typeof data === 'object' ? data : {};
        let result = new CL3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICL3 {
    link?: string;
    flatrate?: Flatrate190[];

    [key: string]: any;
}

export class CO3 implements ICO3 {
    link?: string;
    flatrate?: Flatrate191[];

    [key: string]: any;

    constructor(data?: ICO3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate191.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CO3 {
        data = typeof data === 'object' ? data : {};
        let result = new CO3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICO3 {
    link?: string;
    flatrate?: Flatrate191[];

    [key: string]: any;
}

export class CR3 implements ICR3 {
    link?: string;
    flatrate?: Flatrate192[];

    [key: string]: any;

    constructor(data?: ICR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate192.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CR3 {
        data = typeof data === 'object' ? data : {};
        let result = new CR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICR3 {
    link?: string;
    flatrate?: Flatrate192[];

    [key: string]: any;
}

export class CZ3 implements ICZ3 {
    link?: string;
    flatrate?: Flatrate193[];

    [key: string]: any;

    constructor(data?: ICZ3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate193.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CZ3 {
        data = typeof data === 'object' ? data : {};
        let result = new CZ3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ICZ3 {
    link?: string;
    flatrate?: Flatrate193[];

    [key: string]: any;
}

export class DE5 implements IDE5 {
    link?: string;
    buy?: Buy84[];
    flatrate?: Flatrate194[];

    [key: string]: any;

    constructor(data?: IDE5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy84.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate194.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DE5 {
        data = typeof data === 'object' ? data : {};
        let result = new DE5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDE5 {
    link?: string;
    buy?: Buy84[];
    flatrate?: Flatrate194[];

    [key: string]: any;
}

export class DK5 implements IDK5 {
    link?: string;
    flatrate?: Flatrate195[];

    [key: string]: any;

    constructor(data?: IDK5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate195.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DK5 {
        data = typeof data === 'object' ? data : {};
        let result = new DK5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDK5 {
    link?: string;
    flatrate?: Flatrate195[];

    [key: string]: any;
}

export class DO3 implements IDO3 {
    link?: string;
    flatrate?: Flatrate196[];

    [key: string]: any;

    constructor(data?: IDO3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate196.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DO3 {
        data = typeof data === 'object' ? data : {};
        let result = new DO3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDO3 {
    link?: string;
    flatrate?: Flatrate196[];

    [key: string]: any;
}

export class DZ2 implements IDZ2 {
    link?: string;
    flatrate?: Flatrate197[];

    [key: string]: any;

    constructor(data?: IDZ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate197.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DZ2 {
        data = typeof data === 'object' ? data : {};
        let result = new DZ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDZ2 {
    link?: string;
    flatrate?: Flatrate197[];

    [key: string]: any;
}

export class EC3 implements IEC3 {
    link?: string;
    flatrate?: Flatrate198[];

    [key: string]: any;

    constructor(data?: IEC3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate198.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EC3 {
        data = typeof data === 'object' ? data : {};
        let result = new EC3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEC3 {
    link?: string;
    flatrate?: Flatrate198[];

    [key: string]: any;
}

export class EG3 implements IEG3 {
    link?: string;
    flatrate?: Flatrate199[];

    [key: string]: any;

    constructor(data?: IEG3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate199.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EG3 {
        data = typeof data === 'object' ? data : {};
        let result = new EG3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IEG3 {
    link?: string;
    flatrate?: Flatrate199[];

    [key: string]: any;
}

export class ES5 implements IES5 {
    link?: string;
    flatrate?: Flatrate200[];

    [key: string]: any;

    constructor(data?: IES5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate200.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ES5 {
        data = typeof data === 'object' ? data : {};
        let result = new ES5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IES5 {
    link?: string;
    flatrate?: Flatrate200[];

    [key: string]: any;
}

export class FI5 implements IFI5 {
    link?: string;
    flatrate?: Flatrate201[];
    buy?: Buy85[];

    [key: string]: any;

    constructor(data?: IFI5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate201.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy85.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FI5 {
        data = typeof data === 'object' ? data : {};
        let result = new FI5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFI5 {
    link?: string;
    flatrate?: Flatrate201[];
    buy?: Buy85[];

    [key: string]: any;
}

export class FR5 implements IFR5 {
    link?: string;
    flatrate?: Flatrate202[];
    buy?: Buy86[];

    [key: string]: any;

    constructor(data?: IFR5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate202.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy86.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FR5 {
        data = typeof data === 'object' ? data : {};
        let result = new FR5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IFR5 {
    link?: string;
    flatrate?: Flatrate202[];
    buy?: Buy86[];

    [key: string]: any;
}

export class GB5 implements IGB5 {
    link?: string;
    flatrate?: Flatrate203[];
    buy?: Buy87[];

    [key: string]: any;

    constructor(data?: IGB5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate203.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy87.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GB5 {
        data = typeof data === 'object' ? data : {};
        let result = new GB5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGB5 {
    link?: string;
    flatrate?: Flatrate203[];
    buy?: Buy87[];

    [key: string]: any;
}

export class GF3 implements IGF3 {
    link?: string;
    flatrate?: Flatrate204[];

    [key: string]: any;

    constructor(data?: IGF3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate204.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GF3 {
        data = typeof data === 'object' ? data : {};
        let result = new GF3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGF3 {
    link?: string;
    flatrate?: Flatrate204[];

    [key: string]: any;
}

export class GH2 implements IGH2 {
    link?: string;
    flatrate?: Flatrate205[];

    [key: string]: any;

    constructor(data?: IGH2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate205.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GH2 {
        data = typeof data === 'object' ? data : {};
        let result = new GH2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGH2 {
    link?: string;
    flatrate?: Flatrate205[];

    [key: string]: any;
}

export class GQ2 implements IGQ2 {
    link?: string;
    flatrate?: Flatrate206[];

    [key: string]: any;

    constructor(data?: IGQ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate206.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GQ2 {
        data = typeof data === 'object' ? data : {};
        let result = new GQ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGQ2 {
    link?: string;
    flatrate?: Flatrate206[];

    [key: string]: any;
}

export class GT3 implements IGT3 {
    link?: string;
    flatrate?: Flatrate207[];

    [key: string]: any;

    constructor(data?: IGT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate207.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GT3 {
        data = typeof data === 'object' ? data : {};
        let result = new GT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IGT3 {
    link?: string;
    flatrate?: Flatrate207[];

    [key: string]: any;
}

export class HK4 implements IHK4 {
    link?: string;
    flatrate?: Flatrate208[];

    [key: string]: any;

    constructor(data?: IHK4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate208.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HK4 {
        data = typeof data === 'object' ? data : {};
        let result = new HK4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHK4 {
    link?: string;
    flatrate?: Flatrate208[];

    [key: string]: any;
}

export class HN3 implements IHN3 {
    link?: string;
    flatrate?: Flatrate209[];

    [key: string]: any;

    constructor(data?: IHN3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate209.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HN3 {
        data = typeof data === 'object' ? data : {};
        let result = new HN3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHN3 {
    link?: string;
    flatrate?: Flatrate209[];

    [key: string]: any;
}

export class HR3 implements IHR3 {
    link?: string;
    flatrate?: Flatrate210[];

    [key: string]: any;

    constructor(data?: IHR3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate210.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HR3 {
        data = typeof data === 'object' ? data : {};
        let result = new HR3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHR3 {
    link?: string;
    flatrate?: Flatrate210[];

    [key: string]: any;
}

export class HU5 implements IHU5 {
    link?: string;
    flatrate?: Flatrate211[];

    [key: string]: any;

    constructor(data?: IHU5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate211.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HU5 {
        data = typeof data === 'object' ? data : {};
        let result = new HU5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IHU5 {
    link?: string;
    flatrate?: Flatrate211[];

    [key: string]: any;
}

export class ID5 implements IID5 {
    link?: string;
    flatrate?: Flatrate212[];

    [key: string]: any;

    constructor(data?: IID5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate212.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ID5 {
        data = typeof data === 'object' ? data : {};
        let result = new ID5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IID5 {
    link?: string;
    flatrate?: Flatrate212[];

    [key: string]: any;
}

export class IE4 implements IIE4 {
    link?: string;
    buy?: Buy88[];
    flatrate?: Flatrate213[];

    [key: string]: any;

    constructor(data?: IIE4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy88.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate213.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IE4 {
        data = typeof data === 'object' ? data : {};
        let result = new IE4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIE4 {
    link?: string;
    buy?: Buy88[];
    flatrate?: Flatrate213[];

    [key: string]: any;
}

export class IL5 implements IIL5 {
    link?: string;
    flatrate?: Flatrate214[];

    [key: string]: any;

    constructor(data?: IIL5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate214.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IL5 {
        data = typeof data === 'object' ? data : {};
        let result = new IL5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIL5 {
    link?: string;
    flatrate?: Flatrate214[];

    [key: string]: any;
}

export class IQ3 implements IIQ3 {
    link?: string;
    flatrate?: Flatrate215[];

    [key: string]: any;

    constructor(data?: IIQ3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate215.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IQ3 {
        data = typeof data === 'object' ? data : {};
        let result = new IQ3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIQ3 {
    link?: string;
    flatrate?: Flatrate215[];

    [key: string]: any;
}

export class IT5 implements IIT5 {
    link?: string;
    flatrate?: Flatrate216[];
    buy?: Buy89[];

    [key: string]: any;

    constructor(data?: IIT5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate216.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy89.fromJS(item));
            }
        }
    }

    static fromJS(data: any): IT5 {
        data = typeof data === 'object' ? data : {};
        let result = new IT5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IIT5 {
    link?: string;
    flatrate?: Flatrate216[];
    buy?: Buy89[];

    [key: string]: any;
}

export class JM3 implements IJM3 {
    link?: string;
    flatrate?: Flatrate217[];

    [key: string]: any;

    constructor(data?: IJM3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate217.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JM3 {
        data = typeof data === 'object' ? data : {};
        let result = new JM3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJM3 {
    link?: string;
    flatrate?: Flatrate217[];

    [key: string]: any;
}

export class JP4 implements IJP4 {
    link?: string;
    buy?: Buy90[];
    flatrate?: Flatrate218[];
    rent?: Rent48[];

    [key: string]: any;

    constructor(data?: IJP4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy90.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate218.fromJS(item));
            }
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent48.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JP4 {
        data = typeof data === 'object' ? data : {};
        let result = new JP4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IJP4 {
    link?: string;
    buy?: Buy90[];
    flatrate?: Flatrate218[];
    rent?: Rent48[];

    [key: string]: any;
}

export class KE2 implements IKE2 {
    link?: string;
    flatrate?: Flatrate219[];

    [key: string]: any;

    constructor(data?: IKE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate219.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KE2 {
        data = typeof data === 'object' ? data : {};
        let result = new KE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKE2 {
    link?: string;
    flatrate?: Flatrate219[];

    [key: string]: any;
}

export class KR5 implements IKR5 {
    link?: string;
    flatrate?: Flatrate220[];

    [key: string]: any;

    constructor(data?: IKR5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate220.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KR5 {
        data = typeof data === 'object' ? data : {};
        let result = new KR5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IKR5 {
    link?: string;
    flatrate?: Flatrate220[];

    [key: string]: any;
}

export class LB3 implements ILB3 {
    link?: string;
    flatrate?: Flatrate221[];

    [key: string]: any;

    constructor(data?: ILB3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate221.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LB3 {
        data = typeof data === 'object' ? data : {};
        let result = new LB3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILB3 {
    link?: string;
    flatrate?: Flatrate221[];

    [key: string]: any;
}

export class LY2 implements ILY2 {
    link?: string;
    flatrate?: Flatrate222[];

    [key: string]: any;

    constructor(data?: ILY2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate222.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LY2 {
        data = typeof data === 'object' ? data : {};
        let result = new LY2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ILY2 {
    link?: string;
    flatrate?: Flatrate222[];

    [key: string]: any;
}

export class MD3 implements IMD3 {
    link?: string;
    flatrate?: Flatrate223[];

    [key: string]: any;

    constructor(data?: IMD3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate223.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MD3 {
        data = typeof data === 'object' ? data : {};
        let result = new MD3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMD3 {
    link?: string;
    flatrate?: Flatrate223[];

    [key: string]: any;
}

export class MK3 implements IMK3 {
    link?: string;
    flatrate?: Flatrate224[];

    [key: string]: any;

    constructor(data?: IMK3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate224.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MK3 {
        data = typeof data === 'object' ? data : {};
        let result = new MK3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMK3 {
    link?: string;
    flatrate?: Flatrate224[];

    [key: string]: any;
}

export class MU3 implements IMU3 {
    link?: string;
    flatrate?: Flatrate225[];

    [key: string]: any;

    constructor(data?: IMU3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate225.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MU3 {
        data = typeof data === 'object' ? data : {};
        let result = new MU3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMU3 {
    link?: string;
    flatrate?: Flatrate225[];

    [key: string]: any;
}

export class MX5 implements IMX5 {
    link?: string;
    flatrate?: Flatrate226[];

    [key: string]: any;

    constructor(data?: IMX5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate226.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MX5 {
        data = typeof data === 'object' ? data : {};
        let result = new MX5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMX5 {
    link?: string;
    flatrate?: Flatrate226[];

    [key: string]: any;
}

export class MY5 implements IMY5 {
    link?: string;
    flatrate?: Flatrate227[];

    [key: string]: any;

    constructor(data?: IMY5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate227.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MY5 {
        data = typeof data === 'object' ? data : {};
        let result = new MY5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMY5 {
    link?: string;
    flatrate?: Flatrate227[];

    [key: string]: any;
}

export class MZ3 implements IMZ3 {
    link?: string;
    flatrate?: Flatrate228[];

    [key: string]: any;

    constructor(data?: IMZ3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate228.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MZ3 {
        data = typeof data === 'object' ? data : {};
        let result = new MZ3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IMZ3 {
    link?: string;
    flatrate?: Flatrate228[];

    [key: string]: any;
}

export class NE2 implements INE2 {
    link?: string;
    flatrate?: Flatrate229[];

    [key: string]: any;

    constructor(data?: INE2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate229.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NE2 {
        data = typeof data === 'object' ? data : {};
        let result = new NE2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INE2 {
    link?: string;
    flatrate?: Flatrate229[];

    [key: string]: any;
}

export class NG2 implements ING2 {
    link?: string;
    flatrate?: Flatrate230[];

    [key: string]: any;

    constructor(data?: ING2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate230.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NG2 {
        data = typeof data === 'object' ? data : {};
        let result = new NG2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ING2 {
    link?: string;
    flatrate?: Flatrate230[];

    [key: string]: any;
}

export class NL5 implements INL5 {
    link?: string;
    buy?: Buy91[];
    flatrate?: Flatrate231[];

    [key: string]: any;

    constructor(data?: INL5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy91.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate231.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NL5 {
        data = typeof data === 'object' ? data : {};
        let result = new NL5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INL5 {
    link?: string;
    buy?: Buy91[];
    flatrate?: Flatrate231[];

    [key: string]: any;
}

export class NO5 implements INO5 {
    link?: string;
    buy?: Buy92[];
    flatrate?: Flatrate232[];

    [key: string]: any;

    constructor(data?: INO5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy92.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate232.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NO5 {
        data = typeof data === 'object' ? data : {};
        let result = new NO5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INO5 {
    link?: string;
    buy?: Buy92[];
    flatrate?: Flatrate232[];

    [key: string]: any;
}

export class NZ5 implements INZ5 {
    link?: string;
    flatrate?: Flatrate233[];

    [key: string]: any;

    constructor(data?: INZ5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate233.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NZ5 {
        data = typeof data === 'object' ? data : {};
        let result = new NZ5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface INZ5 {
    link?: string;
    flatrate?: Flatrate233[];

    [key: string]: any;
}

export class PA3 implements IPA3 {
    link?: string;
    flatrate?: Flatrate234[];

    [key: string]: any;

    constructor(data?: IPA3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate234.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PA3 {
        data = typeof data === 'object' ? data : {};
        let result = new PA3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPA3 {
    link?: string;
    flatrate?: Flatrate234[];

    [key: string]: any;
}

export class PE3 implements IPE3 {
    link?: string;
    flatrate?: Flatrate235[];

    [key: string]: any;

    constructor(data?: IPE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate235.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PE3 {
        data = typeof data === 'object' ? data : {};
        let result = new PE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPE3 {
    link?: string;
    flatrate?: Flatrate235[];

    [key: string]: any;
}

export class PH5 implements IPH5 {
    link?: string;
    flatrate?: Flatrate236[];

    [key: string]: any;

    constructor(data?: IPH5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate236.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PH5 {
        data = typeof data === 'object' ? data : {};
        let result = new PH5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPH5 {
    link?: string;
    flatrate?: Flatrate236[];

    [key: string]: any;
}

export class PL4 implements IPL4 {
    link?: string;
    rent?: Rent49[];
    flatrate?: Flatrate237[];

    [key: string]: any;

    constructor(data?: IPL4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["rent"])) {
                this.rent = [] as any;
                for (let item of _data["rent"])
                    this.rent!.push(Rent49.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate237.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PL4 {
        data = typeof data === 'object' ? data : {};
        let result = new PL4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.rent)) {
            data["rent"] = [];
            for (let item of this.rent)
                data["rent"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPL4 {
    link?: string;
    rent?: Rent49[];
    flatrate?: Flatrate237[];

    [key: string]: any;
}

export class PS3 implements IPS3 {
    link?: string;
    flatrate?: Flatrate238[];

    [key: string]: any;

    constructor(data?: IPS3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate238.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PS3 {
        data = typeof data === 'object' ? data : {};
        let result = new PS3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPS3 {
    link?: string;
    flatrate?: Flatrate238[];

    [key: string]: any;
}

export class PT5 implements IPT5 {
    link?: string;
    flatrate?: Flatrate239[];

    [key: string]: any;

    constructor(data?: IPT5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate239.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PT5 {
        data = typeof data === 'object' ? data : {};
        let result = new PT5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPT5 {
    link?: string;
    flatrate?: Flatrate239[];

    [key: string]: any;
}

export class PY3 implements IPY3 {
    link?: string;
    flatrate?: Flatrate240[];

    [key: string]: any;

    constructor(data?: IPY3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate240.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PY3 {
        data = typeof data === 'object' ? data : {};
        let result = new PY3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IPY3 {
    link?: string;
    flatrate?: Flatrate240[];

    [key: string]: any;
}

export class RO3 implements IRO3 {
    link?: string;
    flatrate?: Flatrate241[];

    [key: string]: any;

    constructor(data?: IRO3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate241.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RO3 {
        data = typeof data === 'object' ? data : {};
        let result = new RO3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRO3 {
    link?: string;
    flatrate?: Flatrate241[];

    [key: string]: any;
}

export class RS3 implements IRS3 {
    link?: string;
    flatrate?: Flatrate242[];

    [key: string]: any;

    constructor(data?: IRS3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate242.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RS3 {
        data = typeof data === 'object' ? data : {};
        let result = new RS3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRS3 {
    link?: string;
    flatrate?: Flatrate242[];

    [key: string]: any;
}

export class RU5 implements IRU5 {
    link?: string;
    flatrate?: Flatrate243[];

    [key: string]: any;

    constructor(data?: IRU5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate243.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RU5 {
        data = typeof data === 'object' ? data : {};
        let result = new RU5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IRU5 {
    link?: string;
    flatrate?: Flatrate243[];

    [key: string]: any;
}

export class SA3 implements ISA3 {
    link?: string;
    flatrate?: Flatrate244[];

    [key: string]: any;

    constructor(data?: ISA3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate244.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SA3 {
        data = typeof data === 'object' ? data : {};
        let result = new SA3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISA3 {
    link?: string;
    flatrate?: Flatrate244[];

    [key: string]: any;
}

export class SC2 implements ISC2 {
    link?: string;
    flatrate?: Flatrate245[];

    [key: string]: any;

    constructor(data?: ISC2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate245.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SC2 {
        data = typeof data === 'object' ? data : {};
        let result = new SC2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISC2 {
    link?: string;
    flatrate?: Flatrate245[];

    [key: string]: any;
}

export class SE5 implements ISE5 {
    link?: string;
    flatrate?: Flatrate246[];
    buy?: Buy93[];

    [key: string]: any;

    constructor(data?: ISE5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate246.fromJS(item));
            }
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy93.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SE5 {
        data = typeof data === 'object' ? data : {};
        let result = new SE5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISE5 {
    link?: string;
    flatrate?: Flatrate246[];
    buy?: Buy93[];

    [key: string]: any;
}

export class SG5 implements ISG5 {
    link?: string;
    flatrate?: Flatrate247[];

    [key: string]: any;

    constructor(data?: ISG5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate247.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SG5 {
        data = typeof data === 'object' ? data : {};
        let result = new SG5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISG5 {
    link?: string;
    flatrate?: Flatrate247[];

    [key: string]: any;
}

export class SI3 implements ISI3 {
    link?: string;
    flatrate?: Flatrate248[];

    [key: string]: any;

    constructor(data?: ISI3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate248.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SI3 {
        data = typeof data === 'object' ? data : {};
        let result = new SI3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISI3 {
    link?: string;
    flatrate?: Flatrate248[];

    [key: string]: any;
}

export class SK5 implements ISK5 {
    link?: string;
    flatrate?: Flatrate249[];

    [key: string]: any;

    constructor(data?: ISK5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate249.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SK5 {
        data = typeof data === 'object' ? data : {};
        let result = new SK5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISK5 {
    link?: string;
    flatrate?: Flatrate249[];

    [key: string]: any;
}

export class SN2 implements ISN2 {
    link?: string;
    flatrate?: Flatrate250[];

    [key: string]: any;

    constructor(data?: ISN2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate250.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SN2 {
        data = typeof data === 'object' ? data : {};
        let result = new SN2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISN2 {
    link?: string;
    flatrate?: Flatrate250[];

    [key: string]: any;
}

export class SV3 implements ISV3 {
    link?: string;
    flatrate?: Flatrate251[];

    [key: string]: any;

    constructor(data?: ISV3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate251.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SV3 {
        data = typeof data === 'object' ? data : {};
        let result = new SV3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ISV3 {
    link?: string;
    flatrate?: Flatrate251[];

    [key: string]: any;
}

export class TH5 implements ITH5 {
    link?: string;
    flatrate?: Flatrate252[];

    [key: string]: any;

    constructor(data?: ITH5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate252.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TH5 {
        data = typeof data === 'object' ? data : {};
        let result = new TH5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITH5 {
    link?: string;
    flatrate?: Flatrate252[];

    [key: string]: any;
}

export class TR5 implements ITR5 {
    link?: string;
    flatrate?: Flatrate253[];

    [key: string]: any;

    constructor(data?: ITR5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate253.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TR5 {
        data = typeof data === 'object' ? data : {};
        let result = new TR5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITR5 {
    link?: string;
    flatrate?: Flatrate253[];

    [key: string]: any;
}

export class TT3 implements ITT3 {
    link?: string;
    flatrate?: Flatrate254[];

    [key: string]: any;

    constructor(data?: ITT3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate254.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TT3 {
        data = typeof data === 'object' ? data : {};
        let result = new TT3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITT3 {
    link?: string;
    flatrate?: Flatrate254[];

    [key: string]: any;
}

export class TW5 implements ITW5 {
    link?: string;
    flatrate?: Flatrate255[];

    [key: string]: any;

    constructor(data?: ITW5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate255.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TW5 {
        data = typeof data === 'object' ? data : {};
        let result = new TW5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITW5 {
    link?: string;
    flatrate?: Flatrate255[];

    [key: string]: any;
}

export class TZ2 implements ITZ2 {
    link?: string;
    flatrate?: Flatrate256[];

    [key: string]: any;

    constructor(data?: ITZ2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate256.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TZ2 {
        data = typeof data === 'object' ? data : {};
        let result = new TZ2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface ITZ2 {
    link?: string;
    flatrate?: Flatrate256[];

    [key: string]: any;
}

export class UG3 implements IUG3 {
    link?: string;
    flatrate?: Flatrate257[];

    [key: string]: any;

    constructor(data?: IUG3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate257.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UG3 {
        data = typeof data === 'object' ? data : {};
        let result = new UG3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUG3 {
    link?: string;
    flatrate?: Flatrate257[];

    [key: string]: any;
}

export class US5 implements IUS5 {
    link?: string;
    buy?: Buy94[];
    free?: Free2[];
    flatrate?: Flatrate258[];

    [key: string]: any;

    constructor(data?: IUS5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["buy"])) {
                this.buy = [] as any;
                for (let item of _data["buy"])
                    this.buy!.push(Buy94.fromJS(item));
            }
            if (Array.isArray(_data["free"])) {
                this.free = [] as any;
                for (let item of _data["free"])
                    this.free!.push(Free2.fromJS(item));
            }
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate258.fromJS(item));
            }
        }
    }

    static fromJS(data: any): US5 {
        data = typeof data === 'object' ? data : {};
        let result = new US5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.buy)) {
            data["buy"] = [];
            for (let item of this.buy)
                data["buy"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.free)) {
            data["free"] = [];
            for (let item of this.free)
                data["free"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUS5 {
    link?: string;
    buy?: Buy94[];
    free?: Free2[];
    flatrate?: Flatrate258[];

    [key: string]: any;
}

export class UY3 implements IUY3 {
    link?: string;
    flatrate?: Flatrate259[];

    [key: string]: any;

    constructor(data?: IUY3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate259.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UY3 {
        data = typeof data === 'object' ? data : {};
        let result = new UY3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IUY3 {
    link?: string;
    flatrate?: Flatrate259[];

    [key: string]: any;
}

export class VE3 implements IVE3 {
    link?: string;
    flatrate?: Flatrate260[];

    [key: string]: any;

    constructor(data?: IVE3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate260.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VE3 {
        data = typeof data === 'object' ? data : {};
        let result = new VE3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IVE3 {
    link?: string;
    flatrate?: Flatrate260[];

    [key: string]: any;
}

export class ZA5 implements IZA5 {
    link?: string;
    flatrate?: Flatrate261[];

    [key: string]: any;

    constructor(data?: IZA5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate261.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ZA5 {
        data = typeof data === 'object' ? data : {};
        let result = new ZA5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IZA5 {
    link?: string;
    flatrate?: Flatrate261[];

    [key: string]: any;
}

export class ZM2 implements IZM2 {
    link?: string;
    flatrate?: Flatrate262[];

    [key: string]: any;

    constructor(data?: IZM2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.link = _data["link"];
            if (Array.isArray(_data["flatrate"])) {
                this.flatrate = [] as any;
                for (let item of _data["flatrate"])
                    this.flatrate!.push(Flatrate262.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ZM2 {
        data = typeof data === 'object' ? data : {};
        let result = new ZM2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["link"] = this.link;
        if (Array.isArray(this.flatrate)) {
            data["flatrate"] = [];
            for (let item of this.flatrate)
                data["flatrate"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IZM2 {
    link?: string;
    flatrate?: Flatrate262[];

    [key: string]: any;
}

export class Items6 implements IItems6 {
    id?: string;
    action?: string;
    time?: string;
    value?: string;

    [key: string]: any;

    constructor(data?: IItems6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.action = _data["action"];
            this.time = _data["time"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Items6 {
        data = typeof data === 'object' ? data : {};
        let result = new Items6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["action"] = this.action;
        data["time"] = this.time;
        data["value"] = this.value;
        return data;
    }
}

export interface IItems6 {
    id?: string;
    action?: string;
    time?: string;
    value?: string;

    [key: string]: any;
}

export class Episodes2 implements IEpisodes2 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: any;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    order?: number;

    [key: string]: any;

    constructor(data?: IEpisodes2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_number = 0;
            this.id = 0;
            this.season_number = 0;
            this.show_id = 0;
            this.vote_average = 0;
            this.vote_count = 0;
            this.order = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.air_date = _data["air_date"];
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
            this.id = _data["id"] !== undefined ? _data["id"] : 0;
            this.name = _data["name"];
            this.overview = _data["overview"];
            this.production_code = _data["production_code"];
            this.runtime = _data["runtime"];
            this.season_number = _data["season_number"] !== undefined ? _data["season_number"] : 0;
            this.show_id = _data["show_id"] !== undefined ? _data["show_id"] : 0;
            this.still_path = _data["still_path"];
            this.vote_average = _data["vote_average"] !== undefined ? _data["vote_average"] : 0;
            this.vote_count = _data["vote_count"] !== undefined ? _data["vote_count"] : 0;
            this.order = _data["order"] !== undefined ? _data["order"] : 0;
        }
    }

    static fromJS(data: any): Episodes2 {
        data = typeof data === 'object' ? data : {};
        let result = new Episodes2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["air_date"] = this.air_date;
        data["episode_number"] = this.episode_number;
        data["id"] = this.id;
        data["name"] = this.name;
        data["overview"] = this.overview;
        data["production_code"] = this.production_code;
        data["runtime"] = this.runtime;
        data["season_number"] = this.season_number;
        data["show_id"] = this.show_id;
        data["still_path"] = this.still_path;
        data["vote_average"] = this.vote_average;
        data["vote_count"] = this.vote_count;
        data["order"] = this.order;
        return data;
    }
}

export interface IEpisodes2 {
    air_date?: string;
    episode_number?: number;
    id?: number;
    name?: string;
    overview?: string;
    production_code?: string;
    runtime?: any;
    season_number?: number;
    show_id?: number;
    still_path?: string;
    vote_average?: number;
    vote_count?: number;
    order?: number;

    [key: string]: any;
}

export class Value implements IValue {
    poster?: Poster;

    [key: string]: any;

    constructor(data?: IValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.poster = _data["poster"] ? Poster.fromJS(_data["poster"]) : undefined as any;
        }
    }

    static fromJS(data: any): Value {
        data = typeof data === 'object' ? data : {};
        let result = new Value();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["poster"] = this.poster ? this.poster.toJSON() : undefined as any;
        return data;
    }
}

export interface IValue {
    poster?: Poster;

    [key: string]: any;
}

export class Flatrate implements IFlatrate {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent implements IRent {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent {
        data = typeof data === 'object' ? data : {};
        let result = new Rent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy implements IBuy {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy {
        data = typeof data === 'object' ? data : {};
        let result = new Buy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy2 implements IBuy2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy2 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy3 implements IBuy3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy3 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate2 implements IFlatrate2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate2 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent2 implements IRent2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent2 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate3 implements IFlatrate3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate3 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy4 implements IBuy4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy4 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent3 implements IRent3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent3 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate4 implements IFlatrate4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate4 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy5 implements IBuy5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy5 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy6 implements IBuy6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy6 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate5 implements IFlatrate5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate5 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate6 implements IFlatrate6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate6 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent4 implements IRent4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent4 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent4 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate7 implements IFlatrate7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate7 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy7 implements IBuy7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy7 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent5 implements IRent5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent5 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent5 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy8 implements IBuy8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy8 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate8 implements IFlatrate8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate8 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy9 implements IBuy9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy9 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate9 implements IFlatrate9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate9 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate10 implements IFlatrate10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate10 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate11 implements IFlatrate11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate11 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent6 implements IRent6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent6 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent6 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy10 implements IBuy10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy10 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate12 implements IFlatrate12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate12 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate13 implements IFlatrate13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate13 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy11 implements IBuy11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy11 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent7 implements IRent7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent7 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent7 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy12 implements IBuy12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy12 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate14 implements IFlatrate14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate14 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent8 implements IRent8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent8 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent8 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy13 implements IBuy13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy13 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate15 implements IFlatrate15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate15 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent9 implements IRent9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent9 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent9 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate16 implements IFlatrate16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate16 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy14 implements IBuy14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy14 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent10 implements IRent10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent10 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent10 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate17 implements IFlatrate17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate17 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent11 implements IRent11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent11 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent11 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy15 implements IBuy15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy15 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate18 implements IFlatrate18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate18 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy16 implements IBuy16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy16 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent12 implements IRent12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent12 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent12 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent13 implements IRent13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent13 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent13 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate19 implements IFlatrate19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate19 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy17 implements IBuy17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy17 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate20 implements IFlatrate20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate20 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy18 implements IBuy18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy18 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate21 implements IFlatrate21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate21 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent14 implements IRent14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent14 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent14 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy19 implements IBuy19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy19 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate22 implements IFlatrate22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate22 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent15 implements IRent15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent15 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent15 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent16 implements IRent16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent16 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent16 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy20 implements IBuy20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy20 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent17 implements IRent17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent17 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent17 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Ads implements IAds {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IAds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Ads {
        data = typeof data === 'object' ? data : {};
        let result = new Ads();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IAds {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate23 implements IFlatrate23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate23 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy21 implements IBuy21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy21 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate24 implements IFlatrate24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate24 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy22 implements IBuy22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy22 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent18 implements IRent18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent18 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent18 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy23 implements IBuy23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy23 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent19 implements IRent19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent19 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent19 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy24 implements IBuy24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy24 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate25 implements IFlatrate25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate25 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate26 implements IFlatrate26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate26 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy25 implements IBuy25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy25 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent20 implements IRent20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent20) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent20 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent20();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent20 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate27 implements IFlatrate27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate27 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate28 implements IFlatrate28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate28 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate29 implements IFlatrate29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate29 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent21 implements IRent21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent21) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent21 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent21();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent21 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy26 implements IBuy26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy26 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate30 implements IFlatrate30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate30 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate31 implements IFlatrate31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate31 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate32 implements IFlatrate32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate32 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy27 implements IBuy27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy27 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Ads2 implements IAds2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IAds2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Ads2 {
        data = typeof data === 'object' ? data : {};
        let result = new Ads2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IAds2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate33 implements IFlatrate33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate33 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate34 implements IFlatrate34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate34 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy28 implements IBuy28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy28 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent22 implements IRent22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent22) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent22 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent22();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent22 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate35 implements IFlatrate35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate35 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent23 implements IRent23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent23) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent23 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent23();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent23 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate36 implements IFlatrate36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate36 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy29 implements IBuy29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy29 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy30 implements IBuy30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy30 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate37 implements IFlatrate37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate37 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate38 implements IFlatrate38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate38 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent24 implements IRent24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent24) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent24 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent24();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent24 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy31 implements IBuy31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy31 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate39 implements IFlatrate39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate39 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy32 implements IBuy32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy32 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate40 implements IFlatrate40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate40 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy33 implements IBuy33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy33 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent25 implements IRent25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent25) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent25 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent25();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent25 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate41 implements IFlatrate41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate41 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate42 implements IFlatrate42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate42 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate43 implements IFlatrate43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate43 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy34 implements IBuy34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy34 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate44 implements IFlatrate44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate44 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent26 implements IRent26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent26) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent26 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent26();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent26 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy35 implements IBuy35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy35 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate45 implements IFlatrate45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate45 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy36 implements IBuy36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy36 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy37 implements IBuy37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy37 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate46 implements IFlatrate46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate46 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate47 implements IFlatrate47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate47 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy38 implements IBuy38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy38 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate48 implements IFlatrate48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate48 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent27 implements IRent27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent27) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent27 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent27();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent27 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy39 implements IBuy39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy39 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate49 implements IFlatrate49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate49 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate50 implements IFlatrate50 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate50 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate50 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy40 implements IBuy40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy40 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy41 implements IBuy41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy41 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate51 implements IFlatrate51 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate51 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate51 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate52 implements IFlatrate52 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate52 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate52 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy42 implements IBuy42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy42 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate53 implements IFlatrate53 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate53 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate53 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy43 implements IBuy43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy43 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent28 implements IRent28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent28) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent28 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent28();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent28 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy44 implements IBuy44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy44 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent29 implements IRent29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent29) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent29 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent29();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent29 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate54 implements IFlatrate54 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate54 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate54 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate55 implements IFlatrate55 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate55 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate55 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent30 implements IRent30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent30) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent30 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent30();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent30 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy45 implements IBuy45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy45 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy46 implements IBuy46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy46 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent31 implements IRent31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent31) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent31 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent31();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent31 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate56 implements IFlatrate56 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate56 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate56 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent32 implements IRent32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent32 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent32 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy47 implements IBuy47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy47 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate57 implements IFlatrate57 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate57 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate57 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate58 implements IFlatrate58 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate58 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate58 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy48 implements IBuy48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy48 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy49 implements IBuy49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy49 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent33 implements IRent33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent33) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent33 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent33();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent33 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate59 implements IFlatrate59 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate59 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate59 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate60 implements IFlatrate60 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate60 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate60 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent34 implements IRent34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent34) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent34 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent34();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent34 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy50 implements IBuy50 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy50) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy50 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy50();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy50 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate61 implements IFlatrate61 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate61 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate61 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate62 implements IFlatrate62 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate62 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate62 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate63 implements IFlatrate63 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate63 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate63 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy51 implements IBuy51 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy51) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy51 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy51();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy51 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate64 implements IFlatrate64 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate64 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate64 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent35 implements IRent35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent35) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent35 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent35();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent35 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate65 implements IFlatrate65 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate65) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate65 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate65();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate65 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy52 implements IBuy52 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy52) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy52 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy52();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy52 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent36 implements IRent36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent36) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent36 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent36();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent36 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate66 implements IFlatrate66 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate66) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate66 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate66();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate66 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate67 implements IFlatrate67 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate67) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate67 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate67();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate67 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate68 implements IFlatrate68 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate68) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate68 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate68();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate68 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy53 implements IBuy53 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy53) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy53 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy53();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy53 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate69 implements IFlatrate69 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate69) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate69 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate69();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate69 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate70 implements IFlatrate70 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate70) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate70 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate70();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate70 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy54 implements IBuy54 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy54) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy54 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy54();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy54 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent37 implements IRent37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent37) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent37 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent37();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent37 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy55 implements IBuy55 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy55) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy55 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy55();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy55 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate71 implements IFlatrate71 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate71) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate71 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate71();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate71 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate72 implements IFlatrate72 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate72) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate72 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate72();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate72 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent38 implements IRent38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent38) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent38 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent38();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent38 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy56 implements IBuy56 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy56) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy56 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy56();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy56 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy57 implements IBuy57 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy57) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy57 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy57();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy57 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent39 implements IRent39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent39) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent39 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent39();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent39 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate73 implements IFlatrate73 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate73) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate73 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate73();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate73 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate74 implements IFlatrate74 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate74) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate74 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate74();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate74 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy58 implements IBuy58 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy58) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy58 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy58();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy58 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate75 implements IFlatrate75 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate75) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate75 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate75();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate75 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy59 implements IBuy59 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy59) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy59 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy59();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy59 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate76 implements IFlatrate76 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate76) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate76 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate76();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate76 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent40 implements IRent40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent40) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent40 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent40();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent40 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate77 implements IFlatrate77 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate77) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate77 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate77();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate77 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate78 implements IFlatrate78 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate78) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate78 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate78();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate78 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate79 implements IFlatrate79 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate79) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate79 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate79();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate79 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent41 implements IRent41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent41) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent41 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent41();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent41 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate80 implements IFlatrate80 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate80) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate80 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate80();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate80 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy60 implements IBuy60 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy60) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy60 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy60();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy60 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate81 implements IFlatrate81 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate81) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate81 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate81();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate81 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate82 implements IFlatrate82 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate82) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate82 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate82();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate82 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent42 implements IRent42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent42) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent42 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent42();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent42 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy61 implements IBuy61 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy61) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy61 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy61();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy61 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent43 implements IRent43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent43) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent43 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent43();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent43 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate83 implements IFlatrate83 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate83) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate83 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate83();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate83 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy62 implements IBuy62 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy62) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy62 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy62();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy62 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate84 implements IFlatrate84 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate84) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate84 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate84();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate84 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent44 implements IRent44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent44) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent44 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent44();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent44 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate85 implements IFlatrate85 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate85) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate85 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate85();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate85 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy63 implements IBuy63 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy63) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy63 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy63();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy63 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate86 implements IFlatrate86 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate86) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate86 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate86();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate86 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate87 implements IFlatrate87 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate87) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate87 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate87();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate87 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent45 implements IRent45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent45) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent45 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent45();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent45 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy64 implements IBuy64 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy64) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy64 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy64();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy64 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Value2 implements IValue2 {
    poster?: Poster2;

    [key: string]: any;

    constructor(data?: IValue2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.poster = _data["poster"] ? Poster2.fromJS(_data["poster"]) : undefined as any;
        }
    }

    static fromJS(data: any): Value2 {
        data = typeof data === 'object' ? data : {};
        let result = new Value2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["poster"] = this.poster ? this.poster.toJSON() : undefined as any;
        return data;
    }
}

export interface IValue2 {
    poster?: Poster2;

    [key: string]: any;
}

export class Original_value implements IOriginal_value {
    poster?: Poster3;

    [key: string]: any;

    constructor(data?: IOriginal_value) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.poster = _data["poster"] ? Poster3.fromJS(_data["poster"]) : undefined as any;
        }
    }

    static fromJS(data: any): Original_value {
        data = typeof data === 'object' ? data : {};
        let result = new Original_value();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["poster"] = this.poster ? this.poster.toJSON() : undefined as any;
        return data;
    }
}

export interface IOriginal_value {
    poster?: Poster3;

    [key: string]: any;
}

export class Flatrate88 implements IFlatrate88 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate88) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate88 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate88();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate88 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate89 implements IFlatrate89 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate89) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate89 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate89();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate89 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy65 implements IBuy65 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy65) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy65 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy65();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy65 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate90 implements IFlatrate90 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate90) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate90 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate90();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate90 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate91 implements IFlatrate91 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate91) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate91 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate91();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate91 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy66 implements IBuy66 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy66) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy66 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy66();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy66 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate92 implements IFlatrate92 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate92) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate92 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate92();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate92 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate93 implements IFlatrate93 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate93) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate93 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate93();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate93 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate94 implements IFlatrate94 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate94) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate94 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate94();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate94 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate95 implements IFlatrate95 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate95) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate95 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate95();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate95 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate96 implements IFlatrate96 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate96) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate96 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate96();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate96 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate97 implements IFlatrate97 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate97) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate97 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate97();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate97 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate98 implements IFlatrate98 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate98) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate98 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate98();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate98 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy67 implements IBuy67 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy67) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy67 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy67();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy67 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate99 implements IFlatrate99 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate99) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate99 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate99();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate99 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate100 implements IFlatrate100 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate100) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate100 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate100();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate100 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy68 implements IBuy68 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy68) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy68 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy68();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy68 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate101 implements IFlatrate101 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate101) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate101 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate101();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate101 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate102 implements IFlatrate102 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate102) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate102 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate102();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate102 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate103 implements IFlatrate103 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate103) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate103 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate103();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate103 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate104 implements IFlatrate104 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate104) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate104 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate104();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate104 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate105 implements IFlatrate105 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate105) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate105 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate105();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate105 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy69 implements IBuy69 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy69) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy69 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy69();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy69 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate106 implements IFlatrate106 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate106) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate106 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate106();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate106 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate107 implements IFlatrate107 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate107) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate107 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate107();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate107 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate108 implements IFlatrate108 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate108) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate108 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate108();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate108 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate109 implements IFlatrate109 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate109) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate109 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate109();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate109 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate110 implements IFlatrate110 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate110) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate110 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate110();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate110 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate111 implements IFlatrate111 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate111) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate111 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate111();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate111 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate112 implements IFlatrate112 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate112) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate112 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate112();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate112 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy70 implements IBuy70 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy70) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy70 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy70();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy70 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate113 implements IFlatrate113 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate113) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate113 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate113();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate113 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy71 implements IBuy71 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy71) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy71 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy71();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy71 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate114 implements IFlatrate114 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate114) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate114 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate114();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate114 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate115 implements IFlatrate115 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate115) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate115 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate115();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate115 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy72 implements IBuy72 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy72) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy72 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy72();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy72 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate116 implements IFlatrate116 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate116) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate116 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate116();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate116 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate117 implements IFlatrate117 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate117) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate117 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate117();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate117 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate118 implements IFlatrate118 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate118) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate118 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate118();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate118 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate119 implements IFlatrate119 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate119) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate119 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate119();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate119 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate120 implements IFlatrate120 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate120) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate120 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate120();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate120 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate121 implements IFlatrate121 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate121) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate121 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate121();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate121 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate122 implements IFlatrate122 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate122) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate122 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate122();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate122 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate123 implements IFlatrate123 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate123) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate123 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate123();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate123 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate124 implements IFlatrate124 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate124) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate124 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate124();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate124 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate125 implements IFlatrate125 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate125) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate125 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate125();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate125 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy73 implements IBuy73 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy73) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy73 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy73();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy73 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate126 implements IFlatrate126 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate126) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate126 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate126();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate126 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate127 implements IFlatrate127 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate127) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate127 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate127();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate127 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy74 implements IBuy74 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy74) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy74 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy74();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy74 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate128 implements IFlatrate128 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate128) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate128 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate128();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate128 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate129 implements IFlatrate129 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate129) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate129 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate129();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate129 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate130 implements IFlatrate130 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate130) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate130 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate130();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate130 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy75 implements IBuy75 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy75) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy75 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy75();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy75 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent46 implements IRent46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent46) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent46 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent46();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent46 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate131 implements IFlatrate131 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate131) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate131 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate131();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate131 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate132 implements IFlatrate132 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate132) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate132 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate132();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate132 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate133 implements IFlatrate133 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate133) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate133 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate133();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate133 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate134 implements IFlatrate134 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate134) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate134 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate134();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate134 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate135 implements IFlatrate135 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate135) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate135 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate135();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate135 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate136 implements IFlatrate136 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate136) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate136 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate136();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate136 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate137 implements IFlatrate137 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate137) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate137 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate137();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate137 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate138 implements IFlatrate138 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate138) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate138 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate138();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate138 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate139 implements IFlatrate139 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate139) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate139 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate139();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate139 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate140 implements IFlatrate140 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate140) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate140 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate140();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate140 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate141 implements IFlatrate141 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate141) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate141 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate141();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate141 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate142 implements IFlatrate142 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate142) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate142 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate142();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate142 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate143 implements IFlatrate143 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate143) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate143 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate143();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate143 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate144 implements IFlatrate144 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate144) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate144 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate144();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate144 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy76 implements IBuy76 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy76) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy76 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy76();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy76 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate145 implements IFlatrate145 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate145) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate145 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate145();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate145 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy77 implements IBuy77 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy77) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy77 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy77();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy77 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate146 implements IFlatrate146 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate146) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate146 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate146();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate146 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate147 implements IFlatrate147 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate147) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate147 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate147();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate147 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate148 implements IFlatrate148 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate148) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate148 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate148();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate148 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate149 implements IFlatrate149 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate149) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate149 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate149();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate149 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate150 implements IFlatrate150 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate150) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate150 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate150();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate150 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent47 implements IRent47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent47) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent47 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent47();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent47 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate151 implements IFlatrate151 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate151) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate151 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate151();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate151 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate152 implements IFlatrate152 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate152) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate152 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate152();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate152 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate153 implements IFlatrate153 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate153) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate153 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate153();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate153 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate154 implements IFlatrate154 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate154) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate154 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate154();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate154 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate155 implements IFlatrate155 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate155) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate155 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate155();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate155 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate156 implements IFlatrate156 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate156) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate156 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate156();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate156 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Ads3 implements IAds3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IAds3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Ads3 {
        data = typeof data === 'object' ? data : {};
        let result = new Ads3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IAds3 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate157 implements IFlatrate157 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate157) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate157 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate157();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate157 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate158 implements IFlatrate158 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate158) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate158 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate158();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate158 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate159 implements IFlatrate159 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate159) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate159 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate159();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate159 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy78 implements IBuy78 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy78) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy78 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy78();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy78 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate160 implements IFlatrate160 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate160) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate160 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate160();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate160 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate161 implements IFlatrate161 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate161) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate161 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate161();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate161 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate162 implements IFlatrate162 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate162) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate162 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate162();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate162 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate163 implements IFlatrate163 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate163) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate163 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate163();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate163 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate164 implements IFlatrate164 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate164) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate164 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate164();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate164 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate165 implements IFlatrate165 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate165) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate165 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate165();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate165 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate166 implements IFlatrate166 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate166) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate166 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate166();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate166 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate167 implements IFlatrate167 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate167) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate167 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate167();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate167 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate168 implements IFlatrate168 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate168) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate168 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate168();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate168 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate169 implements IFlatrate169 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate169) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate169 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate169();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate169 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate170 implements IFlatrate170 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate170) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate170 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate170();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate170 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Free implements IFree {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFree) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Free {
        data = typeof data === 'object' ? data : {};
        let result = new Free();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFree {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy79 implements IBuy79 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy79) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy79 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy79();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy79 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate171 implements IFlatrate171 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate171) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate171 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate171();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate171 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate172 implements IFlatrate172 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate172) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate172 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate172();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate172 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate173 implements IFlatrate173 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate173) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate173 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate173();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate173 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate174 implements IFlatrate174 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate174) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate174 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate174();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate174 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate175 implements IFlatrate175 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate175) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate175 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate175();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate175 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Value3 implements IValue3 {
    episode_id?: number;
    episode_number?: number;

    [key: string]: any;

    constructor(data?: IValue3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.episode_id = 0;
            this.episode_number = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.episode_id = _data["episode_id"] !== undefined ? _data["episode_id"] : 0;
            this.episode_number = _data["episode_number"] !== undefined ? _data["episode_number"] : 0;
        }
    }

    static fromJS(data: any): Value3 {
        data = typeof data === 'object' ? data : {};
        let result = new Value3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["episode_id"] = this.episode_id;
        data["episode_number"] = this.episode_number;
        return data;
    }
}

export interface IValue3 {
    episode_id?: number;
    episode_number?: number;

    [key: string]: any;
}

export class Flatrate176 implements IFlatrate176 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate176) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate176 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate176();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate176 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate177 implements IFlatrate177 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate177) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate177 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate177();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate177 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate178 implements IFlatrate178 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate178) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate178 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate178();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate178 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy80 implements IBuy80 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy80) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy80 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy80();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy80 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy81 implements IBuy81 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy81) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy81 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy81();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy81 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate179 implements IFlatrate179 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate179) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate179 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate179();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate179 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate180 implements IFlatrate180 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate180) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate180 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate180();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate180 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate181 implements IFlatrate181 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate181) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate181 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate181();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate181 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate182 implements IFlatrate182 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate182) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate182 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate182();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate182 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate183 implements IFlatrate183 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate183) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate183 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate183();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate183 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate184 implements IFlatrate184 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate184) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate184 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate184();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate184 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate185 implements IFlatrate185 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate185) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate185 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate185();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate185 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate186 implements IFlatrate186 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate186) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate186 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate186();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate186 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy82 implements IBuy82 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy82) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy82 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy82();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy82 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate187 implements IFlatrate187 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate187) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate187 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate187();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate187 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy83 implements IBuy83 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy83) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy83 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy83();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy83 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate188 implements IFlatrate188 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate188) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate188 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate188();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate188 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate189 implements IFlatrate189 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate189) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate189 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate189();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate189 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate190 implements IFlatrate190 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate190) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate190 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate190();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate190 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate191 implements IFlatrate191 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate191) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate191 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate191();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate191 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate192 implements IFlatrate192 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate192) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate192 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate192();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate192 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate193 implements IFlatrate193 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate193) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate193 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate193();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate193 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy84 implements IBuy84 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy84) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy84 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy84();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy84 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate194 implements IFlatrate194 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate194) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate194 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate194();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate194 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate195 implements IFlatrate195 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate195) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate195 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate195();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate195 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate196 implements IFlatrate196 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate196) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate196 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate196();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate196 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate197 implements IFlatrate197 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate197) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate197 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate197();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate197 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate198 implements IFlatrate198 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate198) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate198 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate198();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate198 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate199 implements IFlatrate199 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate199) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate199 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate199();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate199 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate200 implements IFlatrate200 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate200) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate200 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate200();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate200 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate201 implements IFlatrate201 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate201) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate201 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate201();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate201 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy85 implements IBuy85 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy85) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy85 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy85();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy85 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate202 implements IFlatrate202 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate202) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate202 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate202();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate202 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy86 implements IBuy86 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy86) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy86 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy86();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy86 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate203 implements IFlatrate203 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate203) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate203 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate203();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate203 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy87 implements IBuy87 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy87) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy87 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy87();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy87 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate204 implements IFlatrate204 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate204) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate204 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate204();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate204 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate205 implements IFlatrate205 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate205) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate205 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate205();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate205 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate206 implements IFlatrate206 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate206) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate206 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate206();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate206 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate207 implements IFlatrate207 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate207) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate207 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate207();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate207 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate208 implements IFlatrate208 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate208) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate208 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate208();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate208 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate209 implements IFlatrate209 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate209) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate209 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate209();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate209 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate210 implements IFlatrate210 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate210) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate210 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate210();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate210 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate211 implements IFlatrate211 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate211) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate211 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate211();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate211 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate212 implements IFlatrate212 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate212) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate212 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate212();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate212 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy88 implements IBuy88 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy88) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy88 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy88();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy88 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate213 implements IFlatrate213 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate213) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate213 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate213();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate213 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate214 implements IFlatrate214 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate214) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate214 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate214();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate214 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate215 implements IFlatrate215 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate215) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate215 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate215();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate215 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate216 implements IFlatrate216 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate216) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate216 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate216();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate216 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy89 implements IBuy89 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy89) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy89 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy89();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy89 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate217 implements IFlatrate217 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate217) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate217 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate217();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate217 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy90 implements IBuy90 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy90) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy90 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy90();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy90 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate218 implements IFlatrate218 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate218) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate218 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate218();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate218 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent48 implements IRent48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent48) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent48 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent48();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent48 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate219 implements IFlatrate219 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate219) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate219 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate219();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate219 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate220 implements IFlatrate220 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate220) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate220 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate220();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate220 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate221 implements IFlatrate221 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate221) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate221 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate221();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate221 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate222 implements IFlatrate222 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate222) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate222 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate222();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate222 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate223 implements IFlatrate223 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate223) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate223 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate223();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate223 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate224 implements IFlatrate224 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate224) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate224 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate224();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate224 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate225 implements IFlatrate225 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate225) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate225 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate225();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate225 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate226 implements IFlatrate226 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate226) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate226 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate226();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate226 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate227 implements IFlatrate227 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate227) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate227 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate227();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate227 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate228 implements IFlatrate228 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate228) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate228 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate228();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate228 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate229 implements IFlatrate229 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate229) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate229 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate229();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate229 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate230 implements IFlatrate230 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate230) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate230 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate230();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate230 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy91 implements IBuy91 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy91) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy91 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy91();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy91 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate231 implements IFlatrate231 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate231) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate231 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate231();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate231 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy92 implements IBuy92 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy92) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy92 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy92();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy92 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate232 implements IFlatrate232 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate232) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate232 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate232();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate232 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate233 implements IFlatrate233 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate233) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate233 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate233();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate233 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate234 implements IFlatrate234 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate234) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate234 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate234();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate234 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate235 implements IFlatrate235 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate235) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate235 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate235();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate235 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate236 implements IFlatrate236 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate236) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate236 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate236();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate236 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Rent49 implements IRent49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IRent49) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Rent49 {
        data = typeof data === 'object' ? data : {};
        let result = new Rent49();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IRent49 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate237 implements IFlatrate237 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate237) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate237 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate237();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate237 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate238 implements IFlatrate238 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate238) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate238 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate238();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate238 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate239 implements IFlatrate239 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate239) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate239 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate239();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate239 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate240 implements IFlatrate240 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate240) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate240 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate240();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate240 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate241 implements IFlatrate241 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate241) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate241 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate241();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate241 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate242 implements IFlatrate242 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate242) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate242 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate242();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate242 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate243 implements IFlatrate243 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate243) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate243 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate243();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate243 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate244 implements IFlatrate244 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate244) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate244 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate244();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate244 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate245 implements IFlatrate245 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate245) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate245 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate245();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate245 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate246 implements IFlatrate246 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate246) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate246 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate246();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate246 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy93 implements IBuy93 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy93) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy93 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy93();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy93 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate247 implements IFlatrate247 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate247) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate247 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate247();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate247 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate248 implements IFlatrate248 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate248) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate248 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate248();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate248 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate249 implements IFlatrate249 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate249) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate249 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate249();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate249 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate250 implements IFlatrate250 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate250) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate250 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate250();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate250 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate251 implements IFlatrate251 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate251) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate251 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate251();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate251 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate252 implements IFlatrate252 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate252) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate252 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate252();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate252 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate253 implements IFlatrate253 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate253) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate253 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate253();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate253 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate254 implements IFlatrate254 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate254) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate254 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate254();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate254 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate255 implements IFlatrate255 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate255) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate255 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate255();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate255 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate256 implements IFlatrate256 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate256) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate256 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate256();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate256 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate257 implements IFlatrate257 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate257) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate257 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate257();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate257 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Buy94 implements IBuy94 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IBuy94) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Buy94 {
        data = typeof data === 'object' ? data : {};
        let result = new Buy94();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IBuy94 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Free2 implements IFree2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFree2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Free2 {
        data = typeof data === 'object' ? data : {};
        let result = new Free2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFree2 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate258 implements IFlatrate258 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate258) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate258 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate258();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate258 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate259 implements IFlatrate259 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate259) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate259 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate259();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate259 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate260 implements IFlatrate260 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate260) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate260 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate260();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate260 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate261 implements IFlatrate261 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate261) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate261 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate261();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate261 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Flatrate262 implements IFlatrate262 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;

    constructor(data?: IFlatrate262) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.provider_id = 0;
            this.display_priority = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.logo_path = _data["logo_path"];
            this.provider_id = _data["provider_id"] !== undefined ? _data["provider_id"] : 0;
            this.provider_name = _data["provider_name"];
            this.display_priority = _data["display_priority"] !== undefined ? _data["display_priority"] : 0;
        }
    }

    static fromJS(data: any): Flatrate262 {
        data = typeof data === 'object' ? data : {};
        let result = new Flatrate262();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["logo_path"] = this.logo_path;
        data["provider_id"] = this.provider_id;
        data["provider_name"] = this.provider_name;
        data["display_priority"] = this.display_priority;
        return data;
    }
}

export interface IFlatrate262 {
    logo_path?: string;
    provider_id?: number;
    provider_name?: string;
    display_priority?: number;

    [key: string]: any;
}

export class Poster implements IPoster {
    file_path?: string;

    [key: string]: any;

    constructor(data?: IPoster) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.file_path = _data["file_path"];
        }
    }

    static fromJS(data: any): Poster {
        data = typeof data === 'object' ? data : {};
        let result = new Poster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["file_path"] = this.file_path;
        return data;
    }
}

export interface IPoster {
    file_path?: string;

    [key: string]: any;
}

export class Poster2 implements IPoster2 {
    file_path?: string;
    iso_639_1?: string;

    [key: string]: any;

    constructor(data?: IPoster2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.file_path = _data["file_path"];
            this.iso_639_1 = _data["iso_639_1"];
        }
    }

    static fromJS(data: any): Poster2 {
        data = typeof data === 'object' ? data : {};
        let result = new Poster2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["file_path"] = this.file_path;
        data["iso_639_1"] = this.iso_639_1;
        return data;
    }
}

export interface IPoster2 {
    file_path?: string;
    iso_639_1?: string;

    [key: string]: any;
}

export class Poster3 implements IPoster3 {
    file_path?: string;
    iso_639_1?: string;

    [key: string]: any;

    constructor(data?: IPoster3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.file_path = _data["file_path"];
            this.iso_639_1 = _data["iso_639_1"];
        }
    }

    static fromJS(data: any): Poster3 {
        data = typeof data === 'object' ? data : {};
        let result = new Poster3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["file_path"] = this.file_path;
        data["iso_639_1"] = this.iso_639_1;
        return data;
    }
}

export interface IPoster3 {
    file_path?: string;
    iso_639_1?: string;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}